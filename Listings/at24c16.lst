C51 COMPILER V9.60.7.0   AT24C16                                                           03/27/2024 14:56:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE AT24C16
OBJECT MODULE PLACED IN .\Objects\at24c16.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE at24c16.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\at24c16.lst) TABS(2) OBJECT(.\Objects\at24c16.obj)

line level    source

   1          /*************************************************
   2          *描述：
   3          *     AT24C16数据存取设置
   4          *功能：
   5          *     存储时间，探头个数，设置参数，计数率
   6          
   7          ************************************************/
   8          
   9          #include "STC15F2K60S2.h"
  10          #include "config.h"
  11          #include "intrins.h"
  12          
  13          void delay_n5ms_24(uchar idata n);
  14          
  15          /********开始函数****************/
  16          void start_24(void)  // 时钟线保持高电平期间，数据线电平从高到低的跳变作为总线的起始信号
  17          {
  18   1          _nop_();
  19   1          scl = 0;
  20   1          sda = 1;
  21   1          scl = 1;
  22   1          _nop_();
  23   1          sda = 0;
  24   1          _nop_();
  25   1          _nop_();
  26   1          scl = 0;
  27   1          _nop_();
  28   1          _nop_();
  29   1          sda = 1;
  30   1      }
  31          
  32          /*******结束函数****************/
  33          void stop_24(void)  // 时钟线保持高电平期间，数据线电平从低到高的跳变作为总线的停止信号
  34          {
  35   1          scl = 0;
  36   1          sda = 0;
  37   1          scl = 1;
  38   1          _nop_();
  39   1          sda = 1;
  40   1          _nop_();
  41   1          scl = 0;
  42   1      }
  43          /*******************************
  44                  读8 Bit 数据
  45           ******************************/
  46          uchar read_8_bit_24(void)
  47          {
  48   1          uchar idata r_8_bit;
  49   1          uchar idata n;
  50   1          uchar idata m;
  51   1          uchar idata temp[8] = 0;
  52   1      
  53   1          r_8_bit = 0;
  54   1          scl = 0;
C51 COMPILER V9.60.7.0   AT24C16                                                           03/27/2024 14:56:10 PAGE 2   

  55   1          scl = 1;
  56   1          for (n = 0; n < 8; n++)  // 得到数据，由高到低位
  57   1          {
  58   2              scl = 1;
  59   2              _nop_();
  60   2              temp[n] = sda;
  61   2              scl = 0;
  62   2          }
  63   1          scl = 0;
  64   1          sda = 1;
  65   1          scl = 1;
  66   1          _nop_();
  67   1          _nop_();
  68   1          scl = 0;  // 处理确认位
  69   1      
  70   1          for (m = 0; m < 8; m++)  // 数据处理
  71   1          {
  72   2              r_8_bit = r_8_bit << 1;
  73   2              if (temp[m] == 1)
  74   2                  r_8_bit = r_8_bit | 0x01;
  75   2              else
  76   2                  r_8_bit = r_8_bit | 0x00;
  77   2          }
  78   1          return r_8_bit;
  79   1      }
  80          
  81          /***************************************
  82                      写8 Bit 数据 x
  83          ****************************************/
  84          void write_8_bit_24(uchar idata x)
  85          {
  86   1          uchar idata w_8_bit;
  87   1          uchar idata n, m, a;
  88   1          uchar idata temp[8] = 0;
  89   1          w_8_bit = x;
  90   1      
  91   1          for (n = 0; n < 8; n++) {
  92   2              a = w_8_bit & 0x80;  // 高位在前
  93   2              if (a == 0x80)
  94   2                  temp[n] = 1;
  95   2              else
  96   2                  temp[n] = 0;
  97   2              w_8_bit = w_8_bit << 1;
  98   2          }
  99   1      
 100   1          sda = 1;
 101   1          scl = 0;
 102   1          for (m = 0; m < 8; m++)  // 先写高位
 103   1          {
 104   2              sda = temp[m];
 105   2              scl = 1;
 106   2              _nop_();
 107   2              scl = 0;
 108   2          }
 109   1      
 110   1          scl = 1;
 111   1          _nop_();
 112   1          scl = 0;  // 处理确认位
 113   1      }
 114          
 115          /************************************************************************
 116           *                         读1 Byte 数据
C51 COMPILER V9.60.7.0   AT24C16                                                           03/27/2024 14:56:10 PAGE 3   

 117           * 输入参数：r_add      要读的数据的地址,格式为:1010+页码(3位)+0+地址(8位)
 118           * 返回参数：r_1_byte   读得到的数据
 119           **************************************************************************/
 120          uchar read_1_byte_24(uint idata r_add)
 121          {
 122   1          uchar idata r_1_byte;
 123   1          uchar idata H, L, h;
 124   1      
 125   1          H = r_add / 256;  // 得到高8位数据
 126   1          L = r_add % 256;  // 得到低8位数据
 127   1          h = H + 1;        // 得到读指令的数据
 128   1      
 129   1          delay_n5ms_24(1);
 130   1      
 131   1          start_24();
 132   1          write_8_bit_24(H);  // 发写指令
 133   1          _nop_();
 134   1          _nop_();
 135   1          _nop_();
 136   1          _nop_();
 137   1          write_8_bit_24(L);  // 写入地址
 138   1          _nop_();
 139   1          _nop_();
 140   1          _nop_();
 141   1          _nop_();
 142   1      
 143   1          start_24();
 144   1          write_8_bit_24(h);  // 发读命令
 145   1          _nop_();
 146   1          _nop_();
 147   1          _nop_();
 148   1          _nop_();
 149   1      
 150   1          r_1_byte = read_8_bit_24();  // 读得数据
 151   1          _nop_();
 152   1          _nop_();
 153   1          _nop_();
 154   1          _nop_();
 155   1          stop_24();
 156   1      
 157   1          return r_1_byte;
 158   1      }
 159          
 160          /******************************************************************
 161           *                          写1 Byte 数据
 162           * 输入参数：w_add     写的地址，格式为:1010+页码(3位)+0+地址(8位)
 163           *         w_1_byte  要写入的数据
 164           *******************************************************************/
 165          void write_1_byte_24(uint idata w_add, uchar idata w_1_byte)
 166          {
 167   1          uchar idata H, L;
 168   1          H = w_add / 256;
 169   1          L = w_add % 256;
 170   1      
 171   1          delay_n5ms_24(1);  // 加延时，解决了连续写要延时的问题
 172   1      
 173   1          start_24();
 174   1          write_8_bit_24(H);  // 发写指令,写高8位
 175   1          _nop_();
 176   1          _nop_();
 177   1          _nop_();
 178   1          _nop_();
C51 COMPILER V9.60.7.0   AT24C16                                                           03/27/2024 14:56:10 PAGE 4   

 179   1      
 180   1          write_8_bit_24(L);  // 写入地址,写低8位
 181   1          _nop_();
 182   1          _nop_();
 183   1          _nop_();
 184   1          _nop_();
 185   1      
 186   1          write_8_bit_24(w_1_byte);  // 写入数据
 187   1          _nop_();
 188   1          _nop_();
 189   1          _nop_();
 190   1          _nop_();
 191   1          stop_24();
 192   1      }
 193          
 194          /************************************
 195           *        延时函数 5n ms
 196           ************************************/
 197          void delay_n5ms_24(uchar idata n)
 198          {
 199   1          uchar idata q;
 200   1          uint idata p;
 201   1          for (q = 0; q < n; q++)
 202   1              for (p = 0; p < 5000; p++) {
 203   2              };
 204   1      }
 205          
 206          /*************************************
 207           *         存储数据
 208           *************************************/
 209          void DS_SaveData(uchar *dt)
 210          {
 211   1          uint data i;
 212   1          uint data w = 0xa000;
 213   1          for (i = 0; i < 331; i++) {
 214   2              write_1_byte_24(w, dt[i]);
 215   2              delay_n5ms_24(2);
 216   2              w++;
 217   2              if (w == 0xa100) {
 218   3                  w = 0xa200;
 219   3              }
 220   2          }
 221   1      }
 222          
 223          /*************************************
 224           *          读取数据
 225           *************************************/
 226          void DS_ReadData(uchar *dt)
 227          {
 228   1          uint data j;
 229   1          uint data w = 0xa000;
 230   1          for (j = 0; j < 331; j++) {
 231   2              dt[j] = read_1_byte_24(w);  // 读取1Byte数据
 232   2              delay_n5ms_24(2);           // 延时2*5=10ms
 233   2              w++;
 234   2              if (w == 0xa100) {
 235   3                  w = 0xa200;
 236   3              }
 237   2          }
 238   1      }


C51 COMPILER V9.60.7.0   AT24C16                                                           03/27/2024 14:56:10 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    638    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----      32
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
