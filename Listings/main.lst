C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2          * ÒÇÆ÷Ãû³Æ£º
   3                     r·øÉäÒÇ
   4          * ¹¦ÄÜ£º
   5                  1.   Ê±¼ä¼ü£ºÉèÖÃ²âÁ¿Ê±¼ä£¬¿ÉÍ¨¹ıÒº¾§ÆÁÏÔÊ¾£»
   6                  2.   Ì½Í·¼ü£ºÉèÖÃÌ½Í·¸öÊı£¬¿ÉÍ¨¹ıÒº¾§ÆÁÏÔÊ¾£»
   7                          3.   ²âÁ¿¼ü£º¼ÆÊıÌ½Í·¼ÆÊı½á¹û£¬¿ÉÍ¨¹ıÒº¾§ÆÁÏÔÊ¾Ã¿¸öÌ½Í·¼ÆÊıÂÊ£»
   8                          4.   ²ÎÊı¼ü£ºÉèÖÃ²ÎÊı´óĞ¡£¬¿ÉÍ¨¹ıÒº¾§ÆÁÏÔÊ¾£»
   9                          5.   ²ÎÊıÓÒÒÆ¼ü£ºÉèÖÃ²ÎÊıµÄÎ»£¬Óë²ÎÊı¼ü½áºÏ£¬À´ÉèÖÃÃ¿Î»²ÎÊıµÄ´óĞ¡£¬¿ÉÍ¨¹ıÒº¾§ÆÁ¹â±êÏÔÊ¾£»
  10                  6.   ÖØÉè¼ü£º ½«ÉèÖÃ·µ»Øµ½³õÊ¼»¯×´Ì¬£»
  11          
  12          * °´¼ü£º   Ì½Í·ÉèÖÃ¼ü£¬²âÁ¿¼ü£¬¸´Î»¼ü£¬Ê±¼äÉèÖÃ¼ü£¬²ÎÊıÉèÖÃ¼ü£¬ÓÒÒÆ¼ü£¬×óÒÆ¼ü£»
  13          * ½Ó¿Ú£º
  14                     ÊäÈë£º1. Áù¸ö°´¼üÍ¨¹ı74HC244½Óµ¥Æ¬»úµÄÊı¾İ×ÜÏß£»
  15                                   2. Ì½Í·1-15½Óµ½8053¼ÆÊıÆ÷£¬ÎåÆ¬8253Êı¾İ¶Ë½Óµ¥Æ¬»úµÄÊı¾İ×ÜÏß£»
  16          
  17                             Êä³ö£º 8253ÃÅĞÅºÅ--P1.1,·äÃù--P1.0£¬Ö÷»ú/´Ó»úÑ¡Ôñ--P1.6£¬¸´Î»--P4.7£¬·äÃùÆ÷¿ª¹Ø--P1.7,´
             -Ó»úÏÔÊ¾¿ª¹Ø--P3.3;
  18                                    Ö÷»úÇëÇóĞÅºÅNote1--P4.4,Ö÷»úÓ¦´ğĞÅºÅACKO--P3.5,´Ó»úÇëÇóĞÅºÅNote0--P3.4,´Ó»úÓ¦´ğĞ
             -ÅºÅACK1--P4.6£»
  19                                            Êı¾İ×ÜÏß--P0¿Ú£¬µØÖ·×ÜÏß--P2¿Ú£»
  20          *---------------------------------------------------------------------------------------------------------
             ------------
  21          *Ïà¶ÔÓÚÔ­Ê¼³ÌĞòµÄĞŞ¸Ä¼ÇÂ¼:
  22          *2016Äê4ÔÂ14ÈÕ£¬ĞŞ¸Ä¼ÁÁ¿ÏÔÊ¾µ¥Î»ÎªuGy/h,Í¨µÀÃû³Æ:Ch1...
  23          *2016Äê4ÔÂ18ÈÕ(AA1)£¬
  24          *2016Äê4ÔÂ19ÈÕ(AB1),
  25          *2016Äê4ÔÂ20ÈÕ(AC1),
  26          *2016Äê4ÔÂ22ÈÕ(AD1),
  27          *2016Äê4ÔÂ24ÈÕ(AE1),
  28          **********************************************************************************************************
             -***********/
  29          /********************************
  30          ´ıĞŞ¶©µÄ£º²ÎÊı±¨¾¯ãĞÖµ£¬²ÎÊı¶ÎÉèÖÃµÄãĞÖµ
  31          *********************************/
  32          
  33          #include "STC15F2K60S2.h"
  34          #include "absacc.h"
  35          #include "config.h"
  36          #include "intrins.h"
  37          
  38          bdata bit Flag_KeyInput;     // Ì½Í·°´¼ü±êÖ¾£¬Ä¬ÈÏ0
  39          bdata bit Flag_KeyTime;      // ²âÁ¿Ê±¼ä±êÖ¾£¬0
  40          bdata bit Flag_KeyPara;      // ÊäÈë²ÎÊı±êÖ¾£¬0
  41          bdata bit Flag_KeyRight;     // ÓÒÒÆ±êÖ¾£¬Ä¬ÈÏ0
  42          bdata bit Flag_KeyLeft;      // ×óÒÆ±êÖ¾£¬0
  43          bdata bit Flag_KeyReset;     // ÖØĞÂÏÔÊ¾±êÖ¾£¬0
  44          bdata bit Flag_KeyOK;        // ²âÁ¿±êÖ¾£¬Ä¬ÈÏ0
  45          bdata bit Flag_Warn;         // ±¨¾¯±êÖ¾
  46          bdata bit Flag_Mast;         // Ö÷´Ó»ú±êÖ¾
  47          bdata bit Flag_RefrInput;    // Ì½Í·¸öÊı°´¼üÔÙ´Î°´ÏÂ±êÖ¾
  48          bdata bit Flag_RefrTime;     // ²âÁ¿Ê±¼ä°´¼üÔÙ´Î°´ÏÂ±êÖ¾
  49          bdata bit Flag_RefrPara;     // ÊäÈë²ÎÊı°´¼üÔÙ´Î°´ÏÂ±êÖ¾
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 2   

  50          bdata bit Flag_RefrRight;    // ÓÒÒÆ°´¼üÔÙ´Î°´ÏÂ±êÖ¾
  51          bdata bit Flag_RefrLeft;     // ×óÒÆ°´¼üÔÙ´Î°´ÏÂ±êÖ¾
  52          bdata bit measure_flag;      // Ä¬ÈÏ0
  53          bdata bit bSwOld;            // ÊµÌå²É¼¯°´¼ü¾ÉµÄ×´Ì¬
  54          bdata bit bSwNew;            // ÊµÌå²É¼¯°´¼üĞÂµÄ×´Ì¬
  55          bdata bit bSbOld;            // ±¸ÓÃ»úÏÔÊ¾°´¼ü¾ÉµÄ×´Ì¬
  56          bdata bit bSbNew;            // ±¸ÓÃ»úÏÔÊ¾°´¼üĞÂµÄ×´Ì¬
  57          bdata bit bSsOld;            // ·äÃùÆ÷°´¼ü¾ÉµÄ×´Ì¬
  58          bdata bit bSsNew;            // ·äÃùÆ÷°´¼üĞÂµÄ×´Ì¬
  59          bdata bit Flag_Warn_Led;     // ÆÁÄ»ÉÏ±¨¾¯µÆÉÁË¸±êÖ¾£¬Ä¬ÈÏ0
  60          bdata bit Flag_Warn_Flash;   // LEDµÆÉÁË¸±êÖ¾
  61          bdata bit FlagMasColSlavOK;  // Ö÷»ú²É¼¯Êı¾İÊ±µÆÉÁË¸¶¨Ê±±êÖ¾£¬Ä¬ÈÏ0
  62          bdata bit Flag8253Cnting;    // 8253¼ÆÊı¶¨Ê±¿ªÊ¼±êÖ¾£¬Ä¬ÈÏ0,ÔÚ°´ÏÂ²âÁ¿°´¼üºóÖÃ1
  63          bdata bit Flag_ParaChange;   // ²ÎÊıÉèÖÃ¸Ä±ä£¬Ä¬ÈÏ0
  64          bdata bit Flag_InputChange;  // Ì½Í·ÉèÖÃ¸Ä±ä£¬Ä¬ÈÏ0
  65          bdata bit Flag_Collateral;   // ´Ó»ú½ÓÊÕÖ¸Áî³¬Ê±±êÖ¾
  66          bdata bit Flag_Meant;
  67          bdata bit Flag_NIMB_Sended;  // ÒÑ¾­´ÓNIM-B½ÓÊÕÊı¾İ±êÖ¾
  68          // bit Flag_Commond;
  69          uchar dt_in[331];             // IIC´æ´¢Êı×é£¬ËÄÎ»Ò»×é£¬¹²83×é,Ğ¾Æ¬ÄÚ²¿Ä¬ÈÏ0Îª255
  70          uchar data Keyvar = 0xFF;     // °´¼ü±äÁ¿
  71          uchar jishucount;             // µÚ¼¸´Î¼ÆÊı£¬ÓÃÀ´ÇóÆ½¾ùÖµÊ±ÖªµÀÕâÊÇµÚ¼¸´Î¼ÆÊı
  72          uchar Average_Times[8];       // AJ1+»¬¶¯Æ½¾ù´ÎÊı
  73          double Average_Counts[8][5];  // Æ½»¬Æ½¾ù±äÁ¿
  74          uchar Display_Flag[8];
  75          uchar Refresh_Time = 3;  // ¡¾2024¡¿3Ãë£¬ÖĞ¶ÏÊ±¼ä¼´¼ÆÊıÊ±¼ä
  76          uchar DCS_Send[67];
  77          
  78          extern void Serial_Port_Two_Initial();
  79          extern void Serial_Port_One_Initial();
  80          extern void display_b();
  81          extern void Init_MCU();
  82          extern void Init_RAM();
  83          extern void Init_Para();
  84          extern bit Speak_Alarm();
  85          extern void Select_Mast();
  86          extern void key_function();
  87          extern void RedLed_Flash();
  88          extern void Warning_Disp(uchar Num, uchar Flag, uchar State);
  89          extern void Updata_Led(uchar j);
  90          // extern void bakeup_conv_data();
  91          extern void Backup_Flash_serial1(uchar *flag, uchar *state);
  92          extern void Init_IO();
  93          extern void Transfer();
  94          extern void parameterleft();
  95          extern void BackUp_displayA();
  96          extern void display_covn_data();
  97          extern void Init_Buf();
  98          extern uint idata compare[24];
  99          // extern float idata save[16];
 100          
 101          /*********************************
 102           *            Ö÷º¯Êı
 103           **********************************/
 104          void main()
 105          {
 106   1          Init_IO();    // I/O¿Ú³õÊ¼»¯,
 107   1          Init_MCU();   // Ö÷º¯Êı³õÊ¼»¯£¬T0¶¨Ê±Æ÷¹¤×÷ÔÚ·½Ê½1³õÊ¼»¯£¬ÏÔÊ¾"ÇëÉÔµÈ£¬³õÊ¼»¯ÖĞ",GATE=0,
 108   1          Init_RAM();   // Î»±äÁ¿³õÊ¼»¯
 109   1          Init_Para();  // ²ÎÊı³õÊ¼»¯,³õÊ¼»¯²ÎÊı£¬´ÓIIC¶ÁÈ¡ãĞÖµµÈĞÅÏ¢¸³Óè¸ø²ÎÁ¿
 110   1          Init_Buf();   // ²¢¿ÚÍ¨Ñ¶Êı×é³õÊ¼»¯
 111   1          // Select_Mast();                                //ÅĞ¶ÏÖ÷´Ó»ú
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 3   

 112   1          Init_Time0();  // ¿ªÆô¶¨Ê±Æ÷0¡£¶¨Ê±Æ÷0³õÊ¼»¯£¬¹¤×÷ÔÚ·½Ê½Ò»£¬¶¨Ê±³õÖµ£ºH:0xDC,L:0x00;ÖĞ¶Ï¼ÆÊı³õÊ¼»¯£¿¶¨
             -Ê±5ms,NumT0=0;
 113   1          Lcd_Clear();   // LCDÇåÆÁ
 114   1          Lcd_Start();   // ÏÔÊ¾"Çå»ª´óÑ§/nºËÄÜÓëĞÂÄÜÔ´¼¼ÊõÑĞ¾¿Ôº"
 115   1          EX0 = 1;       // Ö»ÔÊĞíÍâ²¿0ÖĞ¶Ï£¬ÖĞ¶Ï0Îª¼üÅÌ
 116   1          IT0 = 1;       // Íâ²¿ÖĞ¶Ï0
 117   1          while (1) {
 118   2              //     BackUp_Display();
 119   2              Select_Mast();  // ÅĞ¶ÏÖ÷´Ó»ú£¬Ğ´ÈëÖ÷´Ó»ú±êÖ¾Flag_Mast=1(Ö÷»ú)0(´Ó»ú)
 120   2              if (EX0 == 0) {
 121   3                  Flag_KeyOK = 0;
 122   3              } else {
 123   3                  key_function();
 124   3              }               // °´¼ü¹¦ÄÜ£¬ÔÚwhileÑ­»·ÖĞ²»¶Ï¼ì²â°´¼ü±êÖ¾£¬°´¼ü±êÖ¾ÓÉ°´¼üÍâ²¿ÖĞ¶ÏÀ´¸ü¸Ä
 125   2              if (Flag_Tim0)  // 8253¼ÆÊı¶¨Ê±½áÊøÊ±£¬¶ÁÈ¡Ì½Í·µÄ¼ÆÊı£¬¸Õ¿ªÊ¼Flag_Tim0=0£¬½öµ±Flag8253Counting¼ÆÊı
             -¶¨Ê±±êÊ¶Îª1£¬ÇÒ¼ÆÊıÆ÷ÖĞ¶Ï´ÎÊı´óÓÚÉè¶¨µÄÖĞ¶Ï´ÎÊıÊ±£¬Flag_timo²Å»áµÈÓÚ1
 126   2              {  // Flag_Tim0Îª¼ÆÊıÆ÷½áÊø±êÖ¾,³õÊ¼Îª0,¿ª»ú´ò¿ª¶¨Ê±Æ÷ÖĞ¶Ïºó,¶¨Ê±Æ÷5msÖĞ¶ÏÒ»´Î,¼ì²éFlag_Tim0Ò»´Î,Î
             -ªÒ»±íÊ¾¼ÆÊıÆ÷¼ÆÊ±½áÊø
 127   3                  Flag_Tim0 = 0;    // ¶¨Ê±±êÖ¾Çå0
 128   3                  Flag_Warn = 0;    // ±¨¾¯±êÖ¾Çå0
 129   3                  GetAndDisdata();  // ´Ó8253µÄËø´æÆ÷µÃµ½²âÁ¿¼ÆÊıÆ÷½á¹û,´æÈëÖÁbufÊı×é
 130   3                  ShowData();       // ÏÔÊ¾²âÁ¿Êı¾İ
 131   3                  // shortdelay(1000);
 132   3                  if (Zhu_Cong == 1)
 133   3                      Transfer();  // Ö»ÓĞµ±Ö÷´Ó»ú°´Å¥ÎªËÉ¿ª×´Ì¬²Å»á´ÓNIM-B»ñÈ¡Êı¾İ£¬²¢ĞĞ´«ÊäÊı¾İ
 134   3                  Transfer_DCS();
 135   3                  //      bakeup_conv_data();
 136   3                  Init_8253();  // ³õÊ¼»¯8253
 137   3                                // ¶¨Ê±½áÊøÊ±£¬Á¢¿ÌÓÖ¿ªÊ¼³õÊ¼»¯½øĞĞ¼ÆÊı
 138   3              }
 139   2              if (Flag_Tim0 == 0)  // ¿ªÆô8253¼ÆÊı¹ı³ÌÖĞ£¬´¦Àí±¨¾¯ÖĞ¶Ï£¬±¨¾¯ÓĞÖĞ¶ÏÂğ£¿
 140   2              {
 141   3                  if (Flag_Warn_Flash == 1)  // Ö÷»úLEDÖ¸Ê¾µÆÉÁË¸¼ä¸ô¶¨Ê±£¬Flag_Warn_FlashÎªLEDµÆÉÁË¸±êÖ¾
 142   3                  {
 143   4                      Flag_Warn_Flash = 0;
 144   4                      Led_Flash();
 145   4                  }
 146   3                  if ((Flag_Warn_Led == 1) && (PCOLSIG == 0))  // ÆÁÄ»ÉÏºìµÆÉÁË¸¼ä¸ô¶¨Ê±,³ÌĞòÖĞÃ»ÓĞÕÒµ½PCOLSIG=0
             -µÄ³ÌĞò¶Î
 147   3                  {
 148   4                      Flag_Warn_Led = 0;
 149   4                      RedLed_Flash();  // µÆÉÁË¸
 150   4                  }
 151   3              }
 152   2          }
 153   1      }
 154          
 155          /************************************
 156           *            °´¼üÖĞ¶Ï³ÌĞò
 157           **************************************/
 158          void Int0() interrupt 0
 159          {
 160   1          uint idata i;
 161   1          uchar idata Ptem1, Ptem2;
 162   1          ES = 0;      // ½ûÖ¹´®¿ÚÖĞ¶Ï
 163   1          IE2 = 0x00;  // ½ûÖ¹´®¿Ú2ÖĞ¶Ï
 164   1          EX0 = 0;     // ½ûÖ¹Íâ²¿0ÖĞ¶Ï
 165   1          Keyvar = Keypress;
 166   1          Ptem1 = Keyvar;  // ¶ÁÈ¡¶Ë¿ÚµÄµØÖ·ÊÇ·ñÏÈ¸øËüÈ«²¿ÖÃ1
 167   1          Ptem1 = Ptem1 & 0x7F;
 168   1          for (i = 0; i < 18433; i++)
 169   1              ;  // ÑÓÊ±È¥¶¶¡¾2024¡¿22.1184¾§Õñ»úÆ÷ÖÜÆÚ0.5425us£¬ÕâÀïÏû¶¶ÑÓÊ±Ì«¶Ì£¬Ò»°ã10ms£¬¸ÄÎª18433
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 4   

 170   1          Ptem2 = Keyvar;
 171   1          Ptem2 = Ptem2 & 0x7F;
 172   1          if (Ptem1 != Ptem2) {
 173   2              EX0 = 1;
 174   2          } else {
 175   2              if (Keypress == 0x7E)  // °´¼ü1£º²ÎÊıÉèÖÃ
 176   2                  Flag_KeyPara = 1;
 177   2              else if (Keypress == 0x7D)  // °´¼ü2£º²âÁ¿
 178   2                  Flag_KeyOK = 1;
 179   2              else if (Keypress == 0x7B)  // °´¼ü3£º²ÎÊıÓÒÒÆ
 180   2                  Flag_KeyRight = 1;
 181   2              else if (Keypress == 0x77)  // °´¼ü4£ºÖØĞÂÉèÖÃ
 182   2                  Flag_KeyReset = 1;
 183   2              else if (Keypress == 0x6F)  // °´¼ü5£ºÊ±¼äÉèÖÃ
 184   2                  Flag_KeyTime = 1;
 185   2              else if (Keypress == 0x5F)  // °´¼ü6£ºÌ½Í·ÉèÖÃ
 186   2                  Flag_KeyInput = 1;
 187   2              else if (Keypress == 0x3F)  // °´¼ü7£º²ÎÊı×óÒÆ
 188   2                  Flag_KeyLeft = 1;
 189   2          }
 190   1          EX0 = 1;  // need change
 191   1      }
 192          
 193          /****************************************
 194           *         CPU³õÊ¼»¯
 195           ****************************************/
 196          void Init_MCU()
 197          {
 198   1          /*¶¨Ê±¼ÆÊıÆ÷µÄ³õÊ¼»¯*/
 199   1          TMOD = 0x01;  // T0Îª¶¨Ê±Æ÷£¬¹¤×÷ÔÚ·½Ê½1
 200   1          GATE = 0;     // 8253²»¹¤×÷
 201   1          EA = 0;       // ÏÈÆÁ±ÎËùÓĞÖĞ¶Ï
 202   1          TR0 = 0;      // ÔİÊ±¹Ø±Õ¶¨Ê±Æ÷0
 203   1          IE0 = 0;      // ½«Íâ²¿ÖĞ¶Ï0Çå0
 204   1          /*ÎªLCDÏÔÊ¾  ½ûÖ¹´®¿ÚÖĞ¶Ï*/
 205   1          EX0 = 0;     // ½ûÖ¹Íâ²¿1ÖĞ¶Ï
 206   1          ET0 = 0;     // ½ûÖ¹¶¨Ê±0ÖĞ¶Ï
 207   1          ES = 0;      // ½ûÖ¹´®¿Ú1ÖĞ¶Ï
 208   1          IE2 = 0x00;  // ½ûÖ¹´®¿Ú2ÖĞ¶Ï
 209   1          /*******´®¿Ú³õÊ¼»¯*********/
 210   1          serial_port_two_initial();  // ´®¿Ú2ÖĞ¶Ï³õÊ¼»¯(Î´ÕÒµ½¶¨Òå)
 211   1          serial_port_one_initial();
 212   1          /*Òº¾§³õÊ¼»¯ÏÔÊ¾*/
 213   1          Lcd_Clear();  // ´®¿Ú2ÇåÆÁ
 214   1          // picture();                               //´®¿Ú2³õÊ¼Í¼Æ¬
 215   1          Lcd_init();  // ´®¿Ú2³õÊ¼»¯LCDÏÔÊ¾£¨ÇëÉÔµÈ£¬½øĞĞ³õÊ¼»¯ÖĞ¡±
 216   1          Clear();     // Çå³ı¹â±ê
 217   1      }
 218          /****************************************
 219           *         ²ÎÊı³õÊ¼»¯
 220           ****************************************/
 221          void Init_Para()
 222          {
 223   1          uchar i, j, k, y, m, n, q, x;  //,w ,jj
 224   1                                         // uchar s,z;
 225   1          uchar p = 0;
 226   1      
 227   1          for (i = 0; i < 75; i++)  // ³õÊ¼»¯²ÎÊıÊı×é
 228   1          {
 229   2              DataGe[i] = 0;      // ¸÷¸öÎ»
 230   2              DataTenth[i] = 0;   // Ê®·ÖÎ»
 231   2              DataCent[i] = 0;    // °Ù·ÖÎ»
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 5   

 232   2              DataThouth[i] = 0;  // Ç§·ÖÎ»
 233   2          }
 234   1          for (j = 0; j < 8; j++) {
 235   2              YuGe[j] = 0;
 236   2              YuTenth[j] = 0;
 237   2              YuCent[j] = 0;
 238   2              YuThouth[j] = 0;
 239   2              Flag_need_warn[j] = 0;
 240   2              State_On_Off[j] = 0;
 241   2              DoseRata[j] = 0;  // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
 242   2              count_change_flag[j] = 0;
 243   2              Channel_Detector[j][0] = 3;
 244   2              Channel_Detector[j][1] = 4;  // AC1+³õÊ¼¾ùÎªDL3
 245   2              for (i = 0; i < 6; i++) {
 246   3                  Average_Counts[j][i] = 0;
 247   3              }
 248   2          }
 249   1          for (m = 0; m < 83; m++)  // ³õÊ¼»¯´æ´¢Êı×é
 250   1          {
 251   2              dt_in[4 * m] = 0;
 252   2              dt_in[4 * m + 1] = 0;
 253   2              dt_in[4 * m + 2] = 0;
 254   2              dt_in[4 * m + 3] = 0;
 255   2          }
 256   1          for (n = 0; n < 65; n++)  // ³õÊ¼»¯½ÓÊÕÊı×é
 257   1          {
 258   2              send_buf[n] = 0;  // NIM_AÏòNIM_B·¢ËÍÊı¾İµÄÊı×é
 259   2          }
 260   1          /*  for(s=0;s<20;s++)
 261   1                  {
 262   1                          backup_data[s] = 0;
 263   1                  }*/
 264   1          for (y = 0; y < 8; y++) {
 265   2              Flag_need_warn[y] = 0;
 266   2              State_On_Off[y] = 0;
 267   2              //    data_A[y]=0;
 268   2          }
 269   1          /*  for(z=0;z<12;z++)
 270   1                  {
 271   1                          data_B[z]=0;
 272   1                  }*/
 273   1          /*´ÓAT24C16ÖĞ¶ÁÈ¡Êı¾İ*/
 274   1          DS_ReadData(dt_in);       // IIC EEPROM¶ÁÈ¡Êı¾İ
 275   1          for (x = 0; x < 83; x++)  // Ğ¾Æ¬ÄÚ²¿Ä¬ÈÏ0Îª255
 276   1          {
 277   2              if (dt_in[x * 4] == 255) {
 278   3                  dt_in[4 * x] = 0;
 279   3              }
 280   2              if (dt_in[x * 4 + 1] == 255) {
 281   3                  dt_in[4 * x + 1] = 0;
 282   3              }
 283   2              if (dt_in[x * 4 + 2] == 255) {
 284   3                  dt_in[4 * x + 2] = 0;
 285   3              }
 286   2              if (dt_in[x * 4 + 3] == 255) {
 287   3                  dt_in[4 * x + 3] = 0;
 288   3              }
 289   2          }
 290   1          Incinput = dt_in[330];  // ¶ÁÈ¡IICÖĞµÄÌ½Í·¸öÊı±êÖ¾
 291   1                                  /*********¶ÁÈ¡²ÎÊı*********/
 292   1          for (q = 0; q < 74; q++) {
 293   2              p++;
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 6   

 294   2              if (p % 11 == 0) {
 295   3                  p++;
 296   3              }
 297   2              if ((dt_in[p * 4 + 1] <= 9) && (dt_in[p * 4 + 2] <= 9) && (dt_in[p * 4 + 3] <= 9) && (dt_in[p * 4 
             -+ 4] <= 9)) {
 298   3                  DataThouth[q + 1] = dt_in[p * 4 + 1];  // Ç§·ÖÎ»
 299   3                  DataCent[q + 1] = dt_in[p * 4 + 2];    // °Ù·ÖÎ»
 300   3                  DataTenth[q + 1] = dt_in[p * 4 + 3];   // Ê®·ÖÎ»
 301   3                  DataGe[q + 1] = dt_in[p * 4 + 4];      // ¸öÎ»
 302   3              }
 303   2          }
 304   1          /********¶ÁÈ¡ãĞÖµ***********/
 305   1          for (k = 0; k < 8; k++) {
 306   2              if ((dt_in[(k * 44) + 1] <= 9) && (dt_in[(k * 44) + 2] <= 9) && (dt_in[(k * 44) + 3] <= 9) && (dt_
             -in[(k * 44) + 4] <= 9)) {
 307   3                  YuThouth[k] = dt_in[(k * 44) + 1];
 308   3                  YuCent[k] = dt_in[(k * 44) + 2];
 309   3                  YuTenth[k] = dt_in[(k * 44) + 3];
 310   3                  YuGe[k] = dt_in[(k * 44) + 4];
 311   3              }
 312   2          }
 313   1          if (dt_in[1] <= 9) {
 314   2              Incdata = dt_in[1];
 315   2          }
 316   1      }
 317          
 318          /****************************************
 319           *         Êı×é³õÊ¼»¯
 320           ****************************************/
 321          void Init_Buf()
 322          {
 323   1          uchar n;
 324   1          for (n = 0; n < 57; n++)  // ³õÊ¼»¯½ÓÊÕÊı×é,**·ÅÔÚ´Ë´¦Ô­Òò£º·ÅÔÚ²ÎÊı³õÊ¼»»º¯ÊıÖĞ£¬ÔÚ´Ë´¦µ÷ÓÃÊ±£¬Êı¾İÒÑ
             -¾­·¢Éú±ä»¯** can not understand
 325   1          {
 326   2              receive_buf[n] = 0;
 327   2          }
 328   1      }
 329          
 330          /************************************
 331           *          Î»±êÊ¶³õÊ¼»¯
 332           *************************************/
 333          void Init_RAM()
 334          {
 335   1          uchar i;
 336   1          bz = 1;                  // ²ÎÊıÉèÖÃ³õÊ¼²ÎÊı¸öÊı±êÖ¾
 337   1          xh = 1;                  // ²ÎÊıÉèÖÃ³õÊ¼Ì½Í·¸öÊı±êÖ¾
 338   1          wb = 1;                  // ²ÎÊıÉèÖÃ³õÊ¼²ÎÊıĞĞÊı±êÖ¾
 339   1          Flag_dw = 1;             // ³õÊ¼µ¥Î»±êÖ¾
 340   1          Note0 = 1;               // ²¢¿Ú´Ó»ú·¢ËÍÊı¾İ±êÖ¾³õÊ¼»¯(P3^4)
 341   1          Note1 = 1;               // ²¢¿Ú´Ó»ú½ÓÊÕÊı¾İ±êÖ¾³õÊ¼»¯(P4^4)
 342   1          Ack0 = 1;                // ²¢¿ÚÖ÷»ú½ÓÊÕÍêÊı¾İÓ¦´ğĞÅºÅ±êÖ¾(P3^5)
 343   1          Ack1 = 1;                // ²¢¿ÚÖ÷»ú·¢ËÍÍêÊı¾İÓ¦´ğĞÅºÅ±êÖ¾(P4^6)
 344   1          Speak = 1;               // ¸ßµçÆ½´ú±í·äÃùÆ÷²»Ïì(P1^0)
 345   1          Incdata = 0;             // ²ÎÊı´óĞ¡³õÊ¼»¯
 346   1          Inctime = 0;             // Ê±¼ä°´¼üÔö¼Ó±êÖ¾³õÊ¼»¯
 347   1          Incinput = 8;            // Ä¬ÈÏÏÔÊ¾Ì½Í·¸öÊıÎª8¸ö
 348   1          for (i = 0; i < 8; i++)  // AA1+
 349   1          {
 350   2              Real_Count_Display[i] = 0;  // AA1*Ä¬ÈÏË¢ĞÂÊ±¼äÎª60Ãë
 351   2              Setted_Time[i] = 60;        // AB1+³õÊ¼»¯ÉèÖÃÊ±¼ä±äÁ¿
 352   2              Average_Times[i] = 0;       // AJ1+»¬¶¯Æ½¾ù´ÎÊı
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 7   

 353   2              Display_Flag[i] = 0;
 354   2              Channel_Display[i] = 0;
 355   2          }
 356   1          Incdataright = 1;  // ÓÒÒÆ°´¼ü³õÊ¼»¯
 357   1          jishucount = 0;
 358   1          Var_Led = 0xff;         // led±¨¾¯Ö¸Ê¾µÆ
 359   1          Led573 = Var_Led;       // ÓÃXBYTE´«ÊäÊı¾İ¸øLED
 360   1          Var_Signal1 = 0x00;     // Ì½Í·¿ØÖÆĞÅºÅ±êÖ¾£¬½Ó¼ÆÊı¹Ü
 361   1          Var_Signal2 = 0x00;     // Ì½Í·¿ØÖÆĞÅºÅ±êÖ¾£¬½ÓµçÀëÊÒ
 362   1          Var_Signal3 = 0xff;     // Ì½Í·¿ØÖÆĞÅºÅ±êÖ¾£¬½ÓµçÀëÊÒII£¬¿ª»úÄ¬ÈÏ
 363   1          Signal1 = Var_Signal1;  // ÏÂÃæÈıÌõ´«ÊäĞÅºÅ£¬Ä¬ÈÏÈ«½Ó¼ÆÊı¹Ü
 364   1          Signal2 = Var_Signal2;
 365   1          Signal3 = Var_Signal3;
 366   1          sendadd = 0x00;        // ¸ø²¢ĞĞ´Ó»ú·¢ËÍ³õÊ¼Ö¸Áî
 367   1          PCOLSIG = 1;           // ¸ßµçÆ½´ú±í²»²É¼¯Êı¾İ£¬P3^3,
 368   1          bSwNew = PCOLSIG;      // ²É¼¯Êı¾İ£¨bswNewÎªÎ»²¼¶û±äÁ¿£©
 369   1          bSwOld = bSwNew;       // ÀÏ°´¼ü
 370   1          PALE = 1;              // ¸ßµçÆ½´ú±í²»ÏÔÊ¾±¸ÓÃ»ú,P4^5,±¸ÓÃÏÔÊ¾ÆÁ°´¼ü
 371   1          bSbOld = 1;            // ±¸ÓÃ»úÏÔÊ¾°´¼ü²¼¶û±êÖ¾
 372   1          Judge_Speak = 1;       // ¸ßµçÆ½´ú±í·äÃùÆ÷²»¹¤×÷£¬P1^7·äÃùÆ÷¿ª¹Ø°´¼ü
 373   1          bSsNew = Judge_Speak;  // ·äÃùÆ÷¹¤×÷
 374   1          bSsOld = bSsNew;
 375   1          Zhu_Cong = 1;       // Ö÷´Ó»ú±êÖ¾ĞÅºÅ£¬¸ßµçÆ½´ú±íÊÇÖ÷»ú
 376   1          Flag_KeyInput = 0;  // Ì½Í·¸öÊı±êÖ¾
 377   1          Flag_KeyTime = 0;   // ²âÁ¿Ê±¼ä±êÖ¾
 378   1          Flag_KeyPara = 0;   // ÊäÈë²ÎÊı±êÖ¾
 379   1          Flag_KeyRight = 0;  // ÓÒÒÆ±êÖ¾
 380   1          Flag_KeyOK = 0;     // ¿ªÊ¼²âÁ¿±êÖ¾
 381   1          Flag_KeyReset = 0;  // ÖØĞÂÏÔÊ¾±êÖ¾;
 382   1          Flag_KeyLeft = 0;
 383   1          Flag_Tim0 = 0;
 384   1          Flag_Warn_Led = 0;
 385   1          FlagMasColSlavOK = 0;
 386   1          Flag8253Cnting = 0;
 387   1          Flag_Warn_Count = 0;
 388   1          measure_flag = 1;
 389   1          FlagCollErr = 0;
 390   1          CntColTimer = 0;
 391   1          FlagColling = 0;
 392   1          Flag_ParaChange = 0;
 393   1          Flag_InputChange = 0;
 394   1          //  Flag_serial1_led = 0;
 395   1          CmOverTime = 0;
 396   1          Flag_Collateral = 0;
 397   1          FlagCollFall = 0;
 398   1          Flag_Meant = 0;
 399   1          //  Flag_data_change = 0;
 400   1          //  Flag_Commond = 1;
 401   1          Max_Time = 0;  // AA1+ËùÓĞÍ¨µÀ×î³¤µÄ¼ÆÊıÊ±¼ä
 402   1      }
 403          
 404          /************************************
 405           *         I/O¶Ë¿Ú³õÊ¼»¯
 406           *************************************/
 407          void Init_IO()  // ÉèÖÃI/O¶Ë¿ÚÀàĞÍ
 408          {
 409   1          // P4SW = 0x70;                    //P4.4 P4.5 P4.6×÷ÎªÆÕÍ¨I/O¿Ú
 410   1          /*AH1*¸ÄÎª15ÏµÁĞ¶Ë¿Ú³õÊ¼»¯*/
 411   1          // P3M1 |= 0x30;                   //ÉèÖÃP3.5£¬P3.4¿ÚÊäÈë
 412   1          // P3M0 &= 0xCF;
 413   1      
 414   1          // P3M1 &= 0x3C;
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 8   

 415   1          // P3M0 |= 0xC3;                   //ÉèÖÃP3.1, p3.0¿ÚÎªÇ¿ÍÆÍìÊä³ö
 416   1      
 417   1          // P4M1 &= 0xAF;                   //ÉèÖÃP4¿ÚÎªÇ¿ÍÆÍìÊä³ö
 418   1          // P4M0 |= 0x50;
 419   1      
 420   1          // STC15 231214
 421   1      
 422   1          // P4SW = 0x30;
 423   1          // P5SW |= 0x40;
 424   1      
 425   1          P3M1 |= 0x30;  //??P3.5,P3.4???
 426   1          P3M0 &= 0xCF;
 427   1      
 428   1          P3M1 &= 0xFC;
 429   1          P3M0 |= 0x03;  //??P3.1, p3.0???????
 430   1      
 431   1          P4M1 &= 0xEF;  //??P4???????
 432   1          P4M0 |= 0x10;
 433   1      
 434   1          P5M1 &= 0xDF;
 435   1          P5M0 |= 0x20;
 436   1      }
 437          
 438          /************************************
 439           *          ²É¼¯Êı¾İ°´¼ü´¦Àí
 440           *************************************/
 441          /*bit Select_collect(void)
 442          {
 443                  bit bRet;
 444                  bRet = 0;
 445                  bSwNew=PCOLSIG;
 446              if(bSwNew != bSwOld)
 447              {
 448                  if(bSwOld==0)
 449                   {
 450                          bRet = 0;          //²»²É¼¯´Ó»úÊı¾İ
 451                       }
 452                  else
 453                   {
 454                                  bRet = 1;          //²É¼¯´Ó»úÊı¾İ
 455                   }
 456                          bSwOld=bSwNew;
 457              }
 458                  return bRet;
 459          }*/
 460          
 461          /************************************
 462           *          Ö÷´Ó»ú°´¼ü´¦Àí
 463           *************************************/
 464          void Select_Mast()
 465          {
 466   1          if (Zhu_Cong == 1)  // P1^6Ö÷´Ó»ú¿ª¹Ø°´¼ü£¬¸ßµçÆ½ÎªÖ÷»ú
 467   1          {
 468   2              Flag_Mast = 1;  // Ö÷»ú
 469   2          } else if (Zhu_Cong == 0) {
 470   2              Flag_Mast = 0;  // ´Ó»ú
 471   2          }
 472   1      }
 473          
 474          /************************************
 475           *       ±¸ÓÃ»úÏÔÊ¾°´¼ü´¦Àí£¨****************4.21ºÅÉÏÎç¾õµÃÓĞÎÊÌâ£º±¸ÓÃÏÔÊ¾°´¼üÊÇÆÕÍ¨°´¼ü£¬²»ÊÇ¿ª¹Ø°´¼üĞÎÊ
             -½£©
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 9   

 476           *************************************/
 477          /*void BackUp_Display(void)
 478          {
 479                  bSbNew = PALE;
 480              if(bSbNew != bSbOld)
 481              {
 482                          if(bSbNew == 0)
 483                   {
 484                                  Flag_Commond = ~Flag_Commond;
 485                   }
 486                          bSbOld = bSbNew;
 487              }
 488          }*/
 489          
 490          /***********************************
 491           *         ·äÃùÆ÷°´¼ü´¦Àí
 492           ***********************************/
 493          bit Speak_Alarm()
 494          {
 495   1          bit bspeak;  // ¶¨ÒåÒ»Î»BoolĞÍ±äÁ¿
 496   1          bspeak = 0;
 497   1          bSsNew = Judge_Speak;  // ·äÃùÆ÷¿ª¹Ø°´¼ü(±£´æÎªĞÂ×´Ì¬)
 498   1          if (bSsNew != bSsOld)  // Èô·äÃù¿ª¹Ø×´Ì¬ÓĞ±ä¶¯
 499   1          {
 500   2              if (bSsOld == 0)  // ·äÃùÀÏ×´Ì¬Îª0
 501   2              {
 502   3                  bspeak = 0;  // ·äÃùÆ÷²»¹¤×÷
 503   3              } else {
 504   3                  bspeak = 1;  // ·äÃùÆ÷¹¤×÷
 505   3              }
 506   2              bSsOld = bSsNew;
 507   2          }
 508   1          return bspeak;
 509   1      }
 510          /**********************************
 511           *          °´¼ü¹¦ÄÜ
 512           **********************************/
 513          void key_function()
 514          {
 515   1          if (Flag_KeyInput)  // Ì½Í·°´¼ü°´ÏÂ(°´ÏÂºó½øĞĞÌ½Í·µÄ±ê¶¨¶¯×÷,Í¬Ê±ÏÔÊ¾GM¼ÆÊı¹ÜºÍµçÀëÊÒµÄ¼ÆÊıÖµºÍ¼ÆËã³öÀ
             -´µÄ¼ÁÁ¿Öµ)
 516   1          {
 517   2              Flag_InputChange = 1;  // Ì½Í·ÉèÖÃ±ä¶¯±êÖ¾ÖÃ1,±íÊ¾Ì½Í·±ä¶¯¹ı,ÔÚ¸ÄÍêÌ½Í·½øÈë²âÁ¿ºó,Èô´ËÏîÎªÒ»,Ôò»áÏ
             -È´æ´¢¸Ä¹ıµÄÉèÖÃ
 518   2              Flag_KeyInput = 0;     // °´¼ü±êÖ¾Î»ÇåÁã
 519   2              setinput();
 520   2              EX0 = 1;  // ¿ªÆôÍâ²¿ÖĞ¶Ï0
 521   2          }
 522   1          if (Flag_KeyTime)  // Ê±¼ä°´¼ü°´ÏÂ
 523   1          {
 524   2              Flag_KeyTime = 0;
 525   2              settime();
 526   2              EX0 = 1;
 527   2          }
 528   1          if (Flag_KeyPara)  // ²ÎÊı°´¼ü°´ÏÂ
 529   1          {
 530   2              Flag_ParaChange = 1;  // ²ÎÊıÉèÖÃ±ä¶¯±êÖ¾ÖÃ1,±íÊ¾²ÎÊı±ä¶¯¹ı,ÔÚ¸ÄÍê²ÎÊı½øÈë²âÁ¿ºó,Èô´ËÏîÎªÒ»,Ôò»áÏÈ
             -´æ´¢¸Ä¹ıµÄ²ÎÊı
 531   2              Flag_KeyPara = 0;
 532   2              setparameter();
 533   2              EX0 = 1;
 534   2          }
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 10  

 535   1          if (Flag_KeyRight)  // ÓÒÒÆ°´¼ü°´ÏÂ
 536   1          {
 537   2              Flag_KeyRight = 0;
 538   2              parameterright();
 539   2              EX0 = 1;
 540   2          }
 541   1          if (Flag_KeyLeft) {
 542   2              Flag_KeyLeft = 0;
 543   2              parameterleft();
 544   2              EX0 = 1;
 545   2          }
 546   1          if (Flag_KeyOK)  // ²âÁ¿°´¼ü°´ÏÂ
 547   1          {
 548   2              Flag_KeyOK = 0;
 549   2              measure();
 550   2              EX0 = 0;
 551   2          }
 552   1          if (Flag_KeyReset)  // ÖØÉè°´¼ü°´ÏÂ
 553   1          {
 554   2              Flag_KeyReset = 0;
 555   2              ReSet();
 556   2              EX0 = 1;
 557   2          }
 558   1      }
 559          
 560          /****************************************
 561           *          Ö÷´Ó»ú²¢ĞĞ´«Êä
 562           ****************************************/
 563          void Transfer()
 564          {
 565   1          if (Flag_Mast == 0)  // ´Ó»ú
 566   1          {
 567   2              Flag_Collateral = 1;
 568   2              CmOverTime = 0;
 569   2              send_buf[64] = Incinput;
 570   2              Send_Word(send_buf, NUMSENDBYTES);  // ·¢ËÍÊı¾İ
 571   2          }
 572   1          if (Flag_Mast == 1)  // Ö÷»ú
 573   1          {
 574   2              Collect_Word(receive_buf, 57);
 575   2          }
 576   1      }
 577          /****************************************
 578           *          DCS´®ĞĞ´«Êä
 579           ****************************************/
 580          void Transfer_DCS()
 581          {
 582   1          uchar i, temp;
 583   1          if (measure_flag) {
 584   2              temp = DCS_Send[0];
 585   2              for (i = 1; i < 66; i++) {
 586   3                  temp = temp ^ DCS_Send[i];
 587   3              }
 588   2              DCS_Send[66] = temp;
 589   2              for (i = 0; i < 67; i++) {
 590   3                  T1byte(DCS_Send[i]);
 591   3              }
 592   2          }
 593   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   MAIN                                                              03/21/2024 10:17:25 PAGE 11  

   CODE SIZE        =   1862    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    576       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----       4
   BIT SIZE         =     30       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
