C51 COMPILER V9.60.7.0   COLLATERAL                                                        03/27/2024 14:56:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE COLLATERAL
OBJECT MODULE PLACED IN .\Objects\collateral.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE collateral.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\L
                    -istings\collateral.lst) TABS(2) OBJECT(.\Objects\collateral.obj)

line level    source

   1          /************************************************************
   2          *描述：
   3          *     并行传输设置
   4          *功能：
   5          *     NIM-A和NIM-B之间数据传输，通过主机显示从机的计数结果
   6          
   7          ***********************************************************/
   8          #include "STC15F2K60S2.h"
   9          #include "absacc.h"
  10          #include "config.h"
  11          #include "intrins.h"
  12          
  13          bit FlagCollErr;   // 默认0
  14          bit FlagColling;   // 默认0
  15          uint CntColTimer;  // 默认0
  16          
  17          // #define receiveradd XBYTE[0xd000]               //并行传输接收地址
  18          // #define sendadd     XBYTE[0xd800]               //并行传输发送地址
  19          #define TURE 1
  20          #define FALSE 0
  21          
  22          extern void display_b();
  23          uchar ChkData(uchar *pub);
  24          /***********************************
  25           *        检测主机命令
  26           ***********************************/
  27          uchar CKMasterCmd()
  28          {
  29   1          volatile uchar var;
  30   1          do {
  31   2              if (FlagCollFall)  // 等待超过1S,主从机通信失败
  32   2              {
  33   3                  FlagCollFall = 0;
  34   3                  Flag_Collateral = 0;
  35   3                  CmOverTime = 0;
  36   3                  return FALSE;
  37   3              }
  38   2              var = receiveradd;
  39   2          } while (var != 0x00);  // 等待主机的开始命令0x55
  40   1          if (var == 0x00) {
  41   2              FlagCollFall = 0;
  42   2              Flag_Collateral = 0;
  43   2              CmOverTime = 0;
  44   2              return TURE;
  45   2          } else {
  46   2              FlagCollFall = 0;
  47   2              Flag_Collateral = 0;
  48   2              CmOverTime = 0;
  49   2              return FALSE;
  50   2          }
  51   1      }
  52          /*************************************
  53           *       从机发送数据
  54           *************************************/
C51 COMPILER V9.60.7.0   COLLATERAL                                                        03/27/2024 14:56:10 PAGE 2   

  55          void Send_Word(uchar *pbuf, uint ibyte)
  56          {
  57   1          uint i;
  58   1          bit bAck0;
  59   1      
  60   1          if (CKMasterCmd()) {
  61   2              // Lcd_Clear();
  62   2              // Txtext(100,182,"从机进行发送中...");
  63   2              i = 0;
  64   2              while (i < ibyte) {
  65   3                  do {
  66   4                      if (CKMasterCmd() == FALSE)  // 判断主机命令是否是0x55
  67   4                      {
  68   5                          // Lcd_Clear();
  69   5                          // Txtext(100,182,"主从机无法通信");
  70   5                          return;  // 不是0x55，则跳出函数
  71   5                      }
  72   4                      bAck0 = Ack0;
  73   4                  } while (bAck0 == 0);  // 等待主机接收数据状态刷新
  74   3                  sendadd = pbuf[i];     // 主机接收状态刷新，从机往发送地址里送数
  75   3                  Note1 = 0;             // 数据发送完毕
  76   3                  do {
  77   4                      if (CKMasterCmd() == FALSE)  // 判断主机命令是否是0x55
  78   4                      {
  79   5                          return;  // 不是0x55，则跳出函数
  80   5                      }
  81   4                      bAck0 = Ack0;
  82   4                  } while (bAck0 == 1);  // 等待主机接收完毕数据
  83   3                  Note1 = 1;
  84   3                  i++;
  85   3              }
  86   2          } else {
  87   2              Lcd_Clear();
  88   2              Tnumber(100, 82, receiveradd);
  89   2              Txtext(100, 182, "从机接收握手命令失败");
  90   2          }
  91   1      }
  92          
  93          /*************************************
  94           *       主机采集数据
  95           *************************************/
  96          void Collect_Word(uchar *pub, uint nbyte)  // 主机采集数据
  97          {
  98   1          uint i, t;
  99   1          bit bNote0;
 100   1          float temp, temp1;
 101   1          sendadd = 0x00;  // 给从机发送开始指令
 102   1          // Lcd_Clear();
 103   1          // Txtext(100,182,"主机进行接收中...");
 104   1          Ack1 = 1;
 105   1          i = 0;
 106   1          FlagColling = 0;
 107   1          while (i < nbyte) {
 108   2              CntColTimer = 0;  // 字节之间定时中断次数清零,重新计时
 109   2              do {
 110   3                  if (FlagCollErr == 1)  // 等待超过0.5S
 111   3                  {
 112   4                      FlagCollErr = 0;       // 超时标志清零
 113   4                      FlagColling = 0;       // 字节之间定时清零
 114   4                      CntColTimer = 0;       // 字节之间定时中断次数清零
 115   4                      FlagMasColSlavOK = 0;  // 灯闪烁定时标志清零，灯不需要闪烁
 116   4                      Flag_Warn_Led = 0;     // add 5.24
C51 COMPILER V9.60.7.0   COLLATERAL                                                        03/27/2024 14:56:10 PAGE 3   

 117   4                      return;
 118   4                  }
 119   3                  bNote0 = Note0;
 120   3              } while (bNote0 == 1);  // 等待从机刷新数据
 121   2              pub[i] = receiveradd;   // 从机刷新完数据，主机从接收地址里读入字节
 122   2              Ack1 = 0;               // 主机字节接收完毕
 123   2              i++;
 124   2              do {
 125   3                  if (FlagCollErr == 1)  // 等待超过0.5S
 126   3                  {
 127   4                      FlagCollErr = 0;       // 超时标志清零
 128   4                      FlagColling = 0;       // 字节之间定时清零
 129   4                      CntColTimer = 0;       // 字节之间定时中断次数清零
 130   4                      FlagMasColSlavOK = 0;  // 灯闪烁定时标志清零，灯不需要闪烁
 131   4                      Flag_Warn_Led = 0;     // add 5.24
 132   4                      return;
 133   4                  }
 134   3                  bNote0 = Note0;
 135   3              } while (bNote0 == 0);  // need define
 136   2              Ack1 = 1;
 137   2          }
 138   1          FlagColling = 0;   // 超时标志清零
 139   1          CntColTimer = 0;   // 字节之间定时清零
 140   1          FlagCollErr = 0;   // 字节之间定时中断次数清零
 141   1          if (PCOLSIG == 0)  // 要求显示从的数据按键按下   add4.21
 142   1          {
 143   2              shortdelay(200);
 144   2              display_b();             // 显示从机数据
 145   2              for (t = 0; t < 7; t++)  // 0-6共7个数据
 146   2              {
 147   3                  temp = (float)(receive_buf[8 * t] * 100) + (float)(receive_buf[8 * t + 1] * 10) + (float)(rece
             -ive_buf[8 * t + 2]);
 148   3                  temp += ((float)receive_buf[8 * t + 3] / 10.0) + ((float)receive_buf[8 * t + 4] / 100.0) + ((f
             -loat)receive_buf[8 * t + 5] / 1000.0);
 149   3                  if (receive_buf[8 * t + 6] == 2) {
 150   4                      temp *= 1000;
 151   4                  } else if (receive_buf[8 * t + 6] == 3) {
 152   4                      temp *= 1000000;
 153   4                  }
 154   3                  /*****DCS发送数据准备****/
 155   3                  if (temp < 0)  // 若计算剂量小于零向DCS发送0
 156   3                  {
 157   4                      DCS_Send[t * 4 + 32 + 4] = 0x30;
 158   4                      DCS_Send[t * 4 + 32 + 5] = 0x30;
 159   4                      DCS_Send[t * 4 + 32 + 6] = 0x30;
 160   4                      DCS_Send[t * 4 + 32 + 7] = 0x30;
 161   4                  } else if (temp >= 0) {
 162   4                      if (temp < 1) {
 163   5                          temp1 = (float)temp * 1000;
 164   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 165   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 166   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 167   5                          DCS_Send[t * 4 + 32 + 7] = 0x30;
 168   5                      } else if ((temp >= 1) && (temp < 10)) {
 169   5                          temp1 = (float)temp * 100;
 170   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 171   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 172   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 173   5                          DCS_Send[t * 4 + 32 + 7] = 0x31;
 174   5                      } else if ((temp >= 10) && (temp < 100)) {
 175   5                          temp1 = (float)temp * 10;
 176   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
C51 COMPILER V9.60.7.0   COLLATERAL                                                        03/27/2024 14:56:10 PAGE 4   

 177   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 178   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 179   5                          DCS_Send[t * 4 + 32 + 7] = 0x32;
 180   5                      } else if ((temp >= 100) && (temp < 1000)) {
 181   5                          temp1 = (float)temp;
 182   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 183   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 184   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 185   5                          DCS_Send[t * 4 + 32 + 7] = 0x33;
 186   5                      } else if ((temp >= 1000) && (temp < 10000)) {
 187   5                          temp1 = (float)temp / 10.0;
 188   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 189   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 190   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 191   5                          DCS_Send[t * 4 + 32 + 7] = 0x34;
 192   5                      } else if ((temp >= 10000) && (temp < 100000)) {
 193   5                          temp1 = (float)temp / 100.0;
 194   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 195   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 196   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 197   5                          DCS_Send[t * 4 + 32 + 7] = 0x35;
 198   5                      } else if ((temp >= 100000) && (temp < 1000000)) {
 199   5                          temp1 = (float)temp / 1000.0;
 200   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 201   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 202   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 203   5                          DCS_Send[t * 4 + 32 + 7] = 0x36;
 204   5                      } else if ((temp >= 1000000) && (temp < 10000000)) {
 205   5                          temp1 = (float)temp / 10000.0;
 206   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 207   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 208   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 209   5                          DCS_Send[t * 4 + 32 + 7] = 0x37;
 210   5                      } else if ((temp >= 10000000) && (temp < 100000000)) {
 211   5                          temp1 = (float)temp / 100000.0;
 212   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 213   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 214   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 215   5                          DCS_Send[t * 4 + 32 + 7] = 0x38;
 216   5                      } else if ((temp >= 100000000) && (temp < 1000000000)) {
 217   5                          temp1 = (float)temp / 1000000.0;
 218   5                          DCS_Send[t * 4 + 32 + 4] = (uchar)((int)temp1 / 100) + 0x30;
 219   5                          DCS_Send[t * 4 + 32 + 5] = (uchar)((int)temp1 % 100 / 10) + 0x30;
 220   5                          DCS_Send[t * 4 + 32 + 6] = (uchar)((int)temp1 % 100 % 10) + 0x30;
 221   5                          DCS_Send[t * 4 + 32 + 7] = 0x39;
 222   5                      }
 223   4                  }
 224   3                  if (receive_buf[8 * t + 7]) {
 225   4                      DCS_Send[65] = DCS_Send[65] | Svar1[t];
 226   4                  } else {
 227   4                      DCS_Send[65] = DCS_Send[65] & Svar0[t];
 228   4                  }
 229   3              }
 230   2              FlagMasColSlavOK = 1;  // 指示灯闪烁定时开始标志
 231   2          }
 232   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3632    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =      2      21
C51 COMPILER V9.60.7.0   COLLATERAL                                                        03/27/2024 14:56:10 PAGE 5   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
