C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 8253COUNT
OBJECT MODULE PLACED IN .\Objects\8253count.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 8253count.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\8253count.lst) TABS(2) OBJECT(.\Objects\8253count.obj)

line level    source

   1          /********************************************************************************************
   2          *ÃèÊö£º
   3          *   8253¼ÆÊıÉèÖÃ
   4          *¹¦ÄÜ£º
   5          *   1.´Ó8253ÖĞ¶ÁÈ¡¼ÆÊı£¬Ã¿¸ö8253ÖĞº¬ÓĞ3¸ö¼ÆÊıÆ÷£¬Îå¸ö8253¼Æ15¸öÌ½Í·µÄ¼ÆÊı£¬
   6          *     Ç°Æß¸öÌ½Í·ÊÇË«Ì½Í·£¨µÍ¼ÆÊıÌ½Í·ºÍ¸ß¼ÆÊıÌ½Í·£©£¬µÚ°Ë¸öÌ½Í·ÊÇµ¥Ì½Í·£¨¸ß¼ÆÊıÌ½Í·£©£¬
   7          *     ¸ù¾İ¼ÆÊıÂÊÑ¡ÔñÄÄ¸öÌ½Í·¹¤×÷£»
   8          *   2.T0¶¨Ê±ÖĞ¶Ï
   9          *     T0¹¤×÷ÔÚ16Î»×Ô¶¯ÖØÔØÄ£Ê½£¬ÏòÉÏ¼ÆÊı£¬Ã¿Ñ­»·Ò»´Î£¬×Ü¶¨Ê±5Ms,¼ÆÊı³õÖµDC00£¬¾§Õñ22.1184M£»
  10          *   3.¶¨Ê±µ½£¬¶ÁÈ¡¼ÆÊı£¬¸ù¾İÉè¶¨µÄ²ÎÊı£¬ÏÔÊ¾¸÷Ì½Í·µÄ¼ÆÊıÂÊ£»
  11          *   4.¸ù¾İ¼ÆÊıÂÊµÄ²»Í¬£¬Ñ¡Ôñ²»Í¬µÄµ¥Î»£¨uGy/s,mGy/s,Gy/s£©;
  12          
  13          ***********************************************************************************************/
  14          #include "STC15F2K60S2.h"
  15          #include "absacc.h"
  16          #include "config.h"
  17          #include "intrins.h"
  18          #include "math.h"
  19          #include "stdio.h"
  20          #include "stdlib.h"
  21          
  22          #define C82531C XBYTE[0x8300]   // 8253µÄÃüÁî¶Ë¿Ú£¨µØÖ·£©£¬CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=11£»
  23          #define C825310D XBYTE[0x8000]  // ¼ÆÊıÆ÷0CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=00£»
  24          #define C825311D XBYTE[0x8100]  // ¼ÆÊıÆ÷1CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=01;
  25          #define C825312D XBYTE[0x8200]  // ¼ÆÊıÆ÷2CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=10;
  26          
  27          #define C82532C XBYTE[0x8b00]   // XBYTEµÄ×÷ÓÃÊÇ½«Íâ²¿I/O¶Ë¿ÚÖÃÎªÖĞÀ¨ºÅÄÚ²¿µÄ16Î»¶ş½øÖÆ£¬¼´ÎªÉèÖÃ
  28          #define C825320D XBYTE[0x8800]  // Ê¹ÄÜ¶Ë£¬ XBYTEµÄ×÷ÓÃ»¹ÓĞÉèÖÃÊ¹ÄÜ¶Ëºó£¬×Ô¶¯ÉèÖÃwr,rd.
  29          #define C825321D XBYTE[0x8900]
  30          #define C825322D XBYTE[0x8a00]
  31          
  32          #define C82533C XBYTE[0x9300]
  33          #define C825330D XBYTE[0x9000]
  34          #define C825331D XBYTE[0x9100]
  35          #define C825332D XBYTE[0x9200]
  36          
  37          #define C82534C XBYTE[0x9b00]
  38          #define C825340D XBYTE[0x9800]
  39          #define C825341D XBYTE[0x9900]
  40          #define C825342D XBYTE[0x9a00]
  41          
  42          #define C82535C XBYTE[0xa300]
  43          #define C825350D XBYTE[0xa000]
  44          #define C825351D XBYTE[0xa100]
  45          #define C825352D XBYTE[0xa200]
  46          
  47          uchar buf[32];                 // AB1*´Ó8253ÖĞ¶Áµ½µÄ¼ÆÊıÆ÷Êı¾İ£¬15¸ö¼ÆÊıÆ÷£¬µÍ°ËÎ»¸ß°ËÎ»£¬´Ó3-32£¬1ÎªÌ½Í·¸
             -öÊı£¬2Îª²âÁ¿Ê±¼ä
  48          uchar Channel_Detector[8][2];  // AC1+Í¨µÀÌ½Í·Ñ¡Ôñ±êÖ¾£¬1:µçÀëÊÒ0:¼ÆÊı¹Ü
  49          uchar DataGe[75];              // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ¸öÎ»£¬³õÊ¼Ê±¸öÊ®°ÙÇ§¾ùÎª0
  50          uchar DataTenth[75];           // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÊ®·ÖÎ»
  51          uchar DataCent[75];            // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ°Ù·ÖÎ»
  52          uchar DataThouth[75];          // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÇ§·ÖÎ»
  53          uchar send_buf[65];            // NIM_AÏòNIM_B·¢ËÍÊı¾İµÄÊı×é
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 2   

  54          uchar Incinput;                // Ì½Í·¸öÊı±êÖ¾£¬Ä¬ÈÏÏÔÊ¾Ì½Í·¸öÊıÎª8¸ö
  55          float idata Para[10];          // Éè¶¨ºÃµÄ²ÎÊıÊı×é
  56          float DoseRata[8];             // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
  57          uchar Channel_Display[8];      // ÓÃÓÚÏÔÊ¾µÄÍ¨µÀÁ¿³Ì
  58          float jishuguan_DoseRata;
  59          float dianlishi_DoseRata;
  60          uchar Calculated[8];  // ÊÇ·ñ¼ÆËã¹ı±êÖ¾
  61          uchar Flag_dw;        // µ¥Î»±êÖ¾
  62          uchar Max_Time;       // AA1+ËùÓĞÍ¨µÀ×î³¤µÄ¼ÆÊıÊ±¼ä
  63          uint Tdata;           // Ì½Í·¼ÆÊıÂÊ
  64          double Real_Count[8];
  65          ulong Count[8][3];          // Ò»Ãë¼ÆÊıÀúÊ·
  66          uint idata jishuguan_data;  // ±ê¶¨Ê±µÄ¼ÆÊı¹Ü¼ÆÊıÖµÏàµ±ÓÚTdata
  67          uint idata dianlishi_data;  // ±ê¶¨Ê±µÄµçÀëÊÒ¼ÆÊıÖµÏàµ±ÓÚTdata
  68          uchar idata Var_Signal1;    // Ì½Í·¿ØÖÆĞÅºÅ1£¬½Ó¼ÆÊı¹Ü£¬Ä¬ÈÏff¾ù½Ó¼ÆÊı¹Ü
  69          uchar idata Var_Signal2;    // Ì½Í·¿ØÖÆĞÅºÅ2£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  70          uchar idata Var_Signal3;    // Ì½Í·¿ØÖÆĞÅºÅ3£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  71          uchar idata Var_Led;        // LED±¨¾¯Ö¸Ê¾µÆ,Îª1Ê±Ãğ,³õÖµ0xff,
  72          uchar biaoding_input;
  73          bit Flag_Warn_Count;       // Ä¬ÈÏ0£»
  74          uchar Flag_need_Flash[8];  // LEDÉÁË¸±êÖ¾
  75          uchar State_Flash[8];
  76          uchar count_change_flag[8];  // ¼ÆÊı¸Ä±ä±êÖ¾£¿
  77          double Weights[12] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  78          double Detector_Counts_History[7][12];
  79          extern uchar Average_Times[8];  // AJ1+»¬¶¯Æ½¾ù´ÎÊı
  80          float code a0 = 0.0625;
  81          float code a1 = 0.0625;
  82          float code a2 = 0.125;
  83          float code a3 = 0.25;
  84          float code a4 = 0.5;
  85          uchar code Svar1[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};  // ĞÅºÅÊı×é
  86          uchar code Svar0[8] = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};
  87          extern uchar jishucount;
  88          extern uchar Display_Flag[8];
  89          extern bit Speak_Alarm();
  90          void shortdelay(uint i);
  91          void Alarm();
  92          void Led_Disp(uchar Num, uchar Flag, uchar State);
  93          void Updata_Flash(uchar j);
  94          extern bitSpeak_Alarm();
  95          
  96          #if GM1_DOSE_NEED_WEIGHTED_MOVING_AVERAGE
              
              
              /**
               * @brief  ¸ù¾İ±¾Á¿³Ì²âÁ¿´ÎÊıÉú³É¼ÓÈ¨»¬¶¯Æ½¾ùÈ¨ÖØ£¬¼ÓÈ¨³¤¶È12£¬Ğ¡ÓÚ12µÄ°´±ÈÀı·ÖÅä£»
               * @param  n: number of weights
               * @param  output: output array
               * @author Dan Zhang
               */
              void generate_weights_output(int n, double (*weights_output)[12])
              {
                  double Weights_[12] = {0.3, 0.2, 0.15, 0.11, 0.08, 0.05, 0.035, 0.024, 0.019, 0.0152, 0.0084, 0.0084};
                  double sum = 0.0;
                  int i,j;
              
                  if (n < 12) {
                      for (i = 0; i < n - 1; i++) {
                          (*weights_output)[i] = Weights_[i];
                          sum += Weights_[i];
                      }
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 3   

                      (*weights_output)[n - 1] = 1 - sum;
                  } else if (n == 12) {
                      for (i = 0; i < n; i++) {
                          (*weights_output)[i] = Weights[i];
                      }
                  }
                  for (i = 0; i < n - 1; i++) {
                      for (j = 0; j < n - i - 1; j++) {
                          if ((*weights_output)[j] < (*weights_output)[j + 1]) {
                              double temp = (*weights_output)[j];
                              (*weights_output)[j] = (*weights_output)[j + 1];
                              (*weights_output)[j + 1] = temp;
                          }
                      }
                  }
              }
              #endif
 133          /*************************************
 134           *8253¼ÆÊıÖµ
 135           **************************************/
 136          
 137          void GetAndDisdata()  // ¼ÆÊıÍê³ÉºóµÚÒ»¸öÔËĞĞµÄ³ÌĞò
 138          {
 139   1          uchar j;
 140   1          uchar th = 0;
 141   1          uchar tl = 0;  // bufÊı×é³õÊ¼»¯
 142   1          for (j = 0; j < 10; j++) {
 143   2              Para[j] = 0;
 144   2          }
 145   1          for (j = 0; j < 8; j++) {
 146   2              Calculated[j] = 0;
 147   2          }
 148   1          /*===========Ëø´æ8253µÄ¼ÆÊıÖµ==========*/
 149   1          C82531C = 0x84;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 150   1          tl = C825312D;   // read825316bitsdata(firstLthenH)
 151   1          buf[2] = 0xff - tl;
 152   1          th = C825312D;
 153   1          buf[3] = 0xff - th;
 154   1      
 155   1          C82531C = 0x44;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 156   1          tl = C825311D;   // read825316bitsdata(firstLthenH)
 157   1          buf[4] = 0xff - tl;
 158   1          th = C825311D;
 159   1          buf[5] = 0xff - th;
 160   1      
 161   1          C82531C = 0x04;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 162   1          tl = C825310D;   // read825316bitsdata(firstLthenH)
 163   1          buf[6] = 0xff - tl;
 164   1          th = C825310D;
 165   1          buf[7] = 0xff - th;
 166   1      
 167   1          C82532C = 0x84;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 168   1          tl = C825322D;   // read825316bitsdata(firstLthenH)
 169   1          buf[8] = 0xff - tl;
 170   1          th = C825322D;
 171   1          buf[9] = 0xff - th;
 172   1      
 173   1          C82532C = 0x44;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 174   1          tl = C825321D;   // read825316bitsdata(firstLthenH)
 175   1          buf[10] = 0xff - tl;
 176   1          th = C825321D;
 177   1          buf[11] = 0xff - th;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 4   

 178   1      
 179   1          C82532C = 0x04;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 180   1          tl = C825320D;   // read825316bitsdata(firstLthenH)
 181   1          buf[12] = 0xff - tl;
 182   1          th = C825320D;
 183   1          buf[13] = 0xff - th;
 184   1      
 185   1          C82533C = 0x84;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 186   1          tl = C825332D;   // read825316bitsdata(firstLthenH)
 187   1          buf[14] = 0xff - tl;
 188   1          th = C825332D;
 189   1          buf[15] = 0xff - th;
 190   1      
 191   1          C82533C = 0x44;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 192   1          tl = C825331D;   // read825316bitsdata(firstLthenH)
 193   1          buf[16] = 0xff - tl;
 194   1          th = C825331D;
 195   1          buf[17] = 0xff - th;
 196   1      
 197   1          C82533C = 0x04;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 198   1          tl = C825330D;   // read825316bitsdata(firstLthenH)
 199   1          buf[18] = 0xff - tl;
 200   1          th = C825330D;
 201   1          buf[19] = 0xff - th;
 202   1      
 203   1          C82534C = 0x84;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 204   1          tl = C825342D;   // read825316bitsdata(firstLthenH)
 205   1          buf[20] = 0xff - tl;
 206   1          th = C825342D;
 207   1          buf[21] = 0xff - th;
 208   1      
 209   1          C82534C = 0x44;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 210   1          tl = C825341D;   // read825316bitsdata(firstLthenH)
 211   1          buf[22] = 0xff - tl;
 212   1          th = C825341D;
 213   1          buf[23] = 0xff - th;
 214   1      
 215   1          C82534C = 0x04;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 216   1          tl = C825340D;   // read825316bitsdata(firstLthenH)
 217   1          buf[24] = 0xff - tl;
 218   1          th = C825340D;
 219   1          buf[25] = 0xff - th;
 220   1      
 221   1          C82535C = 0x84;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 222   1          tl = C825352D;   // read825316bitsdata(firstLthenH)
 223   1          buf[26] = 0xff - tl;
 224   1          th = C825352D;
 225   1          buf[27] = 0xff - th;
 226   1      
 227   1          C82535C = 0x44;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 228   1          tl = C825351D;   // read825316bitsdata(firstLthenH)
 229   1          buf[28] = 0xff - tl;
 230   1          th = C825351D;
 231   1          buf[29] = 0xff - th;
 232   1      
 233   1          C82535C = 0x04;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 234   1          tl = C825350D;   // read825316bitsdata(firstLthenH)
 235   1          buf[30] = 0xff - tl;
 236   1          th = C825350D;
 237   1          buf[31] = 0xff - th;
 238   1      
 239   1          buf[0] = Incinput;  // Ì½Í·¸öÊı
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 5   

 240   1          buf[1] = Max_Time;  // ²âÁ¿Ê±¼ä£¨Ë¢ĞÂÊ±¼ä±êÖ¾£©
 241   1      }
 242          /*******************************************
 243           *8253¼ÆÊıÆ÷³õÊ¼»¯
 244           ********************************************/
 245          void Init_8253()
 246          {
 247   1          uchar i;  // AB1+
 248   1          //=======×°Èë³õÖµÔÙ¿ªÊ¼¼ÆÊı=======//
 249   1          C82531C = 0xb4;   // 10110100
 250   1          C825312D = 0xff;  // 10£ºÍ¨µÀ2,11£ºÏÈµÍ×Ö½Úºó¸ß×Ö½Ú£¬010£º°´·½Ê½2¹¤×÷£¬0£º¶ş½øÖÆ¼ÆÊı¡£Ğ´³õÖµ0xffºó¿ªÊ¼
             -¼ÆÊı
 251   1          C825312D = 0xff;
 252   1      
 253   1          C82531C = 0x74;   // 01110100
 254   1          C825311D = 0xff;  // Í¬ÉÏ
 255   1          C825311D = 0xff;
 256   1      
 257   1          C82531C = 0x34;   // 00110100
 258   1          C825310D = 0xff;  // Ğ´³õÖµÏÈµÍ×Ö½Úºó¸ß×Ö½Ú82531Ğ´³õÖµºó¾Í¿ªÊ¼¼ÆÊı
 259   1          C825310D = 0xff;  // ¶şÈıĞĞÓÃÀ´×°Èë³õÖµ
 260   1      
 261   1          C82532C = 0xb4;  // 10110100
 262   1          C825322D = 0xff;
 263   1          C825322D = 0xff;
 264   1      
 265   1          C82532C = 0x74;  // 01110100
 266   1          C825321D = 0xff;
 267   1          C825321D = 0xff;
 268   1      
 269   1          C82532C = 0x34;  // 00110100
 270   1          C825320D = 0xff;
 271   1          C825320D = 0xff;
 272   1      
 273   1          C82533C = 0xb4;  // 10110100
 274   1          C825332D = 0xff;
 275   1          C825332D = 0xff;
 276   1      
 277   1          C82533C = 0x74;  // 01110100
 278   1          C825331D = 0xff;
 279   1          C825331D = 0xff;
 280   1      
 281   1          C82533C = 0x34;  // 00110100
 282   1          C825330D = 0xff;
 283   1          C825330D = 0xff;
 284   1      
 285   1          C82534C = 0xb4;  // 10110100
 286   1          C825342D = 0xff;
 287   1          C825342D = 0xff;
 288   1      
 289   1          C82534C = 0x74;  // 01110100
 290   1          C825341D = 0xff;
 291   1          C825341D = 0xff;
 292   1      
 293   1          C82534C = 0x34;  // 00110100
 294   1          C825340D = 0xff;
 295   1          C825340D = 0xff;
 296   1      
 297   1          C82535C = 0xb4;  // 10110100
 298   1          C825352D = 0xff;
 299   1          C825352D = 0xff;
 300   1      
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 6   

 301   1          C82535C = 0x74;  // 01110100
 302   1          C825351D = 0xff;
 303   1          C825351D = 0xff;
 304   1      
 305   1          C82535C = 0x34;  // 00110100
 306   1          C825350D = 0xff;
 307   1          C825350D = 0xff;
 308   1          for (i = 0; i < 67; i++) {
 309   2              DCS_Send[i] = 0;
 310   2          }
 311   1          for (i = 0; i <= 7; i++) {
 312   2              DoseRata[i] = 0;  // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
 313   2          }
 314   1          Var_Led = 0xff;  // ledÖ¸Ê¾
 315   1          Led573 = Var_Led;
 316   1          EX0 = 0;                // ¹ØÍâ²¿ÖĞ¶Ï0
 317   1          /*¶¨Ê±¼ÆÊıÆ÷µÄ³õÊ¼»¯*/  // AJ1-,ÒÆ¶¯ÖÁ¶¨Ê±ÖĞ¶ÏÀï¿ªGate,8253¿ªÆô¼ÆÊı
 318   1          Flag8253Cnting = 1;
 319   1          NumT0 = 0;
 320   1      }
 321          /************************************
 322           *ÏÔÊ¾¼ÆÊı
 323           ************************************/
 324          void ShowData()
 325          {
 326   1          uchar i, m, j, k, l;  // AE1-:Var1ÓÃÀ´ÅĞ¶ÏÊ¹ÓÃµÄÌ½²âÆ÷µÄ¾Ö²¿±äÁ¿£¬Ïàµ±ÓÚChannel_Detector,²»ÔÙĞèÒª
 327   1          ulong count_temp, jishuguan_count_temp, dianlishi_count_temp;
 328   1          float idata temp, jtemp, yudecide, jishuguan_rata, jishuguan_jtemp, dianlishi_jtemp;
 329   1          double yu, yudata, mtemp;
 330   1          uchar Tbcd[12];  // ²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 331   1          Lcd_Clear();
 332   1          /**³ÌĞòËµÃ÷:
 333   1          **1,Îª±£Ö¤¼´Ê¹¶à¸öÍ¨µÀ²»ÔÚÍ¬Ò»Á¿³Ì£¬¸ßÁ¿³ÌµÄÍ¨µÀÒ²ÄÜÓĞÆäÏìÓ¦¸ü¿ìµÄ¸üĞÂËÙ¶È£¬³ÌĞòÒ»Ãë¼ÆÊıÒ»´Î£¬10Ãë¼ÆÊı
             -ÎªÊ®´ÎÒ»Ãë¼ÆÊıµÄÏà¼Ó
 334   1          **  £¬¼ÁÁ¿ÂÊÏÔÊ¾Ò»ÃëË¢ĞÂÒ»´Î¡£
 335   1          **2,³ÌĞòÖĞ¼ÆÊıÂÊ¼ÆËã¡¢Á¿³Ì»»µ²¡¢¼ÁÁ¿¼ÆËãÏÔÊ¾¸÷²¿·Ö·Ö¿ªÖ´ĞĞ
 336   1          */
 337   1          for (i = 0; i <= 7; i++)  // 8¸öÌ½Í·Öğ¸ö¼ì²â
 338   1          {
 339   2              /**
 340   2               * 1.±éÀúÃ¿Ò»¸öÌ½Í·£¨0~7£©£»
 341   2               * 2.ÏÈ´Óbuf£¨´Ó8253¼ÆÊıÆ÷ÖĞÈ¡»ØµÄ¼ÆÊı£©ÖĞ¼ÆËã¼ÆÊı£¬¸ß8Î»*256+µÍ8Î»£¬¼ÇÂ¼Àú´Î¼ÆÊıÖµ£¬Ã¿3Ãë¼ÆÊıÒ»´Î
             -·ÀÖ¹Òç³ö£»
 342   2               * 3.¸ù¾İÃ¿´ÎµÄ¼ÆÊı£¨3S¼ÆÊıÊ±³¤£©ÒÔ¼°µ±Ç°Á¿³ÌºÍÔ¤ÏÈÈ·¶¨µÄ»»µ²ÆµÂÊ£¬ÅĞ¶Ï»»µ²ºÍÖ´ĞĞ²¢¼ÇÂ¼Àú´ÎÁ¿³ÌµµÎ
             -»ĞÅÏ¢£»
 343   2               * 4.ĞèÒª¸ù¾İÀúÊ·µÄµµÎ»ĞÅÏ¢½øĞĞÅĞ¶Ï£¬»»µ²ºóµÄ²Ù×÷Óë²»»»µ²µÄ²Ù×÷²»Í¬£¬¹Ê·Ö¿ªÖ´ĞĞ£»
 344   2               * 5.
 345   2               **/
 346   2              if (Channel_Detector[i][0] == Channel_Detector[i][1])  // µ±Ç°Ò»´ÎÁ¿³ÌºÍ´Ë´ÎÁ¿³ÌÒ»ÑùÊ±
 347   2              {
 348   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊı3Ãë£¬Ö±½ÓÓÃÀ´¼
             -ÆËã
 349   3                  {
 350   4                      Real_Count[i] = 0;          // ´ËÁ¿³ÌÃ¿´Î¶¼ÒªÇåÁã
 351   4                      Count[i][0] = Count[i][1];  // ÀúÊ·¼ÆÊı¸üĞÂ
 352   4                      Count[i][1] = Count[i][2];
 353   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 354   4                      {
 355   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];  // ¼ÓÒ»ÊÇÒòÎªÔÚ¼ÆÊıÖÜÆÚÄÚ»áÓÉÓ²¼
             -ş¸øÒ»¸öÂö³å
 356   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 357   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 7   

 358   4                      {
 359   5                          Count[i][2] = buf[31] * 256 + buf[30];
 360   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 361   5                      }
 362   4                      Calculated[i] = 1;                                                                        
             -  // ¼ÆËã¹ı±êÖ¾
 363   4                      if ((Count[i][1] < (37 * Refresh_Time)) && (Count[i][2] < (37 * Refresh_Time)) && (i < 7))
             -  // Á¿³ÌÇĞ»»Ç°7¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 364   4                      {
 365   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 366   5                          Channel_Detector[i][1] = 3;
 367   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 368   5                      }
 369   4                      if ((Count[i][1] < (28 * Refresh_Time)) && (Count[i][2] < (28 * Refresh_Time)) && (i == 7)
             -)  // Á¿³ÌÇĞ»»µÚ°Ë¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 370   4                      {
 371   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 372   5                          Channel_Detector[i][1] = 3;
 373   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 374   5                      }
 375   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 376   4                      Channel_Display[i] = 4;
 377   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 378   4                  }
 379   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 380   3                  {
 381   4                      Count[i][0] = Count[i][1];
 382   4                      Count[i][1] = Count[i][2];
 383   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 384   4                      {
 385   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 386   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 387   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 388   4                      {
 389   5                          Count[i][2] = buf[31] * 256 + buf[30];
 390   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 391   5                      }
 392   4                      Calculated[i] = 1;                                                                        
             -      // ¼ÆËã¹ı±êÖ¾
 393   4                      if ((Count[i][1] > (5719 * Refresh_Time)) && (Count[i][2] > (5719 * Refresh_Time)) && (i <
             - 7))  // Á¿³ÌÇĞ»»
 394   4                      {
 395   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 396   5                          Channel_Detector[i][1] = 4;
 397   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 398   5                      }
 399   4                      if ((Count[i][1] > (7447 * Refresh_Time)) && (Count[i][2] > (7447 * Refresh_Time)) && (i =
             -= 7))  // Á¿³ÌÇĞ»»
 400   4                      {
 401   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 402   5                          Channel_Detector[i][1] = 4;
 403   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 404   5                      }
 405   4                      if (((Count[i][1] < (35 * Refresh_Time)) && (Count[i][2] < (35 * Refresh_Time))) && (i != 
             -7))  // µÚÆß¸öÌ½Í·Ö»ÓĞÁ½¸öÁ¿³Ì
 406   4                      {
 407   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 408   5                          Channel_Detector[i][1] = 2;
 409   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 410   5                      }
 411   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 412   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 8   

 413   4                      Channel_Display[i] = 3;
 414   4                      Real_Count[i] = 0;
 415   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5719) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 416   4                          (i < 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 417   4                      {
 418   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 419   5                          Channel_Detector[i][1] = 4;
 420   5                          Display_Flag[i] = 0;
 421   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 422   5                      }
 423   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 7447) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 424   4                          (i == 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 425   4                      {
 426   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 427   5                          Channel_Detector[i][1] = 4;
 428   5                          Display_Flag[i] = 0;
 429   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 430   5                      }
 431   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 35) && (Channel_Detector[i][0
             -] == Channel_Detector[i][1]) && (i != 7)) {
 432   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 433   5                          Channel_Detector[i][1] = 2;
 434   5                          Display_Flag[i] = 0;
 435   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 436   5                      }
 437   4                  }
 438   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 439   3                  {
 440   4                      Count[i][0] = Count[i][1];
 441   4                      Count[i][1] = Count[i][2];
 442   4                      Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 443   4                      Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 444   4                      Calculated[i] = 1;                                                                   // ¼Æ
             -Ëã¹ı±êÖ¾
 445   4                      if ((Count[i][1] > (5411 * Refresh_Time)) && (Count[i][2] > (5411 * Refresh_Time)))  // Á¿
             -³ÌÇĞ»»
 446   4                      {
 447   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 448   5                          Channel_Detector[i][1] = 3;
 449   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 450   5                      }
 451   4                      if ((Count[i][1] < (158 * Refresh_Time)) && (Count[i][2] < (158 * Refresh_Time))) {
 452   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 453   5                          Channel_Detector[i][1] = 1;
 454   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 455   5                      }
 456   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 457   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
 458   4                      Channel_Display[i] = 2;
 459   4                      Real_Count[i] = 0;
 460   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5411) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]))  // Á¿³ÌÇĞ»»
 461   4                      {
 462   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 463   5                          Channel_Detector[i][1] = 3;
 464   5                          Display_Flag[i] = 0;
 465   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 466   5                      }
 467   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 158) && (Channel_Detector[i][
             -0] == Channel_Detector[i][1])) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 9   

 468   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 469   5                          Channel_Detector[i][1] = 1;
 470   5                          Display_Flag[i] = 0;
 471   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 472   5                      }
 473   4                  }
 474   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 475   3                  {
 476   4                      Count[i][0] = Count[i][1];
 477   4                      Count[i][1] = Count[i][2];
 478   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 479   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 480   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
 481   4                      if ((Count[i][0] > (6019 * Refresh_Time)) && (Count[i][1] > (6019 * Refresh_Time)) && (Cou
             -nt[i][2] > (6019 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 482   4                      {
 483   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 484   5                          Channel_Detector[i][1] = 2;
 485   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 486   5                      }
 487   4                      if ((Count[i][0] < (2 * Refresh_Time)) && (Count[i][1] < (2 * Refresh_Time)) && (Count[i][
             -2] < (2 * Refresh_Time))) {
 488   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 489   5                          Channel_Detector[i][1] = 0;
 490   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 491   5                      }
 492   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 493   4      #if GM2_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
 494   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 495   4                      Average_Times[i] += 1;
 496   4                      if (Average_Times[i] < 5) {
 497   5                          switch (Average_Times[i]) {
 498   6                          case 1:
 499   6                              Real_Count_Display[i] = Average_Counts[i][0];
 500   6                              break;
 501   6                          case 2:
 502   6                              Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
 503   6                              break;
 504   6                          case 3:
 505   6                              Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
 506   6                              break;
 507   6                          case 4:
 508   6                              Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
 509   6                              break;
 510   6                          }
 511   5                      }
 512   4                      if (Average_Times[i] == 5) {
 513   5                          Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
 514   5                                                  Average_Counts[i][4] * a4;
 515   5                          for (j = 0; j < 4; j++) {
 516   6                              Average_Counts[i][j] = Average_Counts[i][j + 1];
 517   6                          }
 518   5                          Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
 519   5                      }
 520   4      #else
                              Real_Count_Display[i] = Real_Count[i];
              #endif
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 10  

 523   4                      Display_Flag[i] = 1;
 524   4                      Channel_Display[i] = 1;
 525   4                      // if(Count_Times[i]==2)
 526   4                      //{
 527   4                      // Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 528   4                      // Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 529   4                      // Count_Times[i]=0;
 530   4                      // Real_Count[i]=0;
 531   4                      //}
 532   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 533   4                      //{
 534   4                      // for(j=0;j<Average_Times[i];j++)
 535   4                      //{
 536   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 537   4                      //}
 538   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
 539   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 540   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 541   4                      // Channel_Display[i]=0;
 542   4                      // if(Average_Times[i]==5)
 543   4                      //{
 544   4                      // for(j=0;j<(Average_Times[i]-1);j++)
 545   4                      //{
 546   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 547   4                      //}
 548   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 549   4                      //}
 550   4                      //}
 551   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>6019)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 552   4                      //{
 553   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 554   4                      // Channel_Detector[i][1]=2;
 555   4                      // Display_Flag[i]=0;
 556   4                      // Var_Signal1=Var_Signal1&Svar0[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬µÍµçÆ½
 557   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 558   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 559   4                      // }
 560   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)<1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))
 561   4                      //{
 562   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 563   4                      // Channel_Detector[i][1]=0;
 564   4                      // Display_Flag[i]=0;
 565   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 566   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 567   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 568   4                      // }
 569   4                  }
 570   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬2´Î¶¨Ê±¼ÆÊı3ÃëÏà¼Ó£¬5´
             -ÎÆ½»¬Æ½¾ù
 571   3                  {
 572   4                      Count[i][0] = Count[i][1];
 573   4                      Count[i][1] = Count[i][2];
 574   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 575   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 11  

 576   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
 577   4                      if ((Count[i][0] > (3 * Refresh_Time)) && (Count[i][1] > (3 * Refresh_Time)) && (Count[i][
             -2] > (3 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 578   4                      {
 579   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 580   5                          Channel_Detector[i][1] = 1;
 581   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 582   5                      }
 583   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 584   4      #if GM1_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
 585   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 586   4                      Average_Times[i] += 1;
 587   4                      if (Average_Times[i] < 5) {
 588   5                          switch (Average_Times[i]) {
 589   6                          case 1:
 590   6                              Real_Count_Display[i] = Average_Counts[i][0];
 591   6                              break;
 592   6                          case 2:
 593   6                              Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
 594   6                              break;
 595   6                          case 3:
 596   6                              Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
 597   6                              break;
 598   6                          case 4:
 599   6                              Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
 600   6                              break;
 601   6                          }
 602   5                      } else if (Average_Times[i] == 5) {
 603   5                          Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
 604   5                                                  Average_Counts[i][4] * a4;
 605   5                          for (j = 0; j < 4; j++) {
 606   6                              Average_Counts[i][j] = Average_Counts[i][j + 1];
 607   6                          }
 608   5                          Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
 609   5                      }
 610   4      #else
                              Real_Count_Display[i] = Real_Count[i];
              #endif
 613   4                      Display_Flag[i] = 1;
 614   4                      Channel_Display[i] = 0;
 615   4                      // if(Count_Times[i]==2)
 616   4                      //{
 617   4                      //  Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 618   4                      //  Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 619   4                      //  Count_Times[i]=0;
 620   4                      //  Real_Count[i]=0;
 621   4                      // }
 622   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 623   4                      //{
 624   4                      // for(j=0;j<Average_Times[i];j++)
 625   4                      //{
 626   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 627   4                      //}
 628   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
 629   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 630   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 631   4                      // Channel_Display[i]=0;
 632   4                      // if(Average_Times[i]==5)
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 12  

 633   4                      //{
 634   4                      // for(j=0;j<(Average_Times[i]-1);j++)
 635   4                      //{
 636   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 637   4                      //}
 638   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 639   4                      //}
 640   4                      //}
 641   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 642   4                      //{
 643   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 644   4                      // Channel_Detector[i][1]=1;
 645   4                      // Display_Flag[i]=0;
 646   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 647   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 648   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 649   4                      // }
 650   4                  }
 651   3              } else if (Channel_Detector[i][0] != Channel_Detector[i][1])  // µ±Ç°ºóÁ½´Î¼ÆÊıµÄÁ¿³Ì²»Ò»Ñù
 652   2              {
 653   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊıÒ»Ãë£¬Ö±½ÓÓÃÀ´
             -¼ÆËã
 654   3                  {
 655   4                      for (k = 0; k <= 2; k++)  // ³õÊ¼»¯µ¥´ÎÌøµµÅĞ¶Ï±äÁ¿£¬·ÀÖ¹ÒâÍâ½µµµ¡¾2024¡¿ºÃÏñÃ»Ê²Ã´±ØÒª£¬´
             -ıÈ·¶¨
 656   4                      {
 657   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 658   5                      }
 659   4                      Real_Count[i] = 0;  // Ìø×ªµ½´ËÁ¿³ÌĞèÒªÇåÁã
 660   4                      if (i < 7)          // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 661   4                      {
 662   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 663   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 664   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 665   4                      {
 666   5                          Count[i][2] = buf[31] * 256 + buf[30];
 667   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 668   5                      }
 669   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 670   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 671   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 672   4                      Channel_Display[i] = 4;
 673   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 674   4                  }
 675   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 676   3                  {
 677   4                      for (k = 0; k <= 2; k++) {
 678   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 679   5                      }
 680   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 681   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 682   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 683   4                      {
 684   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 685   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 686   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 687   4                      {
 688   5                          Count[i][2] = buf[31] * 256 + buf[30];
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 13  

 689   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 690   5                      }
 691   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 692   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 693   4                      Channel_Display[i] = 3;
 694   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 695   4                  }
 696   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 697   3                  {
 698   4                      for (k = 0; k <= 2; k++) {
 699   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 700   5                      }
 701   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 702   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 703   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 704   4                      {
 705   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 706   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 707   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 708   4                      {
 709   5                          Count[i][2] = buf[31] * 256 + buf[30];
 710   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 711   5                          Channel_Detector[i][1] = 3;
 712   5                          Channel_Detector[i][0] = 3;
 713   5                      }
 714   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 715   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 716   4                      Channel_Display[i] = 2;
 717   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 718   4                  }
 719   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 720   3                  {
 721   4                      for (k = 0; k <= 2; k++) {
 722   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 723   5                      }
 724   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 725   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 726   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 727   4                      for (j = 0; j < 10; j++) {
 728   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 729   5                      }
 730   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 731   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 732   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 733   4      #if GM2_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
 734   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 735   4                      Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
 736   4                      Average_Times[i] += 1;
 737   4      #else
                              Real_Count_Display[i] = Real_Count[i];
              #endif
 740   4                      Display_Flag[i] = 1;
 741   4                      Channel_Display[i] = 1;
 742   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 743   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 744   4                  }
 745   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 746   3                  {
 747   4                      for (k = 0; k <= 2; k++) {
 748   5                          Count[i][k] = 1 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 14  

 749   5                      }
 750   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 751   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 752   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 753   4                      for (j = 0; j < 10; j++) {
 754   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 755   5                      }
 756   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 757   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 758   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 759   4      #if GM1_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
 760   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 761   4                      Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
 762   4                      Average_Times[i] += 1;
 763   4      #else
                              Real_Count_Display[i] = Real_Count[i];
              #endif
 766   4                      Display_Flag[i] = 1;
 767   4                      Channel_Display[i] = 0;
 768   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 769   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 770   4                  }
 771   3              }
 772   2          }
 773   1          /*½«¸ù¾İ¼ÁÁ¿ÂÊÖµÖØĞÂÉèÖÃµÄÌ½Í·ĞÅºÅ¸Ä±ä±êÖ¾Ö´ĞĞ*/
 774   1          Signal1 = Var_Signal1;  // Ì½Í·ĞÅºÅ×ª±ä
 775   1          Signal2 = Var_Signal3;  // 2016-8-26µ÷»»Var_Signal2,Var_Signal3£¬ÒòÎªÁ½ÕßÔÚÓ²¼şÉÏ±»Åª»ìÁË
 776   1          Signal3 = Var_Signal2;
 777   1          /*AC1+ÔÚÕâÀïbuf(Ê®ÁùÎ»¸ßµÍ¼ÆÊıÊı¾İ)Òª×ª»»³Éuint ÀàĞÍµÄTdataÊı¾İ,²¢ÇÒÌ½Í·ÊıÄ¿ÒªÇå³ş
 778   1          ¼ÓÈëÑ¡Ì½Í·±êÖ¾*/
 779   1          if (measure_flag)  //(1)measure_flagÔÚInit_RAMÖĞ³õÊ¼»¯±äÎª1
 780   1          {
 781   2              for (j = 0; j < 8; j++)  //(2)´æ¼ÆÊıÇøÎªbuf[3]-buf[32];Ì½Í·¸öÊı±êÖ¾
 782   2              {
 783   3      #if COUNT_FOR_DISPLAY
 784   3                  Tdata = (uint)(Count[j][2] / 3);  // Ì½Í·¼ÆÊıÂÊuint ,×ÏÉ«ÎªÈ«¾Ö±äÁ¿£¬À¶É«Îª¾Ö²¿±äÁ¿
 785   3      #else
                          Tdata = (uint)Count[j][2];
              #endif
 788   3                  jtemp = 0;    // float
 789   3                  yudata = 0;   // double
 790   3                  mtemp = 0;    // double
 791   3                  yu = 0;       // double
 792   3                  Tbcd[5] = 0;  // uchar Êı×é¹²12Î»£¬²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 793   3                  Tbcd[4] = 0;
 794   3                  Tbcd[3] = 0;
 795   3                  Tbcd[2] = 0;
 796   3                  Tbcd[1] = 0;
 797   3                  Tbcd[0] = 0;
 798   3                  m = j * 10;  // ±£Áô
 799   3                  /*********ÅĞ¶Ï¼ÆÊıÂÊ***********/
 800   3                  /*********Ç°Æß¸öÌ½Í·Ì½²âÆ÷ÉèÖÃ£¬È¡µÃ8253¼ÆÊıÖµ¼ÇÂ¼ÔÚTdata*/
 801   3                  /**¡¾2024¡¿¸ù¾İÍ¨µÀĞòºÅ¼ÆËã±ê¶¨²ÎÊı£¬ÓÃÓÚCPMºÍ¼ÁÁ¿ÂÊµÄ×ª»»**/
 802   3                  if (j < 7)  //(3)Ç°Æß¸öÌ½Í·¼ÈÓĞµçÀëÊÒÒ²ÓĞ¼ÆÊıÆ÷£¬µÚ°Ë¸öÖ»ÓĞµçÀëÊÒ¹Ê·Ö¿ª´¦Àí
 803   3                  {
 804   4                      Display_Flag[j] = 0;
 805   4                      if (Channel_Display[j] == 0) {
 806   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 807   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 1000000.0;
 808   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 15  

 809   5                      } else if (Channel_Display[j] == 1) {
 810   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 811   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) / 1000000.0;
 812   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 813   5                      } else if (Channel_Display[j] == 2) {
 814   5                          Para[4] = (float)(DataThouth[m + 5] * 1000 + DataCent[m + 5] * 100 + DataTenth[m + 5] 
             -* 10 + DataGe[m + 5]);  // µ÷½Ú²ÎÊı
 815   5                          Para[5] = (float)(DataThouth[m + 6] * 1000 + DataCent[m + 6] * 100 + DataTenth[m + 6] 
             -* 10 + DataGe[m + 6]) / 1000.0;
 816   5                          DoseRata[j] = (float)(Para[5] * ((float)Real_Count_Display[j] - Para[4]));
 817   5                      } else if (Channel_Display[j] == 3) {
 818   5                          Para[6] = (float)(DataThouth[m + 7] * 1000 + DataCent[m + 7] * 100 + DataTenth[m + 7] 
             -* 10 + DataGe[m + 7]);  // µ÷½Ú²ÎÊı
 819   5                          Para[7] = (float)(DataThouth[m + 8] * 1000 + DataCent[m + 8] * 100 + DataTenth[m + 8] 
             -* 10 + DataGe[m + 8]) / 10.0;
 820   5                          DoseRata[j] = (float)(Para[7] * ((float)Real_Count_Display[j] - Para[6]));
 821   5                      } else if (Channel_Display[j] == 4) {
 822   5                          Para[8] = (float)(DataThouth[m + 9] * 1000 + DataCent[m + 9] * 100 + DataTenth[m + 9] 
             -* 10 + DataGe[m + 9]);  // µ÷½Ú²ÎÊı
 823   5                          Para[9] = (float)((DataThouth[m + 10] * 1000 + DataCent[m + 10] * 100 + DataTenth[m + 
             -10] * 10 + DataGe[m + 10]) * 10.0);
 824   5                          DoseRata[j] = (float)(Para[9] * ((float)Real_Count_Display[j] - Para[8]));
 825   5                      }
 826   4                  } else if (j == 7) {
 827   4                      Display_Flag[j] = 0;
 828   4                      if (Channel_Display[j] == 3) {
 829   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 830   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 10.0;
 831   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
 832   5                      } else if (Channel_Display[j] == 4) {
 833   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 834   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) * 10.0;
 835   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 836   5                      }
 837   4                  }
 838   3      #if GM1_DOSE_NEED_WEIGHTED_MOVING_AVERAGE
                          if (Channel_Display[j] == 0) {  // Èç¹ûÊÇGM1Á¿³Ì£¬½øĞĞ»¬¶¯Æ½¾ù,µÚ8¸öÍ¨µÀÃ»ÓĞGM1Á¿³ÌËùÒÔ½ø²»À´
                              if (Average_Times[j] == 0) {
                                  Detector_Counts_History[j][0] = DoseRata[j];
                              } else if (Average_Times[j] != 0) {
                                  for (l = Average_Times[j]; l > 0; l--) {
                                      Detector_Counts_History[j][l] = Detector_Counts_History[j][l - 1];
                                  }
                                  Detector_Counts_History[j][0] = DoseRata[j];
                                  generate_weights_output(Average_Times[j] + 1, &Weights);
                                  for (l = 0; l < Average_Times[j] + 1; l++) {
                                      DoseRata[j] += (float)(Detector_Counts_History[j][l] * Weights[l]);
                                  }
                              }
                              Average_Times[j] += 1;
                              if (Average_Times[j] == 12) {
                                  Average_Times[j] = 11;
                              }
                          } else if (Channel_Display[j] != 0) {  // Èç¹û²»ÊÇGM1Á¿³Ì£¬Çå¿ÕËùÓĞ»¬¶¯Æ½¾ùÏà¹ØÊı¾İ
                              Average_Times[j] = 0;
                              for (l = 0; l < 12; l++) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 16  

                                  Detector_Counts_History[j][l] = 0.0;
                                  Weights[l] = 0.0;
                              }
                          }
              #endif
 864   3                  /**********µ¥Î»»»ËãºóÎªjtemp************/
 865   3                  if (DoseRata[j] < 0)  // ĞŞ¸Ä2012.6.15Í¨¹ı¾ùÖµ¼ÆËã
 866   3                  {
 867   4                      jtemp = 0.0;
 868   4                      Flag_dw = 1;
 869   4                  } else if (DoseRata[j] >= 0)  // µ¥Î»ÎªuGy/h
 870   3                  {
 871   4                      if (DoseRata[j] < 1000)  // Mean_Value<1000±íÊ¾µ¥Î»ÎªuGy/h
 872   4                      {
 873   5                          jtemp = (float)DoseRata[j];
 874   5                          Flag_dw = 1;
 875   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 1000000))  // 1000<Mean_Value<1000000±í
             -Ê¾mGy/h
 876   4                      {
 877   5                          jtemp = (float)(DoseRata[j] / 1000);
 878   5                          Flag_dw = 2;
 879   5                      } else if (DoseRata[j] >= 1000000)  // Mean_Value>=1000000±íÊ¾Gy/h
 880   4                      {
 881   5                          jtemp = (float)(DoseRata[j] / 1000000);
 882   5                          Flag_dw = 3;
 883   5                      }
 884   4                  }
 885   3                  /*****DCS·¢ËÍÊı¾İ×¼±¸****/
 886   3                  if (DoseRata[j] < 0)  // Èô¼ÆËã¼ÁÁ¿Ğ¡ÓÚÁãÏòDCS·¢ËÍ0
 887   3                  {
 888   4                      DCS_Send[j * 4 + 4] = 0x30;
 889   4                      DCS_Send[j * 4 + 5] = 0x30;
 890   4                      DCS_Send[j * 4 + 6] = 0x30;
 891   4                      DCS_Send[j * 4 + 7] = 0x30;
 892   4                  } else if (DoseRata[j] >= 0) {
 893   4                      if (DoseRata[j] < 1) {
 894   5                          temp = (float)DoseRata[j] * 1000;
 895   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 896   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 897   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 898   5                          DCS_Send[j * 4 + 7] = 0x30;
 899   5                      } else if ((DoseRata[j] >= 1) && (DoseRata[j] < 10)) {
 900   5                          temp = (float)DoseRata[j] * 100;
 901   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 902   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 903   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 904   5                          DCS_Send[j * 4 + 7] = 0x31;
 905   5                      } else if ((DoseRata[j] >= 10) && (DoseRata[j] < 100)) {
 906   5                          temp = (float)DoseRata[j] * 10;
 907   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 908   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 909   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 910   5                          DCS_Send[j * 4 + 7] = 0x32;
 911   5                      } else if ((DoseRata[j] >= 100) && (DoseRata[j] < 1000)) {
 912   5                          temp = (float)DoseRata[j];
 913   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 914   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 915   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 916   5                          DCS_Send[j * 4 + 7] = 0x33;
 917   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 10000)) {
 918   5                          temp = (float)DoseRata[j] / 10.0;
 919   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 17  

 920   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 921   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 922   5                          DCS_Send[j * 4 + 7] = 0x34;
 923   5                      } else if ((DoseRata[j] >= 10000) && (DoseRata[j] < 100000)) {
 924   5                          temp = (float)DoseRata[j] / 100.0;
 925   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 926   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 927   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 928   5                          DCS_Send[j * 4 + 7] = 0x35;
 929   5                      } else if ((DoseRata[j] >= 100000) && (DoseRata[j] < 1000000)) {
 930   5                          temp = (float)DoseRata[j] / 1000.0;
 931   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 932   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 933   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 934   5                          DCS_Send[j * 4 + 7] = 0x36;
 935   5                      } else if ((DoseRata[j] >= 1000000) && (DoseRata[j] < 10000000)) {
 936   5                          temp = (float)DoseRata[j] / 10000.0;
 937   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 938   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 939   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 940   5                          DCS_Send[j * 4 + 7] = 0x37;
 941   5                      } else if ((DoseRata[j] >= 10000000) && (DoseRata[j] < 100000000)) {
 942   5                          temp = (float)DoseRata[j] / 100000.0;
 943   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 944   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 945   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 946   5                          DCS_Send[j * 4 + 7] = 0x38;
 947   5                      } else if ((DoseRata[j] >= 100000000) && (DoseRata[j] < 1000000000)) {
 948   5                          temp = (float)DoseRata[j] / 1000000.0;
 949   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 950   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 951   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 952   5                          DCS_Send[j * 4 + 7] = 0x39;
 953   5                      }
 954   4                  }
 955   3                  /***********¼ÁÁ¿ÂÊ×ª»»µ¥Î»ºó×ª»»³É¿ÉÒÔÏÔÊ¾µÄBCDÂë*************/
 956   3                  if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && 
             -(Tbcd[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
 957   3                  {
 958   4                      Tbcd[5] = (uchar)(((int)jtemp) / 100);       // °ÙÎ»
 959   4                      Tbcd[4] = (uchar)(((int)jtemp) % 100 / 10);  // Ê®Î»
 960   4                      Tbcd[3] = (uchar)(((int)jtemp) % 100 % 10);  // ¸öÎ»
 961   4                      count_temp = (jtemp - (int)jtemp) * 1000;    // ¼ÆËãĞ¡ÓÚ1µÄ²¿·Ö£¬°ÑĞ¡Êı²¿·Ö±ä´ó£¬±£ÁôÈıÎ»Ğ
             -¡Êı
 962   4                      Tbcd[2] = (uchar)(count_temp / 100);         // Ğ¡Ğ¡ÊıÊ®·ÖÎ»
 963   4                      Tbcd[1] = (uchar)(count_temp % 100 / 10);    // Ğ¡Êı°Ù·ÖÎ»
 964   4                      Tbcd[0] = (uchar)(count_temp % 100 % 10);    // Ğ¡ÊıÇ§·ÖÎ»
 965   4                      if (Flag_dw == 1)                            // ¸ù¾İTbcd[]¼ÆËãyudecide(float)ÓÃÀ´ÅĞ¶Ï¼ÁÁ¿Â
             -ÊÊÇ·ñ³¬¹ıãĞÖµ
 966   4                          yudecide = (float)(Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] * 
             -0.01 + Tbcd[0] * 0.001);
 967   4                      if (Flag_dw == 2)
 968   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000);
 969   4                      if (Flag_dw == 3)
 970   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000000);
 971   4                  }
 972   3                  /***********ÅĞ¶ÏãĞÖµ²¢±¨¾¯*************/
 973   3                  mtemp = (YuThouth[j] + YuCent[j] * 0.1 + YuTenth[j] * 0.01);  // ÔİÊ±Ã»¸ù¾İÎ»ÊıĞŞ¸Ä2012.6.15
 974   3                  yu = (double)(pow(10, YuGe[j]));
 975   3                  yudata = (double)(mtemp * yu);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 18  

 976   3                  if (yudecide >= yudata)  // Èç¹û¼ÆÊı³¬¹ıÄ³Ò»¸ö·¶Î§£¬ÔòÉùÒô±¨¾¯
 977   3                  {
 978   4                      if ((Judge_Speak == 0) || (Speak_Alarm() == 1))  // ·äÃùÆ÷±¨¾¯£¬Speak_Alarm·µ»Ø1·äÃùÆ÷¹¤×÷
 979   4                      {
 980   5                          Flag_Warn = 1;  // ±¨¾¯±êÖ¾ÖÃÒ»
 981   5                      }
 982   4                      Flag_need_Flash[j] = 1;  // LEDÉÁË¸±êÖ¾ÖÃ1
 983   4                      State_Flash[j] = 1;
 984   4                      Var_Led = Var_Led & Svar0[j];  // LED±¨¾¯Ö¸Ê¾µÆ£¨char£©Svar0[8]={0xFE,0xFD,0xFB,0xF7,0xEF,
             -0xDF,0xBF,0x7F}
 985   4                  } else if (yudecide < yudata) {
 986   4                      Flag_need_Flash[j] = 0;
 987   4                      State_Flash[j] = 0;
 988   4                      Var_Led = Var_Led | Svar1[j];
 989   4                  }
 990   3                  /*AI1*¼ÁÁ¿ÂÊÏÔÊ¾Ó¦µ±ÔÚÌ½²âÆ÷±êÖ¾¸Ä±äÖ®Ç°******¼ÁÁ¿ÂÊÏÔÊ¾**********/
 991   3                  // if(Channel_Detector[j]==0)
 992   3                  //{
 993   3                  //  Txtext(10,13+(j*58),"Gh");                                                  //AH1ÏÔÊ¾Ì½Í·
 994   3                  //}
 995   3                  // else
 996   3                  //{
 997   3                  // Txtext(10,13+(j*58),"Dh");
 998   3                  //}
 999   3                  /*AI1*******¼ÁÁ¿ÂÊÏÔÊ¾**********/
1000   3                  if (Flag_need_Flash[j] == 0) {
1001   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
1002   5                          Txtext(10, 13 + (j * 58), "GM");  // AH1ÏÔÊ¾Ì½Í·
1003   5                      } else {
1004   5                          Txtext(10, 13 + (j * 58), "DL");
1005   5                      }
1006   4                      Tnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
1007   4                      Txtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
1008   4                      Tnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
1009   4                      Tnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
1010   4                      Tnumber(390, 13 + (j * 58), Average_Times[j]);
1011   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
1012   4                      {
1013   5                          Tnumber(130, 13 + (j * 58), Tbcd[5]);
1014   5                          Tnumber(160, 13 + (j * 58), Tbcd[4]);
1015   5                          Tnumber(190, 13 + (j * 58), Tbcd[3]);
1016   5                          Txtext(220, 13 + (j * 58), ".");
1017   5                          Tnumber(240, 13 + (j * 58), Tbcd[2]);
1018   5                          Tnumber(270, 13 + (j * 58), Tbcd[1]);
1019   5                          Tnumber(300, 13 + (j * 58), Tbcd[0]);
1020   5                          if (Tdata < 10)                          // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
1021   5                              Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1022   5                          else if ((Tdata >= 10) && (Tdata < 100))
1023   5                              Tnumber(556, 13 + (j * 58), Tdata);
1024   5                          else if ((Tdata >= 100) && (Tdata < 1000))
1025   5                              Tnumber(536, 13 + (j * 58), Tdata);
1026   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
1027   5                              Tnumber(516, 13 + (j * 58), Tdata);
1028   5                          else if (Tdata >= 10000)
1029   5                              Tnumber(496, 13 + (j * 58), Tdata);
1030   5                      } else {
1031   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
1032   5                          {
1033   6                              Tnumber(160, 13 + (j * 58), Tbcd[4]);
1034   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
1035   6                              Txtext(220, 13 + (j * 58), ".");
1036   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 19  

1037   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
1038   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
1039   6                              if (Tdata < 10)
1040   6                                  Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1041   6                              else if ((Tdata >= 10) && (Tdata < 100))
1042   6                                  Tnumber(556, 13 + (j * 58), Tdata);
1043   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1044   6                                  Tnumber(536, 13 + (j * 58), Tdata);
1045   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1046   6                                  Tnumber(516, 13 + (j * 58), Tdata);
1047   6                              else if (Tdata >= 10000)
1048   6                                  Tnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1049   6                          } else                                       // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
1050   5                          {
1051   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
1052   6                              Txtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
1053   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
1054   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
1055   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
1056   6                              if (Tdata < 10)
1057   6                                  Tnumber(576, 13 + (j * 58), Tdata);   // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1058   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
1059   6                                  Tnumber(556, 13 + (j * 58), Tdata);
1060   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1061   6                                  Tnumber(536, 13 + (j * 58), Tdata);
1062   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1063   6                                  Tnumber(516, 13 + (j * 58), Tdata);
1064   6                              else if (Tdata >= 10000)
1065   6                                  Tnumber(496, 13 + (j * 58), Tdata);
1066   6                          }
1067   5                      }
1068   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1069   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1070   4                      {
1071   5                          Txtext(340, 13 + (j * 58), "u");
1072   5                      } else if (Flag_dw == 2) {
1073   5                          Txtext(340, 13 + (j * 58), "m");
1074   5                      } else if (Flag_dw == 3) {
1075   5                          Txtext(340, 13 + (j * 58), "G");
1076   5                      }
1077   4                      Alarm();  // ±¨¾¯
1078   4                  }
1079   3                  if (Flag_need_Flash[j] == 1) {
1080   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
1081   5                          Trxtext(7, 13 + (j * 58), "  ");
1082   5                          Trxtext(10, 13 + (j * 58), "GM                        ");  // AH1ÏÔÊ¾Ì½Í·
1083   5                      } else {
1084   5                          Trxtext(7, 13 + (j * 58), "  ");
1085   5                          Trxtext(10, 13 + (j * 58), "DL                        ");
1086   5                      }
1087   4                      Trnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
1088   4                      Trxtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
1089   4                      Trnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
1090   4                      Trnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
1091   4                      Trnumber(390, 13 + (j * 58), Average_Times[j]);
1092   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
1093   4                      {
1094   5                          Trnumber(130, 13 + (j * 58), Tbcd[5]);
1095   5                          Trnumber(160, 13 + (j * 58), Tbcd[4]);
1096   5                          Trnumber(190, 13 + (j * 58), Tbcd[3]);
1097   5                          Trxtext(220, 13 + (j * 58), ".");
1098   5                          Trnumber(240, 13 + (j * 58), Tbcd[2]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 20  

1099   5                          Trnumber(270, 13 + (j * 58), Tbcd[1]);
1100   5                          Trnumber(300, 13 + (j * 58), Tbcd[0]);
1101   5                          if (Tdata < 10)                           // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
1102   5                              Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1103   5                          else if ((Tdata >= 10) && (Tdata < 100))
1104   5                              Trnumber(556, 13 + (j * 58), Tdata);
1105   5                          else if ((Tdata >= 100) && (Tdata < 1000))
1106   5                              Trnumber(536, 13 + (j * 58), Tdata);
1107   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
1108   5                              Trnumber(516, 13 + (j * 58), Tdata);
1109   5                          else if (Tdata >= 10000)
1110   5                              Trnumber(496, 13 + (j * 58), Tdata);
1111   5                      } else {
1112   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
1113   5                          {
1114   6                              Trnumber(160, 13 + (j * 58), Tbcd[4]);
1115   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1116   6                              Trxtext(220, 13 + (j * 58), ".");
1117   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);
1118   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1119   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1120   6                              if (Tdata < 10)
1121   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1122   6                              else if ((Tdata >= 10) && (Tdata < 100))
1123   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1124   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1125   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1126   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1127   6                                  Trnumber(516, 13 + (j * 58), Tdata);
1128   6                              else if (Tdata >= 10000)
1129   6                                  Trnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1130   6                          } else                                        // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
1131   5                          {
1132   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1133   6                              Trxtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
1134   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
1135   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1136   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1137   6                              if (Tdata < 10)
1138   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1139   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
1140   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1141   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1142   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1143   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1144   6                                  Trnumber(516, 13 + (j * 58), Tdata);
1145   6                              else if (Tdata >= 10000)
1146   6                                  Trnumber(496, 13 + (j * 58), Tdata);
1147   6                          }
1148   5                      }
1149   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1150   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1151   4                      {
1152   5                          Trxtext(340, 13 + (j * 58), "u");
1153   5                      } else if (Flag_dw == 2) {
1154   5                          Trxtext(340, 13 + (j * 58), "m");
1155   5                      } else if (Flag_dw == 3) {
1156   5                          Trxtext(340, 13 + (j * 58), "G");
1157   5                      }
1158   4                      Alarm();  // ±¨¾¯
1159   4                  }
1160   3                  send_buf[8 * j] = Tbcd[5];  // ÏòNIM-B·¢ËÍÏÔÊ¾Êı¾İ
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 21  

1161   3                  send_buf[8 * j + 1] = Tbcd[4];
1162   3                  send_buf[8 * j + 2] = Tbcd[3];
1163   3                  send_buf[8 * j + 3] = Tbcd[2];
1164   3                  send_buf[8 * j + 4] = Tbcd[1];
1165   3                  send_buf[8 * j + 5] = Tbcd[0];
1166   3                  send_buf[8 * j + 6] = Flag_dw;             // ·¢ËÍµ¥Î»±êÖ¾
1167   3                  send_buf[8 * j + 7] = Flag_need_Flash[j];  // LEDÉÁË¸±êÖ¾
1168   3              }
1169   2              for (j = 0; j < 8; j++)  // ÖÃDCSÊı¾İµÄ±¨¾¯ĞÅºÅ
1170   2              {
1171   3                  if (Flag_need_Flash[j]) {
1172   4                      DCS_Send[64] = DCS_Send[64] | Svar1[j];
1173   4                  } else {
1174   4                      DCS_Send[64] = DCS_Send[64] & Svar0[j];
1175   4                  }
1176   3              }  // 8¸öÌ½Í·¾ùÏÔÊ¾Ö´ĞĞÍê
1177   2              Flag_Warn_Count = 1;
1178   2              jishucount++;           // ¼ÆÊı´ÎÊıÔö¼Ó£¨ËãÆ½¾ùÖµÊ±ÓÃ£©
1179   2              if (jishucount == 255)  // ¼ÆÊı´ÎÊıÒòÎªÊÇcharĞÍ±äÁ¿£¬×î¶àÖ§³Ö255¸ö£¬ËùÒÔÒªÖÃÁã
1180   2                  jishucount = 8;
1181   2              if (jishucount > 4)
1182   2                  Flag_Meant = 1;  // Ç°Îå´ÎµÄÈ¡Öµ²»Òª£¬µÚÎå´Î²Å¿ªÊ¼Òª£¬ÖÃFlag_Meant=1£»·ñÔò¾ùÖÃ0
1183   2              else
1184   2                  Flag_Meant = 0;
1185   2              // shortdelay(5000);                                                             //ÑÓÊ±
1186   2              // for(i=0;i<33;i++)//ÏÔÊ¾ÍêÇå0
1187   2              // buf[i]=0;
1188   2          }  // ²âÁ¿±êÖ¾
1189   1          else {
1190   2              jishuguan_data = 0;   // needthinkwhetherneed?4.21,int¼ÆÊı¹ÜÊı¾İ£¬
1191   2              dianlishi_data = 0;   // µçÀëÊÒÊı¾İ
1192   2              jishuguan_rata = 0;   // ¼ÆÊı¹Ü¼ÆÊıÂÊ
1193   2              jishuguan_jtemp = 0;  // ¼ÆÊı¹Ü¼ÁÁ¿Öµ(µ¥Î»×ª»»ºó)
1194   2              dianlishi_jtemp = 0;  // µçÀëÊÒ¼ÁÁ¿Öµ£¨µ¥Î»×ª»»ºó£©
1195   2              Tbcd[11] = 0;
1196   2              Tbcd[10] = 0;
1197   2              Tbcd[9] = 0;
1198   2              Tbcd[8] = 0;
1199   2              Tbcd[7] = 0;
1200   2              Tbcd[6] = 0;
1201   2              Tbcd[5] = 0;
1202   2              Tbcd[4] = 0;
1203   2              Tbcd[3] = 0;
1204   2              Tbcd[2] = 0;
1205   2              Tbcd[1] = 0;
1206   2              Tbcd[0] = 0;
1207   2              j = 10 * biaoding_input - 7;                                                                  // b
             -iaodin_inputÎªÒª±ê¶¨µÄÌ½Í·ĞòºÅ
1208   2              jishuguan_data = buf[4 * biaoding_input - 1] * 256 + buf[4 * biaoding_input - 2];             // Ï
             -àµ±ÓÚTdata
1209   2              jishuguan_rata = jishuguan_data * 12;                                                         // ¼
             -ÆÊıÂÊ£¬Ö±½Ó³ËÒÔ12?
1210   2              dianlishi_data = buf[4 * biaoding_input + 1] * 256 + buf[4 * biaoding_input];                 // µ
             -çÀëÊÒTdata
1211   2              Para[0] = (float)(DataThouth[j] * 1000 + DataCent[j] * 100 + DataTenth[j] * 10 + DataGe[j]);  // µ
             -÷½Ú²ÎÊı
1212   2              Para[1] = (float)((float)(DataThouth[j + 1] * 1000 + DataCent[j + 1] * 100 + DataTenth[j + 1] * 10
             - + DataGe[j + 1]) / 1000000);
1213   2              jishuguan_DoseRata = (float)(Para[1] * (jishuguan_rata - Para[0]));
1214   2              if (jishuguan_DoseRata < 0)
1215   2                  jishuguan_DoseRata = 0.0;
1216   2              jishuguan_jtemp = (float)jishuguan_DoseRata;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 22  

1217   2              if ((Tbcd[11] <= 9) && (Tbcd[10] <= 9) && (Tbcd[9] <= 9) && (Tbcd[8] <= 9) && (Tbcd[7] <= 9) && (T
             -bcd[6] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1218   2              {
1219   3                  Tbcd[11] = (uchar)(((int)jishuguan_jtemp) / 100);       // Ç§Î»
1220   3                  Tbcd[10] = (uchar)(((int)jishuguan_jtemp) % 100 / 10);  // °ÙÎ»
1221   3                  Tbcd[9] = (uchar)(((int)jishuguan_jtemp) % 100 % 10);   // ¸öÎ»
1222   3                  jishuguan_count_temp = (jishuguan_jtemp - (int)jishuguan_jtemp) * 1000;
1223   3                  Tbcd[8] = (uchar)(jishuguan_count_temp / 100);
1224   3                  Tbcd[7] = (uchar)(jishuguan_count_temp % 100 / 10);
1225   3                  Tbcd[6] = (uchar)(jishuguan_count_temp % 100 % 10);
1226   3              }
1227   2              Para[2] = (float)(DataThouth[j + 2] * 1000 + DataCent[j + 2] * 100 + DataTenth[j + 2] * 10 + DataG
             -e[j + 2]);  // µ÷½Ú²ÎÊı
1228   2              Para[3] = (float)((float)(DataThouth[j + 3] * 1000 + DataCent[j + 3] * 100 + DataTenth[j + 3] * 10
             - + DataGe[j + 3]) / 1000);
1229   2              dianlishi_DoseRata = (float)(Para[3] * (dianlishi_data - Para[2]));
1230   2              if (dianlishi_DoseRata < 0)
1231   2                  dianlishi_DoseRata = 0.0;
1232   2              dianlishi_jtemp = (float)(dianlishi_DoseRata / 1000);
1233   2              if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && (Tbc
             -d[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1234   2              {
1235   3                  Tbcd[5] = (uchar)(((int)dianlishi_jtemp) / 100);       // Ç§Î»
1236   3                  Tbcd[4] = (uchar)(((int)dianlishi_jtemp) % 100 / 10);  // °ÙÎ»
1237   3                  Tbcd[3] = (uchar)(((int)dianlishi_jtemp) % 100 % 10);  // ¸öÎ»
1238   3                  dianlishi_count_temp = (dianlishi_jtemp - (int)dianlishi_jtemp) * 1000;
1239   3                  Tbcd[2] = (uchar)(dianlishi_count_temp / 100);
1240   3                  Tbcd[1] = (uchar)(dianlishi_count_temp % 100 / 10);
1241   3                  Tbcd[0] = (uchar)(dianlishi_count_temp % 100 % 10);
1242   3              }
1243   2              Txtext(200, 58, "±ê¶¨Ì½Í·");
1244   2              Tnumber(400, 58, biaoding_input);
1245   2              Txtext(10, 116, "¸Ç¸ï¹Ü");
1246   2              ;
1247   2              Txtext(160, 116, ":");
1248   2              Txtext(220, 174, "uGy/h");
1249   2              Txtext(520, 174, "CPM");
1250   2              Txtext(10, 290, "µçÀëÊÒ");
1251   2              ;
1252   2              Txtext(160, 290, ":");
1253   2              Txtext(220, 348, "mGy/h");
1254   2              Txtext(520, 348, "CP5S");
1255   2              if (Tbcd[11] != 0) {
1256   3                  Tnumber(10, 174, Tbcd[11]);
1257   3                  Tnumber(40, 174, Tbcd[10]);
1258   3                  Tnumber(70, 174, Tbcd[9]);
1259   3                  Txtext(100, 174, ".");
1260   3                  Tnumber(130, 174, Tbcd[8]);
1261   3                  Tnumber(160, 174, Tbcd[7]);
1262   3                  Tnumber(190, 174, Tbcd[6]);
1263   3                  if (jishuguan_data < 10)
1264   3                      Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1265   3                  else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1266   3                      Tnumber(460, 174, jishuguan_data);
1267   3                  else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1268   3                      Tnumber(430, 174, jishuguan_data);
1269   3                  else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1270   3                      Tnumber(400, 174, jishuguan_data);
1271   3                  else if (jishuguan_data >= 10000)
1272   3                      Tnumber(370, 174, jishuguan_data);
1273   3              } else {
1274   3                  if (Tbcd[10] != 0) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 23  

1275   4                      Tnumber(40, 174, Tbcd[10]);
1276   4                      Tnumber(70, 174, Tbcd[9]);
1277   4                      Txtext(100, 174, ".");
1278   4                      Tnumber(130, 174, Tbcd[8]);
1279   4                      Tnumber(160, 174, Tbcd[7]);
1280   4                      Tnumber(190, 174, Tbcd[6]);
1281   4                      if (jishuguan_data < 10)
1282   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1283   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1284   4                          Tnumber(460, 174, jishuguan_data);
1285   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1286   4                          Tnumber(430, 174, jishuguan_data);
1287   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1288   4                          Tnumber(400, 174, jishuguan_data);
1289   4                      else if (jishuguan_data >= 10000)
1290   4                          Tnumber(370, 174, jishuguan_data);
1291   4                  } else {
1292   4                      Tnumber(70, 174, Tbcd[9]);
1293   4                      Txtext(100, 174, ".");
1294   4                      Tnumber(130, 174, Tbcd[8]);
1295   4                      Tnumber(160, 174, Tbcd[7]);
1296   4                      Tnumber(190, 174, Tbcd[6]);
1297   4                      if (jishuguan_data < 10)
1298   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1299   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1300   4                          Tnumber(460, 174, jishuguan_data);
1301   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1302   4                          Tnumber(430, 174, jishuguan_data);
1303   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1304   4                          Tnumber(400, 174, jishuguan_data);
1305   4                      else if (jishuguan_data >= 10000)
1306   4                          Tnumber(370, 174, jishuguan_data);
1307   4                  }
1308   3              }
1309   2              if (Tbcd[5] != 0) {
1310   3                  Tnumber(10, 348, Tbcd[5]);
1311   3                  Tnumber(40, 348, Tbcd[4]);
1312   3                  Tnumber(70, 348, Tbcd[3]);
1313   3                  Txtext(100, 348, ".");
1314   3                  Tnumber(130, 348, Tbcd[2]);
1315   3                  Tnumber(160, 348, Tbcd[1]);
1316   3                  Tnumber(190, 348, Tbcd[0]);
1317   3                  if (dianlishi_data < 10)
1318   3                      Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1319   3                  else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1320   3                      Tnumber(460, 348, dianlishi_data);
1321   3                  else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1322   3                      Tnumber(430, 348, dianlishi_data);
1323   3                  else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1324   3                      Tnumber(400, 348, dianlishi_data);
1325   3                  else if (dianlishi_data >= 10000)
1326   3                      Tnumber(370, 348, dianlishi_data);
1327   3              } else {
1328   3                  if (Tbcd[4] != 0) {
1329   4                      Tnumber(40, 348, Tbcd[4]);
1330   4                      Tnumber(70, 348, Tbcd[3]);
1331   4                      Txtext(100, 348, ".");
1332   4                      Tnumber(130, 348, Tbcd[2]);
1333   4                      Tnumber(160, 348, Tbcd[1]);
1334   4                      Tnumber(190, 348, Tbcd[0]);
1335   4                      if (dianlishi_data < 10)
1336   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 24  

1337   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1338   4                          Tnumber(460, 348, dianlishi_data);
1339   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1340   4                          Tnumber(430, 348, dianlishi_data);
1341   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1342   4                          Tnumber(400, 348, dianlishi_data);
1343   4                      else if (dianlishi_data >= 10000)
1344   4                          Tnumber(370, 348, dianlishi_data);
1345   4                  } else {
1346   4                      Tnumber(70, 348, Tbcd[3]);
1347   4                      Txtext(100, 348, ".");
1348   4                      Tnumber(130, 348, Tbcd[2]);
1349   4                      Tnumber(160, 348, Tbcd[1]);
1350   4                      Tnumber(190, 348, Tbcd[0]);
1351   4                      if (dianlishi_data < 10)
1352   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1353   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1354   4                          Tnumber(460, 348, dianlishi_data);
1355   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1356   4                          Tnumber(430, 348, dianlishi_data);
1357   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1358   4                          Tnumber(400, 348, dianlishi_data);
1359   4                      else if (dianlishi_data >= 10000)
1360   4                          Tnumber(370, 348, dianlishi_data);
1361   4                  }
1362   3              }
1363   2          }
1364   1      }
*** WARNING C280 IN LINE 326 OF 8253count.c: 'l': unreferenced local variable
1365          
1366          /************************************
1367           *¶ÌÑÓÊ±
1368           ************************************/
1369          void shortdelay(uint i)
1370          {
1371   1          uint k;
1372   1          uint n;
1373   1          for (k = 0; k < i; k++)
1374   1              for (n = 200; n > 0; n--)
1375   1                  ;
1376   1      }
1377          
1378          /********************************
1379           *Ö¸Ê¾µÆºÍ±¨¾¯
1380           ********************************/
1381          void Alarm()
1382          {
1383   1          uchar n;
1384   1          for (n = 0; n < 10; n++) {
1385   2              Led573 = Var_Led;
1386   2              if (Flag_Warn == 1)  // ÉùÒô±¨¾¯
1387   2              {
1388   3                  Speak = 1;
1389   3              }
1390   2          }
1391   1      }
1392          
1393          /*******************************
1394           *¸üĞÂÖ¸Ê¾µÆ×´Ì¬
1395           *******************************/
1396          void Updata_Flash(uchar j)
1397          {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/27/2024 14:56:09 PAGE 25  

1398   1          if (Flag_need_Flash[j]) {
1399   2              if (State_Flash[j] == 1) {
1400   3                  State_Flash[j] = 0;
1401   3              } else {
1402   3                  State_Flash[j] = 1;
1403   3              }
1404   2          } else
1405   1              State_Flash[j] = 0;
1406   1      }
1407          
1408          /***********************************
1409           *Ö¸Ê¾µÆÉÁË¸
1410           ************************************/
1411          void Led_Flash(void)
1412          {
1413   1          uchar i;
1414   1          for (i = 0; i < 8; i++) {
1415   2              Updata_Flash(i);                                  // ×´Ì¬È¡·´
1416   2              Led_Disp(i, Flag_need_Flash[i], State_Flash[i]);  // µÆ×´Ì¬ÏÔÊ¾
1417   2          }
1418   1      }
1419          
1420          /************************************
1421           *Ö¸Ê¾µÆ×´Ì¬ÏÔÊ¾
1422           *************************************/
1423          void Led_Disp(uchar Num, uchar Flag, uchar State)
1424          {
1425   1          if (Flag) {
1426   2              if (State) {
1427   3                  Var_Led = Var_Led & Svar0[Num];  // Ö¸Ê¾µÆÁÁ
1428   3                  Led573 = Var_Led;
1429   3                  if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1430   3                  {
1431   4                      Speak = 0;  // ·äÃùÆ÷Ïì
1432   4                      shortdelay(100);
1433   4                  }
1434   3                  return;
1435   3              }
1436   2          }
1437   1          Var_Led = Var_Led | Svar1[Num];  // Ö¸Ê¾µÆÃğ
1438   1          Led573 = Var_Led;
1439   1          if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1440   1          {
1441   2              Speak = 1;  // ·äÃùÆ÷²»Ïì
1442   2              shortdelay(100);
1443   2          }
1444   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  23263    ----
   CONSTANT SIZE    =    153    ----
   XDATA SIZE       =   1011      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     48      24
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
