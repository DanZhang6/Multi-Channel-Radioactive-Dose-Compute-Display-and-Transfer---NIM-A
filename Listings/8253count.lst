C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 8253COUNT
OBJECT MODULE PLACED IN .\Objects\8253count.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 8253count.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\8253count.lst) TABS(2) OBJECT(.\Objects\8253count.obj)

line level    source

   1          /********************************************************************************************
   2          *ÃèÊö£º
   3          *   8253¼ÆÊıÉèÖÃ
   4          *¹¦ÄÜ£º
   5          *   1.´Ó8253ÖĞ¶ÁÈ¡¼ÆÊı£¬Ã¿¸ö8253ÖĞº¬ÓĞ3¸ö¼ÆÊıÆ÷£¬Îå¸ö8253¼Æ15¸öÌ½Í·µÄ¼ÆÊı£¬
   6          *     Ç°Æß¸öÌ½Í·ÊÇË«Ì½Í·£¨µÍ¼ÆÊıÌ½Í·ºÍ¸ß¼ÆÊıÌ½Í·£©£¬µÚ°Ë¸öÌ½Í·ÊÇµ¥Ì½Í·£¨¸ß¼ÆÊıÌ½Í·£©£¬
   7          *     ¸ù¾İ¼ÆÊıÂÊÑ¡ÔñÄÄ¸öÌ½Í·¹¤×÷£»
   8          *   2.T0¶¨Ê±ÖĞ¶Ï
   9          *     T0¹¤×÷ÔÚ16Î»×Ô¶¯ÖØÔØÄ£Ê½£¬ÏòÉÏ¼ÆÊı£¬Ã¿Ñ­»·Ò»´Î£¬×Ü¶¨Ê±5Ms,¼ÆÊı³õÖµDC00£¬¾§Õñ22.1184M£»
  10          *   3.¶¨Ê±µ½£¬¶ÁÈ¡¼ÆÊı£¬¸ù¾İÉè¶¨µÄ²ÎÊı£¬ÏÔÊ¾¸÷Ì½Í·µÄ¼ÆÊıÂÊ£»
  11          *   4.¸ù¾İ¼ÆÊıÂÊµÄ²»Í¬£¬Ñ¡Ôñ²»Í¬µÄµ¥Î»£¨uGy/s,mGy/s,Gy/s£©;
  12          
  13          ***********************************************************************************************/
  14          #include "STC15F2K60S2.h"
  15          #include "absacc.h"
  16          #include "config.h"
  17          #include "intrins.h"
  18          #include "math.h"
  19          #include "stdio.h"
  20          
  21          #define C82531C XBYTE[0x8300]   // 8253µÄÃüÁî¶Ë¿Ú£¨µØÖ·£©£¬CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=11£»
  22          #define C825310D XBYTE[0x8000]  // ¼ÆÊıÆ÷0CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=00£»
  23          #define C825311D XBYTE[0x8100]  // ¼ÆÊıÆ÷1CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=01;
  24          #define C825312D XBYTE[0x8200]  // ¼ÆÊıÆ÷2CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=10;
  25          
  26          #define C82532C XBYTE[0x8b00]   // XBYTEµÄ×÷ÓÃÊÇ½«Íâ²¿I/O¶Ë¿ÚÖÃÎªÖĞÀ¨ºÅÄÚ²¿µÄ16Î»¶ş½øÖÆ£¬¼´ÎªÉèÖÃ
  27          #define C825320D XBYTE[0x8800]  // Ê¹ÄÜ¶Ë£¬ XBYTEµÄ×÷ÓÃ»¹ÓĞÉèÖÃÊ¹ÄÜ¶Ëºó£¬×Ô¶¯ÉèÖÃwr,rd.
  28          #define C825321D XBYTE[0x8900]
  29          #define C825322D XBYTE[0x8a00]
  30          
  31          #define C82533C XBYTE[0x9300]
  32          #define C825330D XBYTE[0x9000]
  33          #define C825331D XBYTE[0x9100]
  34          #define C825332D XBYTE[0x9200]
  35          
  36          #define C82534C XBYTE[0x9b00]
  37          #define C825340D XBYTE[0x9800]
  38          #define C825341D XBYTE[0x9900]
  39          #define C825342D XBYTE[0x9a00]
  40          
  41          #define C82535C XBYTE[0xa300]
  42          #define C825350D XBYTE[0xa000]
  43          #define C825351D XBYTE[0xa100]
  44          #define C825352D XBYTE[0xa200]
  45          
  46          uchar buf[32];                 // AB1*´Ó8253ÖĞ¶Áµ½µÄ¼ÆÊıÆ÷Êı¾İ£¬15¸ö¼ÆÊıÆ÷£¬µÍ°ËÎ»¸ß°ËÎ»£¬´Ó3-32£¬1ÎªÌ½Í·¸
             -öÊı£¬2Îª²âÁ¿Ê±¼ä
  47          uchar Channel_Detector[8][2];  // AC1+Í¨µÀÌ½Í·Ñ¡Ôñ±êÖ¾£¬1:µçÀëÊÒ0:¼ÆÊı¹Ü
  48          uchar DataGe[75];              // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ¸öÎ»£¬³õÊ¼Ê±¸öÊ®°ÙÇ§¾ùÎª0
  49          uchar DataTenth[75];           // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÊ®·ÖÎ»
  50          uchar DataCent[75];            // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ°Ù·ÖÎ»
  51          uchar DataThouth[75];          // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÇ§·ÖÎ»
  52          uchar send_buf[65];            // NIM_AÏòNIM_B·¢ËÍÊı¾İµÄÊı×é
  53          uchar Incinput;                // Ì½Í·¸öÊı±êÖ¾£¬Ä¬ÈÏÏÔÊ¾Ì½Í·¸öÊıÎª8¸ö
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 2   

  54          float idata Para[10];          // Éè¶¨ºÃµÄ²ÎÊıÊı×é
  55          float DoseRata[8];             // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
  56          uchar Channel_Display[8];      // ÓÃÓÚÏÔÊ¾µÄÍ¨µÀÁ¿³Ì
  57          float jishuguan_DoseRata;
  58          float dianlishi_DoseRata;
  59          uchar Calculated[8];  // ÊÇ·ñ¼ÆËã¹ı±êÖ¾
  60          uchar Flag_dw;        // µ¥Î»±êÖ¾
  61          uchar Max_Time;       // AA1+ËùÓĞÍ¨µÀ×î³¤µÄ¼ÆÊıÊ±¼ä
  62          uint Tdata;           // Ì½Í·¼ÆÊıÂÊ
  63          double Real_Count[8];
  64          ulong Count[8][3];          // Ò»Ãë¼ÆÊıÀúÊ·
  65          uint idata jishuguan_data;  // ±ê¶¨Ê±µÄ¼ÆÊı¹Ü¼ÆÊıÖµÏàµ±ÓÚTdata
  66          uint idata dianlishi_data;  // ±ê¶¨Ê±µÄµçÀëÊÒ¼ÆÊıÖµÏàµ±ÓÚTdata
  67          uchar idata Var_Signal1;    // Ì½Í·¿ØÖÆĞÅºÅ1£¬½Ó¼ÆÊı¹Ü£¬Ä¬ÈÏff¾ù½Ó¼ÆÊı¹Ü
  68          uchar idata Var_Signal2;    // Ì½Í·¿ØÖÆĞÅºÅ2£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  69          uchar idata Var_Signal3;    // Ì½Í·¿ØÖÆĞÅºÅ3£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  70          uchar idata Var_Led;        // LED±¨¾¯Ö¸Ê¾µÆ,Îª1Ê±Ãğ,³õÖµ0xff,
  71          uchar biaoding_input;
  72          bit Flag_Warn_Count;       // Ä¬ÈÏ0£»
  73          uchar Flag_need_Flash[8];  // LEDÉÁË¸±êÖ¾
  74          uchar State_Flash[8];
  75          uchar count_change_flag[8];  // ¼ÆÊı¸Ä±ä±êÖ¾£¿
  76          float code a0 = 0.0625;
  77          float code a1 = 0.0625;
  78          float code a2 = 0.125;
  79          float code a3 = 0.25;
  80          float code a4 = 0.5;
  81          uchar code Svar1[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};  // ĞÅºÅÊı×é
  82          uchar code Svar0[8] = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};
  83          extern uchar jishucount;
  84          extern uchar Average_Times[8];  // AJ1+»¬¶¯Æ½¾ù´ÎÊı
  85          extern uchar Display_Flag[8];
  86          
  87          extern bit Speak_Alarm();
  88          
  89          void shortdelay(uint i);
  90          void Alarm();
  91          void Led_Disp(uchar Num, uchar Flag, uchar State);
  92          void Updata_Flash(uchar j);
  93          extern bitSpeak_Alarm();
  94          /*************************************
  95           *8253¼ÆÊıÖµ
  96           **************************************/
  97          void GetAndDisdata()  // ¼ÆÊıÍê³ÉºóµÚÒ»¸öÔËĞĞµÄ³ÌĞò
  98          {
  99   1          uchar j;
 100   1          uchar th = 0;
 101   1          uchar tl = 0;  // bufÊı×é³õÊ¼»¯
 102   1          for (j = 0; j < 10; j++) {
 103   2              Para[j] = 0;
 104   2          }
 105   1          for (j = 0; j < 8; j++) {
 106   2              Calculated[j] = 0;
 107   2          }
 108   1          /*===========Ëø´æ8253µÄ¼ÆÊıÖµ==========*/
 109   1          C82531C = 0x84;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 110   1          tl = C825312D;   // read825316bitsdata(firstLthenH)
 111   1          buf[2] = 0xff - tl;
 112   1          th = C825312D;
 113   1          buf[3] = 0xff - th;
 114   1      
 115   1          C82531C = 0x44;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 3   

 116   1          tl = C825311D;   // read825316bitsdata(firstLthenH)
 117   1          buf[4] = 0xff - tl;
 118   1          th = C825311D;
 119   1          buf[5] = 0xff - th;
 120   1      
 121   1          C82531C = 0x04;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 122   1          tl = C825310D;   // read825316bitsdata(firstLthenH)
 123   1          buf[6] = 0xff - tl;
 124   1          th = C825310D;
 125   1          buf[7] = 0xff - th;
 126   1      
 127   1          C82532C = 0x84;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 128   1          tl = C825322D;   // read825316bitsdata(firstLthenH)
 129   1          buf[8] = 0xff - tl;
 130   1          th = C825322D;
 131   1          buf[9] = 0xff - th;
 132   1      
 133   1          C82532C = 0x44;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 134   1          tl = C825321D;   // read825316bitsdata(firstLthenH)
 135   1          buf[10] = 0xff - tl;
 136   1          th = C825321D;
 137   1          buf[11] = 0xff - th;
 138   1      
 139   1          C82532C = 0x04;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 140   1          tl = C825320D;   // read825316bitsdata(firstLthenH)
 141   1          buf[12] = 0xff - tl;
 142   1          th = C825320D;
 143   1          buf[13] = 0xff - th;
 144   1      
 145   1          C82533C = 0x84;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 146   1          tl = C825332D;   // read825316bitsdata(firstLthenH)
 147   1          buf[14] = 0xff - tl;
 148   1          th = C825332D;
 149   1          buf[15] = 0xff - th;
 150   1      
 151   1          C82533C = 0x44;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 152   1          tl = C825331D;   // read825316bitsdata(firstLthenH)
 153   1          buf[16] = 0xff - tl;
 154   1          th = C825331D;
 155   1          buf[17] = 0xff - th;
 156   1      
 157   1          C82533C = 0x04;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 158   1          tl = C825330D;   // read825316bitsdata(firstLthenH)
 159   1          buf[18] = 0xff - tl;
 160   1          th = C825330D;
 161   1          buf[19] = 0xff - th;
 162   1      
 163   1          C82534C = 0x84;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 164   1          tl = C825342D;   // read825316bitsdata(firstLthenH)
 165   1          buf[20] = 0xff - tl;
 166   1          th = C825342D;
 167   1          buf[21] = 0xff - th;
 168   1      
 169   1          C82534C = 0x44;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 170   1          tl = C825341D;   // read825316bitsdata(firstLthenH)
 171   1          buf[22] = 0xff - tl;
 172   1          th = C825341D;
 173   1          buf[23] = 0xff - th;
 174   1      
 175   1          C82534C = 0x04;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 176   1          tl = C825340D;   // read825316bitsdata(firstLthenH)
 177   1          buf[24] = 0xff - tl;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 4   

 178   1          th = C825340D;
 179   1          buf[25] = 0xff - th;
 180   1      
 181   1          C82535C = 0x84;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 182   1          tl = C825352D;   // read825316bitsdata(firstLthenH)
 183   1          buf[26] = 0xff - tl;
 184   1          th = C825352D;
 185   1          buf[27] = 0xff - th;
 186   1      
 187   1          C82535C = 0x44;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 188   1          tl = C825351D;   // read825316bitsdata(firstLthenH)
 189   1          buf[28] = 0xff - tl;
 190   1          th = C825351D;
 191   1          buf[29] = 0xff - th;
 192   1      
 193   1          C82535C = 0x04;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 194   1          tl = C825350D;   // read825316bitsdata(firstLthenH)
 195   1          buf[30] = 0xff - tl;
 196   1          th = C825350D;
 197   1          buf[31] = 0xff - th;
 198   1      
 199   1          buf[0] = Incinput;  // Ì½Í·¸öÊı
 200   1          buf[1] = Max_Time;  // ²âÁ¿Ê±¼ä£¨Ë¢ĞÂÊ±¼ä±êÖ¾£©
 201   1      }
 202          /*******************************************
 203           *8253¼ÆÊıÆ÷³õÊ¼»¯
 204           ********************************************/
 205          void Init_8253()
 206          {
 207   1          uchar i;  // AB1+
 208   1          //=======×°Èë³õÖµÔÙ¿ªÊ¼¼ÆÊı=======//
 209   1          C82531C = 0xb4;   // 10110100
 210   1          C825312D = 0xff;  // 10£ºÍ¨µÀ2,11£ºÏÈµÍ×Ö½Úºó¸ß×Ö½Ú£¬010£º°´·½Ê½2¹¤×÷£¬0£º¶ş½øÖÆ¼ÆÊı¡£Ğ´³õÖµ0xffºó¿ªÊ¼
             -¼ÆÊı
 211   1          C825312D = 0xff;
 212   1      
 213   1          C82531C = 0x74;   // 01110100
 214   1          C825311D = 0xff;  // Í¬ÉÏ
 215   1          C825311D = 0xff;
 216   1      
 217   1          C82531C = 0x34;   // 00110100
 218   1          C825310D = 0xff;  // Ğ´³õÖµÏÈµÍ×Ö½Úºó¸ß×Ö½Ú82531Ğ´³õÖµºó¾Í¿ªÊ¼¼ÆÊı
 219   1          C825310D = 0xff;  // ¶şÈıĞĞÓÃÀ´×°Èë³õÖµ
 220   1      
 221   1          C82532C = 0xb4;  // 10110100
 222   1          C825322D = 0xff;
 223   1          C825322D = 0xff;
 224   1      
 225   1          C82532C = 0x74;  // 01110100
 226   1          C825321D = 0xff;
 227   1          C825321D = 0xff;
 228   1      
 229   1          C82532C = 0x34;  // 00110100
 230   1          C825320D = 0xff;
 231   1          C825320D = 0xff;
 232   1      
 233   1          C82533C = 0xb4;  // 10110100
 234   1          C825332D = 0xff;
 235   1          C825332D = 0xff;
 236   1      
 237   1          C82533C = 0x74;  // 01110100
 238   1          C825331D = 0xff;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 5   

 239   1          C825331D = 0xff;
 240   1      
 241   1          C82533C = 0x34;  // 00110100
 242   1          C825330D = 0xff;
 243   1          C825330D = 0xff;
 244   1      
 245   1          C82534C = 0xb4;  // 10110100
 246   1          C825342D = 0xff;
 247   1          C825342D = 0xff;
 248   1      
 249   1          C82534C = 0x74;  // 01110100
 250   1          C825341D = 0xff;
 251   1          C825341D = 0xff;
 252   1      
 253   1          C82534C = 0x34;  // 00110100
 254   1          C825340D = 0xff;
 255   1          C825340D = 0xff;
 256   1      
 257   1          C82535C = 0xb4;  // 10110100
 258   1          C825352D = 0xff;
 259   1          C825352D = 0xff;
 260   1      
 261   1          C82535C = 0x74;  // 01110100
 262   1          C825351D = 0xff;
 263   1          C825351D = 0xff;
 264   1      
 265   1          C82535C = 0x34;  // 00110100
 266   1          C825350D = 0xff;
 267   1          C825350D = 0xff;
 268   1          for (i = 0; i < 67; i++) {
 269   2              DCS_Send[i] = 0;
 270   2          }
 271   1          for (i = 0; i <= 7; i++) {
 272   2              DoseRata[i] = 0;  // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
 273   2          }
 274   1          Var_Led = 0xff;  // ledÖ¸Ê¾
 275   1          Led573 = Var_Led;
 276   1          EX0 = 0;                // ¹ØÍâ²¿ÖĞ¶Ï0
 277   1          /*¶¨Ê±¼ÆÊıÆ÷µÄ³õÊ¼»¯*/  // AJ1-,ÒÆ¶¯ÖÁ¶¨Ê±ÖĞ¶ÏÀï¿ªGate,8253¿ªÆô¼ÆÊı
 278   1          Flag8253Cnting = 1;
 279   1          NumT0 = 0;
 280   1      }
 281          /************************************
 282           *ÏÔÊ¾¼ÆÊı
 283           ************************************/
 284          void ShowData()
 285          {
 286   1          uchar i, m, j, k;  // AE1-:Var1ÓÃÀ´ÅĞ¶ÏÊ¹ÓÃµÄÌ½²âÆ÷µÄ¾Ö²¿±äÁ¿£¬Ïàµ±ÓÚChannel_Detector,²»ÔÙĞèÒª
 287   1          ulong count_temp, jishuguan_count_temp, dianlishi_count_temp;
 288   1          float idata temp, jtemp, yudecide, jishuguan_rata, jishuguan_jtemp, dianlishi_jtemp;
 289   1          double yu, yudata, mtemp;
 290   1          uchar Tbcd[12];  // ²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 291   1          Lcd_Clear();
 292   1          /**³ÌĞòËµÃ÷:
 293   1          **1,Îª±£Ö¤¼´Ê¹¶à¸öÍ¨µÀ²»ÔÚÍ¬Ò»Á¿³Ì£¬¸ßÁ¿³ÌµÄÍ¨µÀÒ²ÄÜÓĞÆäÏìÓ¦¸ü¿ìµÄ¸üĞÂËÙ¶È£¬³ÌĞòÒ»Ãë¼ÆÊıÒ»´Î£¬10Ãë¼ÆÊı
             -ÎªÊ®´ÎÒ»Ãë¼ÆÊıµÄÏà¼Ó
 294   1          **  £¬¼ÁÁ¿ÂÊÏÔÊ¾Ò»ÃëË¢ĞÂÒ»´Î¡£
 295   1          **2,³ÌĞòÖĞ¼ÆÊıÂÊ¼ÆËã¡¢Á¿³Ì»»µ²¡¢¼ÁÁ¿¼ÆËãÏÔÊ¾¸÷²¿·Ö·Ö¿ªÖ´ĞĞ
 296   1          */
 297   1          for (i = 0; i <= 7; i++)  // 8¸öÌ½Í·Öğ¸ö¼ì²â
 298   1          {
 299   2              /**
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 6   

 300   2               * 1.±éÀúÃ¿Ò»¸öÌ½Í·£¨0~7£©£»
 301   2               * 2.ÏÈ´Óbuf£¨´Ó8253¼ÆÊıÆ÷ÖĞÈ¡»ØµÄ¼ÆÊı£©ÖĞ¼ÆËã¼ÆÊı£¬¸ß8Î»*256+µÍ8Î»£¬¼ÇÂ¼Àú´Î¼ÆÊıÖµ£¬Ã¿3Ãë¼ÆÊıÒ»´Î
             -·ÀÖ¹Òç³ö£»
 302   2               * 3.¸ù¾İÃ¿´ÎµÄ¼ÆÊı£¨3S¼ÆÊıÊ±³¤£©ÒÔ¼°µ±Ç°Á¿³ÌºÍÔ¤ÏÈÈ·¶¨µÄ»»µ²ÆµÂÊ£¬ÅĞ¶Ï»»µ²ºÍÖ´ĞĞ²¢¼ÇÂ¼Àú´ÎÁ¿³ÌµµÎ
             -»ĞÅÏ¢£»
 303   2               * 4.ĞèÒª¸ù¾İÀúÊ·µÄµµÎ»ĞÅÏ¢½øĞĞÅĞ¶Ï£¬»»µ²ºóµÄ²Ù×÷Óë²»»»µ²µÄ²Ù×÷²»Í¬£¬¹Ê·Ö¿ªÖ´ĞĞ£»
 304   2               * 5.
 305   2               **/
 306   2              if (Channel_Detector[i][0] == Channel_Detector[i][1])  // µ±Ç°Ò»´ÎÁ¿³ÌºÍ´Ë´ÎÁ¿³ÌÒ»ÑùÊ±
 307   2              {
 308   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊı3Ãë£¬Ö±½ÓÓÃÀ´¼
             -ÆËã
 309   3                  {
 310   4                      Real_Count[i] = 0;          // ´ËÁ¿³ÌÃ¿´Î¶¼ÒªÇåÁã
 311   4                      Count[i][0] = Count[i][1];  // ÀúÊ·¼ÆÊı¸üĞÂ
 312   4                      Count[i][1] = Count[i][2];
 313   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 314   4                      {
 315   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];  // ¼ÓÒ»ÊÇÒòÎªÔÚ¼ÆÊıÖÜÆÚÄÚ»áÓÉÓ²¼
             -ş¸øÒ»¸öÂö³å
 316   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 317   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 318   4                      {
 319   5                          Count[i][2] = buf[31] * 256 + buf[30];
 320   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 321   5                      }
 322   4                      Calculated[i] = 1;                                                                        
             -  // ¼ÆËã¹ı±êÖ¾
 323   4                      if ((Count[i][1] < (37 * Refresh_Time)) && (Count[i][2] < (37 * Refresh_Time)) && (i < 7))
             -  // Á¿³ÌÇĞ»»Ç°7¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 324   4                      {
 325   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 326   5                          Channel_Detector[i][1] = 3;
 327   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 328   5                      }
 329   4                      if ((Count[i][1] < (28 * Refresh_Time)) && (Count[i][2] < (28 * Refresh_Time)) && (i == 7)
             -)  // Á¿³ÌÇĞ»»µÚ°Ë¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 330   4                      {
 331   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 332   5                          Channel_Detector[i][1] = 3;
 333   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 334   5                      }
 335   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 336   4                      Channel_Display[i] = 4;
 337   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 338   4                  }
 339   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 340   3                  {
 341   4                      Count[i][0] = Count[i][1];
 342   4                      Count[i][1] = Count[i][2];
 343   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 344   4                      {
 345   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 346   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 347   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 348   4                      {
 349   5                          Count[i][2] = buf[31] * 256 + buf[30];
 350   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 351   5                      }
 352   4                      Calculated[i] = 1;                                                                        
             -      // ¼ÆËã¹ı±êÖ¾
 353   4                      if ((Count[i][1] > (5719 * Refresh_Time)) && (Count[i][2] > (5719 * Refresh_Time)) && (i <
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 7   

             - 7))  // Á¿³ÌÇĞ»»
 354   4                      {
 355   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 356   5                          Channel_Detector[i][1] = 4;
 357   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 358   5                      }
 359   4                      if ((Count[i][1] > (7447 * Refresh_Time)) && (Count[i][2] > (7447 * Refresh_Time)) && (i =
             -= 7))  // Á¿³ÌÇĞ»»
 360   4                      {
 361   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 362   5                          Channel_Detector[i][1] = 4;
 363   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 364   5                      }
 365   4                      if (((Count[i][1] < (35 * Refresh_Time)) && (Count[i][2] < (35 * Refresh_Time))) && (i != 
             -7))  // µÚÆß¸öÌ½Í·Ö»ÓĞÁ½¸öÁ¿³Ì
 366   4                      {
 367   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 368   5                          Channel_Detector[i][1] = 2;
 369   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 370   5                      }
 371   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 372   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
 373   4                      Channel_Display[i] = 3;
 374   4                      Real_Count[i] = 0;
 375   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5719) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 376   4                          (i < 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 377   4                      {
 378   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 379   5                          Channel_Detector[i][1] = 4;
 380   5                          Display_Flag[i] = 0;
 381   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 382   5                      }
 383   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 7447) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 384   4                          (i == 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 385   4                      {
 386   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 387   5                          Channel_Detector[i][1] = 4;
 388   5                          Display_Flag[i] = 0;
 389   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 390   5                      }
 391   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 35) && (Channel_Detector[i][0
             -] == Channel_Detector[i][1]) && (i != 7)) {
 392   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 393   5                          Channel_Detector[i][1] = 2;
 394   5                          Display_Flag[i] = 0;
 395   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 396   5                      }
 397   4                  }
 398   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 399   3                  {
 400   4                      Count[i][0] = Count[i][1];
 401   4                      Count[i][1] = Count[i][2];
 402   4                      Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 403   4                      Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 404   4                      Calculated[i] = 1;                                                                   // ¼Æ
             -Ëã¹ı±êÖ¾
 405   4                      if ((Count[i][1] > (5411 * Refresh_Time)) && (Count[i][2] > (5411 * Refresh_Time)))  // Á¿
             -³ÌÇĞ»»
 406   4                      {
 407   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 8   

 408   5                          Channel_Detector[i][1] = 3;
 409   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 410   5                      }
 411   4                      if ((Count[i][1] < (158 * Refresh_Time)) && (Count[i][2] < (158 * Refresh_Time))) {
 412   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 413   5                          Channel_Detector[i][1] = 1;
 414   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 415   5                      }
 416   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 417   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
 418   4                      Channel_Display[i] = 2;
 419   4                      Real_Count[i] = 0;
 420   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5411) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]))  // Á¿³ÌÇĞ»»
 421   4                      {
 422   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 423   5                          Channel_Detector[i][1] = 3;
 424   5                          Display_Flag[i] = 0;
 425   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 426   5                      }
 427   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 158) && (Channel_Detector[i][
             -0] == Channel_Detector[i][1])) {
 428   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 429   5                          Channel_Detector[i][1] = 1;
 430   5                          Display_Flag[i] = 0;
 431   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 432   5                      }
 433   4                  }
 434   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 435   3                  {
 436   4                      Count[i][0] = Count[i][1];
 437   4                      Count[i][1] = Count[i][2];
 438   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 439   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 440   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
 441   4                      if ((Count[i][0] > (6019 * Refresh_Time)) && (Count[i][1] > (6019 * Refresh_Time)) && (Cou
             -nt[i][2] > (6019 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 442   4                      {
 443   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 444   5                          Channel_Detector[i][1] = 2;
 445   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 446   5                      }
 447   4                      if ((Count[i][0] < (2 * Refresh_Time)) && (Count[i][1] < (2 * Refresh_Time)) && (Count[i][
             -2] < (2 * Refresh_Time))) {
 448   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 449   5                          Channel_Detector[i][1] = 0;
 450   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 451   5                      }
 452   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 453   4      #if GM2_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Average_Times[i] += 1;
                              if (Average_Times[i] < 5) {
                                  switch (Average_Times[i]) {
                                  case 1:
                                      Real_Count_Display[i] = Average_Counts[i][0];
                                      break;
                                  case 2:
                                      Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
                                      break;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 9   

                                  case 3:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
                                      break;
                                  case 4:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
                                      break;
                                  }
                              }
                              if (Average_Times[i] == 5) {
                                  Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
                                                          Average_Counts[i][4] * a4;
                                  for (j = 0; j < 4; j++) {
                                      Average_Counts[i][j] = Average_Counts[i][j + 1];
                                  }
                                  Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
                              }
              #else
 481   4                      Real_Count_Display[i] = Real_Count[i];
 482   4      #endif
 483   4                      Display_Flag[i] = 1;
 484   4                      Channel_Display[i] = 1;
 485   4                      // if(Count_Times[i]==2)
 486   4                      //{
 487   4                      // Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 488   4                      // Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 489   4                      // Count_Times[i]=0;
 490   4                      // Real_Count[i]=0;
 491   4                      //}
 492   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 493   4                      //{
 494   4                      // for(j=0;j<Average_Times[i];j++)
 495   4                      //{
 496   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 497   4                      //}
 498   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
 499   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 500   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 501   4                      // Channel_Display[i]=0;
 502   4                      // if(Average_Times[i]==5)
 503   4                      //{
 504   4                      // for(j=0;j<(Average_Times[i]-1);j++)
 505   4                      //{
 506   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 507   4                      //}
 508   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 509   4                      //}
 510   4                      //}
 511   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>6019)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 512   4                      //{
 513   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 514   4                      // Channel_Detector[i][1]=2;
 515   4                      // Display_Flag[i]=0;
 516   4                      // Var_Signal1=Var_Signal1&Svar0[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬µÍµçÆ½
 517   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 518   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 10  

 519   4                      // }
 520   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)<1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))
 521   4                      //{
 522   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 523   4                      // Channel_Detector[i][1]=0;
 524   4                      // Display_Flag[i]=0;
 525   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 526   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 527   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 528   4                      // }
 529   4                  }
 530   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬2´Î¶¨Ê±¼ÆÊı3ÃëÏà¼Ó£¬5´
             -ÎÆ½»¬Æ½¾ù
 531   3                  {
 532   4                      Count[i][0] = Count[i][1];
 533   4                      Count[i][1] = Count[i][2];
 534   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 535   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 536   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
 537   4                      if ((Count[i][0] > (3 * Refresh_Time)) && (Count[i][1] > (3 * Refresh_Time)) && (Count[i][
             -2] > (3 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 538   4                      {
 539   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 540   5                          Channel_Detector[i][1] = 1;
 541   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 542   5                      }
 543   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 544   4      #if GM1_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Average_Times[i] += 1;
                              if (Average_Times[i] < 5) {
                                  switch (Average_Times[i]) {
                                  case 1:
                                      Real_Count_Display[i] = Average_Counts[i][0];
                                      break;
                                  case 2:
                                      Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
                                      break;
                                  case 3:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
                                      break;
                                  case 4:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
                                      break;
                                  }
                              } else if (Average_Times[i] == 5) {
                                  Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
                                                          Average_Counts[i][4] * a4;
                                  for (j = 0; j < 4; j++) {
                                      Average_Counts[i][j] = Average_Counts[i][j + 1];
                                  }
                                  Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
                              }
              #else
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 11  

 571   4                      Real_Count_Display[i] = Real_Count[i];
 572   4      #endif
 573   4                      Display_Flag[i] = 1;
 574   4                      Channel_Display[i] = 0;
 575   4                      // if(Count_Times[i]==2)
 576   4                      //{
 577   4                      //  Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 578   4                      //  Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 579   4                      //  Count_Times[i]=0;
 580   4                      //  Real_Count[i]=0;
 581   4                      // }
 582   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 583   4                      //{
 584   4                      // for(j=0;j<Average_Times[i];j++)
 585   4                      //{
 586   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 587   4                      //}
 588   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
 589   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 590   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 591   4                      // Channel_Display[i]=0;
 592   4                      // if(Average_Times[i]==5)
 593   4                      //{
 594   4                      // for(j=0;j<(Average_Times[i]-1);j++)
 595   4                      //{
 596   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 597   4                      //}
 598   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 599   4                      //}
 600   4                      //}
 601   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 602   4                      //{
 603   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 604   4                      // Channel_Detector[i][1]=1;
 605   4                      // Display_Flag[i]=0;
 606   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 607   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 608   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 609   4                      // }
 610   4                  }
 611   3              } else if (Channel_Detector[i][0] != Channel_Detector[i][1])  // µ±Ç°ºóÁ½´Î¼ÆÊıµÄÁ¿³Ì²»Ò»Ñù
 612   2              {
 613   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊıÒ»Ãë£¬Ö±½ÓÓÃÀ´
             -¼ÆËã
 614   3                  {
 615   4                      for (k = 0; k <= 2; k++)  // ³õÊ¼»¯µ¥´ÎÌøµµÅĞ¶Ï±äÁ¿£¬·ÀÖ¹ÒâÍâ½µµµ¡¾2024¡¿ºÃÏñÃ»Ê²Ã´±ØÒª£¬´
             -ıÈ·¶¨
 616   4                      {
 617   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 618   5                      }
 619   4                      Real_Count[i] = 0;  // Ìø×ªµ½´ËÁ¿³ÌĞèÒªÇåÁã
 620   4                      if (i < 7)          // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 621   4                      {
 622   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 623   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 624   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 625   4                      {
 626   5                          Count[i][2] = buf[31] * 256 + buf[30];
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 12  

 627   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 628   5                      }
 629   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 630   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 631   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 632   4                      Channel_Display[i] = 4;
 633   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 634   4                  }
 635   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 636   3                  {
 637   4                      for (k = 0; k <= 2; k++) {
 638   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 639   5                      }
 640   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 641   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 642   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 643   4                      {
 644   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 645   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 646   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 647   4                      {
 648   5                          Count[i][2] = buf[31] * 256 + buf[30];
 649   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 650   5                      }
 651   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 652   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 653   4                      Channel_Display[i] = 3;
 654   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 655   4                  }
 656   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 657   3                  {
 658   4                      for (k = 0; k <= 2; k++) {
 659   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 660   5                      }
 661   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 662   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 663   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 664   4                      {
 665   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 666   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 667   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 668   4                      {
 669   5                          Count[i][2] = buf[31] * 256 + buf[30];
 670   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 671   5                          Channel_Detector[i][1] = 3;
 672   5                          Channel_Detector[i][0] = 3;
 673   5                      }
 674   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 675   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 676   4                      Channel_Display[i] = 2;
 677   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 678   4                  }
 679   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 680   3                  {
 681   4                      for (k = 0; k <= 2; k++) {
 682   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 683   5                      }
 684   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 685   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 686   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 687   4                      for (j = 0; j < 10; j++) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 13  

 688   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 689   5                      }
 690   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 691   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 692   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 693   4      #if GM2_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
                              Average_Times[i] += 1;
              #else
 698   4                      Real_Count_Display[i] = Real_Count[i];
 699   4      #endif
 700   4                      Display_Flag[i] = 1;
 701   4                      Channel_Display[i] = 1;
 702   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 703   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 704   4                  }
 705   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 706   3                  {
 707   4                      for (k = 0; k <= 2; k++) {
 708   5                          Count[i][k] = 1 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 709   5                      }
 710   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 711   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 712   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 713   4                      for (j = 0; j < 10; j++) {
 714   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 715   5                      }
 716   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 717   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 718   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 719   4      #if GM1_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
                              Average_Times[i] += 1;
              #else
 724   4                      Real_Count_Display[i] = Real_Count[i];
 725   4      #endif
 726   4                      Display_Flag[i] = 1;
 727   4                      Channel_Display[i] = 0;
 728   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 729   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 730   4                  }
 731   3              }
 732   2          }
 733   1          /*½«¸ù¾İ¼ÁÁ¿ÂÊÖµÖØĞÂÉèÖÃµÄÌ½Í·ĞÅºÅ¸Ä±ä±êÖ¾Ö´ĞĞ*/
 734   1          Signal1 = Var_Signal1;  // Ì½Í·ĞÅºÅ×ª±ä
 735   1          Signal2 = Var_Signal3;  // 2016-8-26µ÷»»Var_Signal2,Var_Signal3£¬ÒòÎªÁ½ÕßÔÚÓ²¼şÉÏ±»Åª»ìÁË
 736   1          Signal3 = Var_Signal2;
 737   1          /*AC1+ÔÚÕâÀïbuf(Ê®ÁùÎ»¸ßµÍ¼ÆÊıÊı¾İ)Òª×ª»»³Éuint ÀàĞÍµÄTdataÊı¾İ,²¢ÇÒÌ½Í·ÊıÄ¿ÒªÇå³ş
 738   1          ¼ÓÈëÑ¡Ì½Í·±êÖ¾*/
 739   1          if (measure_flag)  //(1)measure_flagÔÚInit_RAMÖĞ³õÊ¼»¯±äÎª1
 740   1          {
 741   2              for (j = 0; j < 8; j++)  //(2)´æ¼ÆÊıÇøÎªbuf[3]-buf[32];Ì½Í·¸öÊı±êÖ¾
 742   2              {
 743   3      #if COUNT_FOR_DISPLAY
 744   3                  Tdata = (uint)(Count[j][2] / 3);  // Ì½Í·¼ÆÊıÂÊuint ,×ÏÉ«ÎªÈ«¾Ö±äÁ¿£¬À¶É«Îª¾Ö²¿±äÁ¿
 745   3      #else
                          Tdata = (uint)Count[j][2];
              #endif
 748   3                  jtemp = 0;                        // float
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 14  

 749   3                  yudata = 0;                       // double
 750   3                  mtemp = 0;                        // double
 751   3                  yu = 0;                           // double
 752   3                  Tbcd[5] = 0;                      // uchar Êı×é¹²12Î»£¬²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 753   3                  Tbcd[4] = 0;
 754   3                  Tbcd[3] = 0;
 755   3                  Tbcd[2] = 0;
 756   3                  Tbcd[1] = 0;
 757   3                  Tbcd[0] = 0;
 758   3                  m = j * 10;  // ±£Áô
 759   3                  /*********ÅĞ¶Ï¼ÆÊıÂÊ***********/
 760   3                  /*********Ç°Æß¸öÌ½Í·Ì½²âÆ÷ÉèÖÃ£¬È¡µÃ8253¼ÆÊıÖµ¼ÇÂ¼ÔÚTdata*/
 761   3                  /**¡¾2024¡¿¸ù¾İÍ¨µÀĞòºÅ¼ÆËã±ê¶¨²ÎÊı£¬ÓÃÓÚCPMºÍ¼ÁÁ¿ÂÊµÄ×ª»»**/
 762   3                  if (j < 7)  //(3)Ç°Æß¸öÌ½Í·¼ÈÓĞµçÀëÊÒÒ²ÓĞ¼ÆÊıÆ÷£¬µÚ°Ë¸öÖ»ÓĞµçÀëÊÒ¹Ê·Ö¿ª´¦Àí
 763   3                  {
 764   4                      Display_Flag[j] = 0;
 765   4                      if (Channel_Display[j] == 0) {
 766   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 767   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 1000000.0;
 768   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
 769   5                      } else if (Channel_Display[j] == 1) {
 770   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 771   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) / 1000000.0;
 772   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 773   5                      } else if (Channel_Display[j] == 2) {
 774   5                          Para[4] = (float)(DataThouth[m + 5] * 1000 + DataCent[m + 5] * 100 + DataTenth[m + 5] 
             -* 10 + DataGe[m + 5]);  // µ÷½Ú²ÎÊı
 775   5                          Para[5] = (float)(DataThouth[m + 6] * 1000 + DataCent[m + 6] * 100 + DataTenth[m + 6] 
             -* 10 + DataGe[m + 6]) / 1000.0;
 776   5                          DoseRata[j] = (float)(Para[5] * ((float)Real_Count_Display[j] - Para[4]));
 777   5                      } else if (Channel_Display[j] == 3) {
 778   5                          Para[6] = (float)(DataThouth[m + 7] * 1000 + DataCent[m + 7] * 100 + DataTenth[m + 7] 
             -* 10 + DataGe[m + 7]);  // µ÷½Ú²ÎÊı
 779   5                          Para[7] = (float)(DataThouth[m + 8] * 1000 + DataCent[m + 8] * 100 + DataTenth[m + 8] 
             -* 10 + DataGe[m + 8]) / 10.0;
 780   5                          DoseRata[j] = (float)(Para[7] * ((float)Real_Count_Display[j] - Para[6]));
 781   5                      } else if (Channel_Display[j] == 4) {
 782   5                          Para[8] = (float)(DataThouth[m + 9] * 1000 + DataCent[m + 9] * 100 + DataTenth[m + 9] 
             -* 10 + DataGe[m + 9]);  // µ÷½Ú²ÎÊı
 783   5                          Para[9] = (float)((DataThouth[m + 10] * 1000 + DataCent[m + 10] * 100 + DataTenth[m + 
             -10] * 10 + DataGe[m + 10]) * 10.0);
 784   5                          DoseRata[j] = (float)(Para[9] * ((float)Real_Count_Display[j] - Para[8]));
 785   5                      }
 786   4                  } else if (j == 7) {
 787   4                      Display_Flag[j] = 0;
 788   4                      if (Channel_Display[j] == 3) {
 789   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 790   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 10.0;
 791   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
 792   5                      } else if (Channel_Display[j] == 4) {
 793   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 794   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) * 10.0;
 795   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 796   5                      }
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 15  

 797   4                  }
 798   3                  /**********µ¥Î»»»ËãºóÎªjtemp************/
 799   3                  if (DoseRata[j] < 0)  // ĞŞ¸Ä2012.6.15Í¨¹ı¾ùÖµ¼ÆËã
 800   3                  {
 801   4                      jtemp = 0.0;
 802   4                      Flag_dw = 1;
 803   4                  } else if (DoseRata[j] >= 0)  // µ¥Î»ÎªuGy/h
 804   3                  {
 805   4                      if (DoseRata[j] < 1000)  // Mean_Value<1000±íÊ¾µ¥Î»ÎªuGy/h
 806   4                      {
 807   5                          jtemp = (float)DoseRata[j];
 808   5                          Flag_dw = 1;
 809   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 1000000))  // 1000<Mean_Value<1000000±í
             -Ê¾mGy/h
 810   4                      {
 811   5                          jtemp = (float)(DoseRata[j] / 1000);
 812   5                          Flag_dw = 2;
 813   5                      } else if (DoseRata[j] >= 1000000)  // Mean_Value>=1000000±íÊ¾Gy/h
 814   4                      {
 815   5                          jtemp = (float)(DoseRata[j] / 1000000);
 816   5                          Flag_dw = 3;
 817   5                      }
 818   4                  }
 819   3                  /*****DCS·¢ËÍÊı¾İ×¼±¸****/
 820   3                  if (DoseRata[j] < 0)  // Èô¼ÆËã¼ÁÁ¿Ğ¡ÓÚÁãÏòDCS·¢ËÍ0
 821   3                  {
 822   4                      DCS_Send[j * 4 + 4] = 0x30;
 823   4                      DCS_Send[j * 4 + 5] = 0x30;
 824   4                      DCS_Send[j * 4 + 6] = 0x30;
 825   4                      DCS_Send[j * 4 + 7] = 0x30;
 826   4                  } else if (DoseRata[j] >= 0) {
 827   4                      if (DoseRata[j] < 1) {
 828   5                          temp = (float)DoseRata[j] * 1000;
 829   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 830   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 831   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 832   5                          DCS_Send[j * 4 + 7] = 0x30;
 833   5                      } else if ((DoseRata[j] >= 1) && (DoseRata[j] < 10)) {
 834   5                          temp = (float)DoseRata[j] * 100;
 835   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 836   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 837   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 838   5                          DCS_Send[j * 4 + 7] = 0x31;
 839   5                      } else if ((DoseRata[j] >= 10) && (DoseRata[j] < 100)) {
 840   5                          temp = (float)DoseRata[j] * 10;
 841   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 842   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 843   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 844   5                          DCS_Send[j * 4 + 7] = 0x32;
 845   5                      } else if ((DoseRata[j] >= 100) && (DoseRata[j] < 1000)) {
 846   5                          temp = (float)DoseRata[j];
 847   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 848   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 849   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 850   5                          DCS_Send[j * 4 + 7] = 0x33;
 851   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 10000)) {
 852   5                          temp = (float)DoseRata[j] / 10.0;
 853   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 854   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 855   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 856   5                          DCS_Send[j * 4 + 7] = 0x34;
 857   5                      } else if ((DoseRata[j] >= 10000) && (DoseRata[j] < 100000)) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 16  

 858   5                          temp = (float)DoseRata[j] / 100.0;
 859   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 860   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 861   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 862   5                          DCS_Send[j * 4 + 7] = 0x35;
 863   5                      } else if ((DoseRata[j] >= 100000) && (DoseRata[j] < 1000000)) {
 864   5                          temp = (float)DoseRata[j] / 1000.0;
 865   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 866   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 867   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 868   5                          DCS_Send[j * 4 + 7] = 0x36;
 869   5                      } else if ((DoseRata[j] >= 1000000) && (DoseRata[j] < 10000000)) {
 870   5                          temp = (float)DoseRata[j] / 10000.0;
 871   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 872   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 873   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 874   5                          DCS_Send[j * 4 + 7] = 0x37;
 875   5                      } else if ((DoseRata[j] >= 10000000) && (DoseRata[j] < 100000000)) {
 876   5                          temp = (float)DoseRata[j] / 100000.0;
 877   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 878   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 879   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 880   5                          DCS_Send[j * 4 + 7] = 0x38;
 881   5                      } else if ((DoseRata[j] >= 100000000) && (DoseRata[j] < 1000000000)) {
 882   5                          temp = (float)DoseRata[j] / 1000000.0;
 883   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 884   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 885   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 886   5                          DCS_Send[j * 4 + 7] = 0x39;
 887   5                      }
 888   4                  }
 889   3                  /***********¼ÁÁ¿ÂÊ×ª»»µ¥Î»ºó×ª»»³É¿ÉÒÔÏÔÊ¾µÄBCDÂë*************/
 890   3                  if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && 
             -(Tbcd[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
 891   3                  {
 892   4                      Tbcd[5] = (uchar)(((int)jtemp) / 100);       // °ÙÎ»
 893   4                      Tbcd[4] = (uchar)(((int)jtemp) % 100 / 10);  // Ê®Î»
 894   4                      Tbcd[3] = (uchar)(((int)jtemp) % 100 % 10);  // ¸öÎ»
 895   4                      count_temp = (jtemp - (int)jtemp) * 1000;    // ¼ÆËãĞ¡ÓÚ1µÄ²¿·Ö£¬°ÑĞ¡Êı²¿·Ö±ä´ó£¬±£ÁôÈıÎ»Ğ
             -¡Êı
 896   4                      Tbcd[2] = (uchar)(count_temp / 100);         // Ğ¡Ğ¡ÊıÊ®·ÖÎ»
 897   4                      Tbcd[1] = (uchar)(count_temp % 100 / 10);    // Ğ¡Êı°Ù·ÖÎ»
 898   4                      Tbcd[0] = (uchar)(count_temp % 100 % 10);    // Ğ¡ÊıÇ§·ÖÎ»
 899   4                      if (Flag_dw == 1)                            // ¸ù¾İTbcd[]¼ÆËãyudecide(float)ÓÃÀ´ÅĞ¶Ï¼ÁÁ¿Â
             -ÊÊÇ·ñ³¬¹ıãĞÖµ
 900   4                          yudecide = (float)(Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] * 
             -0.01 + Tbcd[0] * 0.001);
 901   4                      if (Flag_dw == 2)
 902   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000);
 903   4                      if (Flag_dw == 3)
 904   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000000);
 905   4                  }
 906   3                  /***********ÅĞ¶ÏãĞÖµ²¢±¨¾¯*************/
 907   3                  mtemp = (YuThouth[j] + YuCent[j] * 0.1 + YuTenth[j] * 0.01);  // ÔİÊ±Ã»¸ù¾İÎ»ÊıĞŞ¸Ä2012.6.15
 908   3                  yu = (double)(pow(10, YuGe[j]));
 909   3                  yudata = (double)(mtemp * yu);
 910   3                  if (yudecide >= yudata)  // Èç¹û¼ÆÊı³¬¹ıÄ³Ò»¸ö·¶Î§£¬ÔòÉùÒô±¨¾¯
 911   3                  {
 912   4                      if ((Judge_Speak == 0) || (Speak_Alarm() == 1))  // ·äÃùÆ÷±¨¾¯£¬Speak_Alarm·µ»Ø1·äÃùÆ÷¹¤×÷
 913   4                      {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 17  

 914   5                          Flag_Warn = 1;  // ±¨¾¯±êÖ¾ÖÃÒ»
 915   5                      }
 916   4                      Flag_need_Flash[j] = 1;  // LEDÉÁË¸±êÖ¾ÖÃ1
 917   4                      State_Flash[j] = 1;
 918   4                      Var_Led = Var_Led & Svar0[j];  // LED±¨¾¯Ö¸Ê¾µÆ£¨char£©Svar0[8]={0xFE,0xFD,0xFB,0xF7,0xEF,
             -0xDF,0xBF,0x7F}
 919   4                  } else if (yudecide < yudata) {
 920   4                      Flag_need_Flash[j] = 0;
 921   4                      State_Flash[j] = 0;
 922   4                      Var_Led = Var_Led | Svar1[j];
 923   4                  }
 924   3                  /*AI1*¼ÁÁ¿ÂÊÏÔÊ¾Ó¦µ±ÔÚÌ½²âÆ÷±êÖ¾¸Ä±äÖ®Ç°******¼ÁÁ¿ÂÊÏÔÊ¾**********/
 925   3                  // if(Channel_Detector[j]==0)
 926   3                  //{
 927   3                  //  Txtext(10,13+(j*58),"Gh");                                                  //AH1ÏÔÊ¾Ì½Í·
 928   3                  //}
 929   3                  // else
 930   3                  //{
 931   3                  // Txtext(10,13+(j*58),"Dh");
 932   3                  //}
 933   3                  /*AI1*******¼ÁÁ¿ÂÊÏÔÊ¾**********/
 934   3                  if (Flag_need_Flash[j] == 0) {
 935   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
 936   5                          Txtext(10, 13 + (j * 58), "GM");  // AH1ÏÔÊ¾Ì½Í·
 937   5                      } else {
 938   5                          Txtext(10, 13 + (j * 58), "DL");
 939   5                      }
 940   4                      Tnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
 941   4                      Txtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
 942   4                      Tnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
 943   4                      Tnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
 944   4                      Tnumber(390, 13 + (j * 58), Average_Times[j]);
 945   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
 946   4                      {
 947   5                          Tnumber(130, 13 + (j * 58), Tbcd[5]);
 948   5                          Tnumber(160, 13 + (j * 58), Tbcd[4]);
 949   5                          Tnumber(190, 13 + (j * 58), Tbcd[3]);
 950   5                          Txtext(220, 13 + (j * 58), ".");
 951   5                          Tnumber(240, 13 + (j * 58), Tbcd[2]);
 952   5                          Tnumber(270, 13 + (j * 58), Tbcd[1]);
 953   5                          Tnumber(300, 13 + (j * 58), Tbcd[0]);
 954   5                          if (Tdata < 10)                          // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
 955   5                              Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
 956   5                          else if ((Tdata >= 10) && (Tdata < 100))
 957   5                              Tnumber(556, 13 + (j * 58), Tdata);
 958   5                          else if ((Tdata >= 100) && (Tdata < 1000))
 959   5                              Tnumber(536, 13 + (j * 58), Tdata);
 960   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
 961   5                              Tnumber(516, 13 + (j * 58), Tdata);
 962   5                          else if (Tdata >= 10000)
 963   5                              Tnumber(496, 13 + (j * 58), Tdata);
 964   5                      } else {
 965   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
 966   5                          {
 967   6                              Tnumber(160, 13 + (j * 58), Tbcd[4]);
 968   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
 969   6                              Txtext(220, 13 + (j * 58), ".");
 970   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);
 971   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
 972   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
 973   6                              if (Tdata < 10)
 974   6                                  Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 18  

 975   6                              else if ((Tdata >= 10) && (Tdata < 100))
 976   6                                  Tnumber(556, 13 + (j * 58), Tdata);
 977   6                              else if ((Tdata >= 100) && (Tdata < 1000))
 978   6                                  Tnumber(536, 13 + (j * 58), Tdata);
 979   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
 980   6                                  Tnumber(516, 13 + (j * 58), Tdata);
 981   6                              else if (Tdata >= 10000)
 982   6                                  Tnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
 983   6                          } else                                       // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
 984   5                          {
 985   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
 986   6                              Txtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
 987   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
 988   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
 989   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
 990   6                              if (Tdata < 10)
 991   6                                  Tnumber(576, 13 + (j * 58), Tdata);   // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
 992   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
 993   6                                  Tnumber(556, 13 + (j * 58), Tdata);
 994   6                              else if ((Tdata >= 100) && (Tdata < 1000))
 995   6                                  Tnumber(536, 13 + (j * 58), Tdata);
 996   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
 997   6                                  Tnumber(516, 13 + (j * 58), Tdata);
 998   6                              else if (Tdata >= 10000)
 999   6                                  Tnumber(496, 13 + (j * 58), Tdata);
1000   6                          }
1001   5                      }
1002   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1003   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1004   4                      {
1005   5                          Txtext(340, 13 + (j * 58), "u");
1006   5                      } else if (Flag_dw == 2) {
1007   5                          Txtext(340, 13 + (j * 58), "m");
1008   5                      } else if (Flag_dw == 3) {
1009   5                          Txtext(340, 13 + (j * 58), "G");
1010   5                      }
1011   4                      Alarm();  // ±¨¾¯
1012   4                  }
1013   3                  if (Flag_need_Flash[j] == 1) {
1014   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
1015   5                          Trxtext(7, 13 + (j * 58), "  ");
1016   5                          Trxtext(10, 13 + (j * 58), "GM                        ");  // AH1ÏÔÊ¾Ì½Í·
1017   5                      } else {
1018   5                          Trxtext(7, 13 + (j * 58), "  ");
1019   5                          Trxtext(10, 13 + (j * 58), "DL                        ");
1020   5                      }
1021   4                      Trnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
1022   4                      Trxtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
1023   4                      Trnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
1024   4                      Trnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
1025   4                      Trnumber(390, 13 + (j * 58), Average_Times[j]);
1026   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
1027   4                      {
1028   5                          Trnumber(130, 13 + (j * 58), Tbcd[5]);
1029   5                          Trnumber(160, 13 + (j * 58), Tbcd[4]);
1030   5                          Trnumber(190, 13 + (j * 58), Tbcd[3]);
1031   5                          Trxtext(220, 13 + (j * 58), ".");
1032   5                          Trnumber(240, 13 + (j * 58), Tbcd[2]);
1033   5                          Trnumber(270, 13 + (j * 58), Tbcd[1]);
1034   5                          Trnumber(300, 13 + (j * 58), Tbcd[0]);
1035   5                          if (Tdata < 10)                           // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
1036   5                              Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 19  

1037   5                          else if ((Tdata >= 10) && (Tdata < 100))
1038   5                              Trnumber(556, 13 + (j * 58), Tdata);
1039   5                          else if ((Tdata >= 100) && (Tdata < 1000))
1040   5                              Trnumber(536, 13 + (j * 58), Tdata);
1041   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
1042   5                              Trnumber(516, 13 + (j * 58), Tdata);
1043   5                          else if (Tdata >= 10000)
1044   5                              Trnumber(496, 13 + (j * 58), Tdata);
1045   5                      } else {
1046   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
1047   5                          {
1048   6                              Trnumber(160, 13 + (j * 58), Tbcd[4]);
1049   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1050   6                              Trxtext(220, 13 + (j * 58), ".");
1051   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);
1052   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1053   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1054   6                              if (Tdata < 10)
1055   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1056   6                              else if ((Tdata >= 10) && (Tdata < 100))
1057   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1058   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1059   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1060   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1061   6                                  Trnumber(516, 13 + (j * 58), Tdata);
1062   6                              else if (Tdata >= 10000)
1063   6                                  Trnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1064   6                          } else                                        // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
1065   5                          {
1066   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1067   6                              Trxtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
1068   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
1069   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1070   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1071   6                              if (Tdata < 10)
1072   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1073   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
1074   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1075   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1076   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1077   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1078   6                                  Trnumber(516, 13 + (j * 58), Tdata);
1079   6                              else if (Tdata >= 10000)
1080   6                                  Trnumber(496, 13 + (j * 58), Tdata);
1081   6                          }
1082   5                      }
1083   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1084   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1085   4                      {
1086   5                          Trxtext(340, 13 + (j * 58), "u");
1087   5                      } else if (Flag_dw == 2) {
1088   5                          Trxtext(340, 13 + (j * 58), "m");
1089   5                      } else if (Flag_dw == 3) {
1090   5                          Trxtext(340, 13 + (j * 58), "G");
1091   5                      }
1092   4                      Alarm();  // ±¨¾¯
1093   4                  }
1094   3                  send_buf[8 * j] = Tbcd[5];  // ÏòNIM-B·¢ËÍÏÔÊ¾Êı¾İ
1095   3                  send_buf[8 * j + 1] = Tbcd[4];
1096   3                  send_buf[8 * j + 2] = Tbcd[3];
1097   3                  send_buf[8 * j + 3] = Tbcd[2];
1098   3                  send_buf[8 * j + 4] = Tbcd[1];
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 20  

1099   3                  send_buf[8 * j + 5] = Tbcd[0];
1100   3                  send_buf[8 * j + 6] = Flag_dw;             // ·¢ËÍµ¥Î»±êÖ¾
1101   3                  send_buf[8 * j + 7] = Flag_need_Flash[j];  // LEDÉÁË¸±êÖ¾
1102   3              }
1103   2              for (j = 0; j < 8; j++)  // ÖÃDCSÊı¾İµÄ±¨¾¯ĞÅºÅ
1104   2              {
1105   3                  if (Flag_need_Flash[j]) {
1106   4                      DCS_Send[64] = DCS_Send[64] | Svar1[j];
1107   4                  } else {
1108   4                      DCS_Send[64] = DCS_Send[64] & Svar0[j];
1109   4                  }
1110   3              }  // 8¸öÌ½Í·¾ùÏÔÊ¾Ö´ĞĞÍê
1111   2              Flag_Warn_Count = 1;
1112   2              jishucount++;           // ¼ÆÊı´ÎÊıÔö¼Ó£¨ËãÆ½¾ùÖµÊ±ÓÃ£©
1113   2              if (jishucount == 255)  // ¼ÆÊı´ÎÊıÒòÎªÊÇcharĞÍ±äÁ¿£¬×î¶àÖ§³Ö255¸ö£¬ËùÒÔÒªÖÃÁã
1114   2                  jishucount = 8;
1115   2              if (jishucount > 4)
1116   2                  Flag_Meant = 1;  // Ç°Îå´ÎµÄÈ¡Öµ²»Òª£¬µÚÎå´Î²Å¿ªÊ¼Òª£¬ÖÃFlag_Meant=1£»·ñÔò¾ùÖÃ0
1117   2              else
1118   2                  Flag_Meant = 0;
1119   2              // shortdelay(5000);                                                             //ÑÓÊ±
1120   2              // for(i=0;i<33;i++)//ÏÔÊ¾ÍêÇå0
1121   2              // buf[i]=0;
1122   2          }  // ²âÁ¿±êÖ¾
1123   1          else {
1124   2              jishuguan_data = 0;   // needthinkwhetherneed?4.21,int¼ÆÊı¹ÜÊı¾İ£¬
1125   2              dianlishi_data = 0;   // µçÀëÊÒÊı¾İ
1126   2              jishuguan_rata = 0;   // ¼ÆÊı¹Ü¼ÆÊıÂÊ
1127   2              jishuguan_jtemp = 0;  // ¼ÆÊı¹Ü¼ÁÁ¿Öµ(µ¥Î»×ª»»ºó)
1128   2              dianlishi_jtemp = 0;  // µçÀëÊÒ¼ÁÁ¿Öµ£¨µ¥Î»×ª»»ºó£©
1129   2              Tbcd[11] = 0;
1130   2              Tbcd[10] = 0;
1131   2              Tbcd[9] = 0;
1132   2              Tbcd[8] = 0;
1133   2              Tbcd[7] = 0;
1134   2              Tbcd[6] = 0;
1135   2              Tbcd[5] = 0;
1136   2              Tbcd[4] = 0;
1137   2              Tbcd[3] = 0;
1138   2              Tbcd[2] = 0;
1139   2              Tbcd[1] = 0;
1140   2              Tbcd[0] = 0;
1141   2              j = 10 * biaoding_input - 7;                                                                  // b
             -iaodin_inputÎªÒª±ê¶¨µÄÌ½Í·ĞòºÅ
1142   2              jishuguan_data = buf[4 * biaoding_input - 1] * 256 + buf[4 * biaoding_input - 2];             // Ï
             -àµ±ÓÚTdata
1143   2              jishuguan_rata = jishuguan_data * 12;                                                         // ¼
             -ÆÊıÂÊ£¬Ö±½Ó³ËÒÔ12?
1144   2              dianlishi_data = buf[4 * biaoding_input + 1] * 256 + buf[4 * biaoding_input];                 // µ
             -çÀëÊÒTdata
1145   2              Para[0] = (float)(DataThouth[j] * 1000 + DataCent[j] * 100 + DataTenth[j] * 10 + DataGe[j]);  // µ
             -÷½Ú²ÎÊı
1146   2              Para[1] = (float)((float)(DataThouth[j + 1] * 1000 + DataCent[j + 1] * 100 + DataTenth[j + 1] * 10
             - + DataGe[j + 1]) / 1000000);
1147   2              jishuguan_DoseRata = (float)(Para[1] * (jishuguan_rata - Para[0]));
1148   2              if (jishuguan_DoseRata < 0)
1149   2                  jishuguan_DoseRata = 0.0;
1150   2              jishuguan_jtemp = (float)jishuguan_DoseRata;
1151   2              if ((Tbcd[11] <= 9) && (Tbcd[10] <= 9) && (Tbcd[9] <= 9) && (Tbcd[8] <= 9) && (Tbcd[7] <= 9) && (T
             -bcd[6] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1152   2              {
1153   3                  Tbcd[11] = (uchar)(((int)jishuguan_jtemp) / 100);       // Ç§Î»
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 21  

1154   3                  Tbcd[10] = (uchar)(((int)jishuguan_jtemp) % 100 / 10);  // °ÙÎ»
1155   3                  Tbcd[9] = (uchar)(((int)jishuguan_jtemp) % 100 % 10);   // ¸öÎ»
1156   3                  jishuguan_count_temp = (jishuguan_jtemp - (int)jishuguan_jtemp) * 1000;
1157   3                  Tbcd[8] = (uchar)(jishuguan_count_temp / 100);
1158   3                  Tbcd[7] = (uchar)(jishuguan_count_temp % 100 / 10);
1159   3                  Tbcd[6] = (uchar)(jishuguan_count_temp % 100 % 10);
1160   3              }
1161   2              Para[2] = (float)(DataThouth[j + 2] * 1000 + DataCent[j + 2] * 100 + DataTenth[j + 2] * 10 + DataG
             -e[j + 2]);  // µ÷½Ú²ÎÊı
1162   2              Para[3] = (float)((float)(DataThouth[j + 3] * 1000 + DataCent[j + 3] * 100 + DataTenth[j + 3] * 10
             - + DataGe[j + 3]) / 1000);
1163   2              dianlishi_DoseRata = (float)(Para[3] * (dianlishi_data - Para[2]));
1164   2              if (dianlishi_DoseRata < 0)
1165   2                  dianlishi_DoseRata = 0.0;
1166   2              dianlishi_jtemp = (float)(dianlishi_DoseRata / 1000);
1167   2              if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && (Tbc
             -d[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1168   2              {
1169   3                  Tbcd[5] = (uchar)(((int)dianlishi_jtemp) / 100);       // Ç§Î»
1170   3                  Tbcd[4] = (uchar)(((int)dianlishi_jtemp) % 100 / 10);  // °ÙÎ»
1171   3                  Tbcd[3] = (uchar)(((int)dianlishi_jtemp) % 100 % 10);  // ¸öÎ»
1172   3                  dianlishi_count_temp = (dianlishi_jtemp - (int)dianlishi_jtemp) * 1000;
1173   3                  Tbcd[2] = (uchar)(dianlishi_count_temp / 100);
1174   3                  Tbcd[1] = (uchar)(dianlishi_count_temp % 100 / 10);
1175   3                  Tbcd[0] = (uchar)(dianlishi_count_temp % 100 % 10);
1176   3              }
1177   2              Txtext(200, 58, "±ê¶¨Ì½Í·");
1178   2              Tnumber(400, 58, biaoding_input);
1179   2              Txtext(10, 116, "¸Ç¸ï¹Ü");
1180   2              ;
1181   2              Txtext(160, 116, ":");
1182   2              Txtext(220, 174, "uGy/h");
1183   2              Txtext(520, 174, "CPM");
1184   2              Txtext(10, 290, "µçÀëÊÒ");
1185   2              ;
1186   2              Txtext(160, 290, ":");
1187   2              Txtext(220, 348, "mGy/h");
1188   2              Txtext(520, 348, "CP5S");
1189   2              if (Tbcd[11] != 0) {
1190   3                  Tnumber(10, 174, Tbcd[11]);
1191   3                  Tnumber(40, 174, Tbcd[10]);
1192   3                  Tnumber(70, 174, Tbcd[9]);
1193   3                  Txtext(100, 174, ".");
1194   3                  Tnumber(130, 174, Tbcd[8]);
1195   3                  Tnumber(160, 174, Tbcd[7]);
1196   3                  Tnumber(190, 174, Tbcd[6]);
1197   3                  if (jishuguan_data < 10)
1198   3                      Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1199   3                  else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1200   3                      Tnumber(460, 174, jishuguan_data);
1201   3                  else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1202   3                      Tnumber(430, 174, jishuguan_data);
1203   3                  else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1204   3                      Tnumber(400, 174, jishuguan_data);
1205   3                  else if (jishuguan_data >= 10000)
1206   3                      Tnumber(370, 174, jishuguan_data);
1207   3              } else {
1208   3                  if (Tbcd[10] != 0) {
1209   4                      Tnumber(40, 174, Tbcd[10]);
1210   4                      Tnumber(70, 174, Tbcd[9]);
1211   4                      Txtext(100, 174, ".");
1212   4                      Tnumber(130, 174, Tbcd[8]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 22  

1213   4                      Tnumber(160, 174, Tbcd[7]);
1214   4                      Tnumber(190, 174, Tbcd[6]);
1215   4                      if (jishuguan_data < 10)
1216   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1217   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1218   4                          Tnumber(460, 174, jishuguan_data);
1219   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1220   4                          Tnumber(430, 174, jishuguan_data);
1221   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1222   4                          Tnumber(400, 174, jishuguan_data);
1223   4                      else if (jishuguan_data >= 10000)
1224   4                          Tnumber(370, 174, jishuguan_data);
1225   4                  } else {
1226   4                      Tnumber(70, 174, Tbcd[9]);
1227   4                      Txtext(100, 174, ".");
1228   4                      Tnumber(130, 174, Tbcd[8]);
1229   4                      Tnumber(160, 174, Tbcd[7]);
1230   4                      Tnumber(190, 174, Tbcd[6]);
1231   4                      if (jishuguan_data < 10)
1232   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1233   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1234   4                          Tnumber(460, 174, jishuguan_data);
1235   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1236   4                          Tnumber(430, 174, jishuguan_data);
1237   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1238   4                          Tnumber(400, 174, jishuguan_data);
1239   4                      else if (jishuguan_data >= 10000)
1240   4                          Tnumber(370, 174, jishuguan_data);
1241   4                  }
1242   3              }
1243   2              if (Tbcd[5] != 0) {
1244   3                  Tnumber(10, 348, Tbcd[5]);
1245   3                  Tnumber(40, 348, Tbcd[4]);
1246   3                  Tnumber(70, 348, Tbcd[3]);
1247   3                  Txtext(100, 348, ".");
1248   3                  Tnumber(130, 348, Tbcd[2]);
1249   3                  Tnumber(160, 348, Tbcd[1]);
1250   3                  Tnumber(190, 348, Tbcd[0]);
1251   3                  if (dianlishi_data < 10)
1252   3                      Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1253   3                  else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1254   3                      Tnumber(460, 348, dianlishi_data);
1255   3                  else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1256   3                      Tnumber(430, 348, dianlishi_data);
1257   3                  else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1258   3                      Tnumber(400, 348, dianlishi_data);
1259   3                  else if (dianlishi_data >= 10000)
1260   3                      Tnumber(370, 348, dianlishi_data);
1261   3              } else {
1262   3                  if (Tbcd[4] != 0) {
1263   4                      Tnumber(40, 348, Tbcd[4]);
1264   4                      Tnumber(70, 348, Tbcd[3]);
1265   4                      Txtext(100, 348, ".");
1266   4                      Tnumber(130, 348, Tbcd[2]);
1267   4                      Tnumber(160, 348, Tbcd[1]);
1268   4                      Tnumber(190, 348, Tbcd[0]);
1269   4                      if (dianlishi_data < 10)
1270   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1271   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1272   4                          Tnumber(460, 348, dianlishi_data);
1273   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1274   4                          Tnumber(430, 348, dianlishi_data);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 23  

1275   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1276   4                          Tnumber(400, 348, dianlishi_data);
1277   4                      else if (dianlishi_data >= 10000)
1278   4                          Tnumber(370, 348, dianlishi_data);
1279   4                  } else {
1280   4                      Tnumber(70, 348, Tbcd[3]);
1281   4                      Txtext(100, 348, ".");
1282   4                      Tnumber(130, 348, Tbcd[2]);
1283   4                      Tnumber(160, 348, Tbcd[1]);
1284   4                      Tnumber(190, 348, Tbcd[0]);
1285   4                      if (dianlishi_data < 10)
1286   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1287   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1288   4                          Tnumber(460, 348, dianlishi_data);
1289   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1290   4                          Tnumber(430, 348, dianlishi_data);
1291   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1292   4                          Tnumber(400, 348, dianlishi_data);
1293   4                      else if (dianlishi_data >= 10000)
1294   4                          Tnumber(370, 348, dianlishi_data);
1295   4                  }
1296   3              }
1297   2          }
1298   1      }
1299          
1300          /************************************
1301           *¶ÌÑÓÊ±
1302           ************************************/
1303          void shortdelay(uint i)
1304          {
1305   1          uint k;
1306   1          uint n;
1307   1          for (k = 0; k < i; k++)
1308   1              for (n = 200; n > 0; n--)
1309   1                  ;
1310   1      }
1311          
1312          /********************************
1313           *Ö¸Ê¾µÆºÍ±¨¾¯
1314           ********************************/
1315          void Alarm()
1316          {
1317   1          uchar n;
1318   1          for (n = 0; n < 10; n++) {
1319   2              Led573 = Var_Led;
1320   2              if (Flag_Warn == 1)  // ÉùÒô±¨¾¯
1321   2              {
1322   3                  Speak = 1;
1323   3              }
1324   2          }
1325   1      }
1326          
1327          /*******************************
1328           *¸üĞÂÖ¸Ê¾µÆ×´Ì¬
1329           *******************************/
1330          void Updata_Flash(uchar j)
1331          {
1332   1          if (Flag_need_Flash[j]) {
1333   2              if (State_Flash[j] == 1) {
1334   3                  State_Flash[j] = 0;
1335   3              } else {
1336   3                  State_Flash[j] = 1;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/21/2024 10:17:25 PAGE 24  

1337   3              }
1338   2          } else
1339   1              State_Flash[j] = 0;
1340   1      }
1341          
1342          /***********************************
1343           *Ö¸Ê¾µÆÉÁË¸
1344           ************************************/
1345          void Led_Flash(void)
1346          {
1347   1          uchar i;
1348   1          for (i = 0; i < 8; i++) {
1349   2              Updata_Flash(i);                                  // ×´Ì¬È¡·´
1350   2              Led_Disp(i, Flag_need_Flash[i], State_Flash[i]);  // µÆ×´Ì¬ÏÔÊ¾
1351   2          }
1352   1      }
1353          
1354          /************************************
1355           *Ö¸Ê¾µÆ×´Ì¬ÏÔÊ¾
1356           *************************************/
1357          void Led_Disp(uchar Num, uchar Flag, uchar State)
1358          {
1359   1          if (Flag) {
1360   2              if (State) {
1361   3                  Var_Led = Var_Led & Svar0[Num];  // Ö¸Ê¾µÆÁÁ
1362   3                  Led573 = Var_Led;
1363   3                  if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1364   3                  {
1365   4                      Speak = 0;  // ·äÃùÆ÷Ïì
1366   4                      shortdelay(100);
1367   4                  }
1368   3                  return;
1369   3              }
1370   2          }
1371   1          Var_Led = Var_Led | Svar1[Num];  // Ö¸Ê¾µÆÃğ
1372   1          Led573 = Var_Led;
1373   1          if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1374   1          {
1375   2              Speak = 1;  // ·äÃùÆ÷²»Ïì
1376   2              shortdelay(100);
1377   2          }
1378   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  20994    ----
   CONSTANT SIZE    =    153    ----
   XDATA SIZE       =    627      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     48      24
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
