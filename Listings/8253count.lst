C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 8253COUNT
OBJECT MODULE PLACED IN .\Objects\8253count.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 8253count.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\8253count.lst) TABS(2) OBJECT(.\Objects\8253count.obj)

line level    source

   1          /********************************************************************************************
   2          *ÃèÊö£º
   3          *   8253¼ÆÊıÉèÖÃ
   4          *¹¦ÄÜ£º
   5          *   1.´Ó8253ÖĞ¶ÁÈ¡¼ÆÊı£¬Ã¿¸ö8253ÖĞº¬ÓĞ3¸ö¼ÆÊıÆ÷£¬Îå¸ö8253¼Æ15¸öÌ½Í·µÄ¼ÆÊı£¬
   6          *     Ç°Æß¸öÌ½Í·ÊÇË«Ì½Í·£¨µÍ¼ÆÊıÌ½Í·ºÍ¸ß¼ÆÊıÌ½Í·£©£¬µÚ°Ë¸öÌ½Í·ÊÇµ¥Ì½Í·£¨¸ß¼ÆÊıÌ½Í·£©£¬
   7          *     ¸ù¾İ¼ÆÊıÂÊÑ¡ÔñÄÄ¸öÌ½Í·¹¤×÷£»
   8          *   2.T0¶¨Ê±ÖĞ¶Ï
   9          *     T0¹¤×÷ÔÚ16Î»×Ô¶¯ÖØÔØÄ£Ê½£¬ÏòÉÏ¼ÆÊı£¬Ã¿Ñ­»·Ò»´Î£¬×Ü¶¨Ê±5Ms,¼ÆÊı³õÖµDC00£¬¾§Õñ22.1184M£»
  10          *   3.¶¨Ê±µ½£¬¶ÁÈ¡¼ÆÊı£¬¸ù¾İÉè¶¨µÄ²ÎÊı£¬ÏÔÊ¾¸÷Ì½Í·µÄ¼ÆÊıÂÊ£»
  11          *   4.¸ù¾İ¼ÆÊıÂÊµÄ²»Í¬£¬Ñ¡Ôñ²»Í¬µÄµ¥Î»£¨uGy/s,mGy/s,Gy/s£©;
  12          
  13          ***********************************************************************************************/
  14          #include "STC15F2K60S2.h"
  15          #include "absacc.h"
  16          #include "config.h"
  17          #include "intrins.h"
  18          #include "math.h"
  19          #include "stdio.h"
  20          
  21          #define C82531C XBYTE[0x8300]   // 8253µÄÃüÁî¶Ë¿Ú£¨µØÖ·£©£¬CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=11£»
  22          #define C825310D XBYTE[0x8000]  // ¼ÆÊıÆ÷0CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=00£»
  23          #define C825311D XBYTE[0x8100]  // ¼ÆÊıÆ÷1CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=01;
  24          #define C825312D XBYTE[0x8200]  // ¼ÆÊıÆ÷2CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=10;
  25          
  26          #define C82532C XBYTE[0x8b00]   // XBYTEµÄ×÷ÓÃÊÇ½«Íâ²¿I/O¶Ë¿ÚÖÃÎªÖĞÀ¨ºÅÄÚ²¿µÄ16Î»¶ş½øÖÆ£¬¼´ÎªÉèÖÃ
  27          #define C825320D XBYTE[0x8800]  // Ê¹ÄÜ¶Ë£¬ XBYTEµÄ×÷ÓÃ»¹ÓĞÉèÖÃÊ¹ÄÜ¶Ëºó£¬×Ô¶¯ÉèÖÃwr,rd.
  28          #define C825321D XBYTE[0x8900]
  29          #define C825322D XBYTE[0x8a00]
  30          
  31          #define C82533C XBYTE[0x9300]
  32          #define C825330D XBYTE[0x9000]
  33          #define C825331D XBYTE[0x9100]
  34          #define C825332D XBYTE[0x9200]
  35          
  36          #define C82534C XBYTE[0x9b00]
  37          #define C825340D XBYTE[0x9800]
  38          #define C825341D XBYTE[0x9900]
  39          #define C825342D XBYTE[0x9a00]
  40          
  41          #define C82535C XBYTE[0xa300]
  42          #define C825350D XBYTE[0xa000]
  43          #define C825351D XBYTE[0xa100]
  44          #define C825352D XBYTE[0xa200]
  45          
  46          uchar buf[32];                 // AB1*´Ó8253ÖĞ¶Áµ½µÄ¼ÆÊıÆ÷Êı¾İ£¬15¸ö¼ÆÊıÆ÷£¬µÍ°ËÎ»¸ß°ËÎ»£¬´Ó3-32£¬1ÎªÌ½Í·¸
             -öÊı£¬2Îª²âÁ¿Ê±¼ä
  47          uchar Channel_Detector[8][2];  // AC1+Í¨µÀÌ½Í·Ñ¡Ôñ±êÖ¾£¬1:µçÀëÊÒ0:¼ÆÊı¹Ü
  48          uchar DataGe[75];              // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ¸öÎ»£¬³õÊ¼Ê±¸öÊ®°ÙÇ§¾ùÎª0
  49          uchar DataTenth[75];           // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÊ®·ÖÎ»
  50          uchar DataCent[75];            // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ°Ù·ÖÎ»
  51          uchar DataThouth[75];          // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÇ§·ÖÎ»
  52          uchar send_buf[65];            // NIM_AÏòNIM_B·¢ËÍÊı¾İµÄÊı×é
  53          uchar Incinput;                // Ì½Í·¸öÊı±êÖ¾£¬Ä¬ÈÏÏÔÊ¾Ì½Í·¸öÊıÎª8¸ö
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 2   

  54          float idata Para[10];          // Éè¶¨ºÃµÄ²ÎÊıÊı×é
  55          float idata DoseRata[8];             // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
  56          uchar Channel_Display[8];      // ÓÃÓÚÏÔÊ¾µÄÍ¨µÀÁ¿³Ì
  57          float jishuguan_DoseRata;
  58          float dianlishi_DoseRata;
  59          uchar Calculated[8];  // ÊÇ·ñ¼ÆËã¹ı±êÖ¾
  60          uchar Flag_dw;        // µ¥Î»±êÖ¾
  61          uchar Max_Time;       // AA1+ËùÓĞÍ¨µÀ×î³¤µÄ¼ÆÊıÊ±¼ä
  62          uint Tdata;           // Ì½Í·¼ÆÊıÂÊ
  63          double Real_Count[8];
  64          ulong Count[8][3];          // Ò»Ãë¼ÆÊıÀúÊ·
  65          uint idata jishuguan_data;  // ±ê¶¨Ê±µÄ¼ÆÊı¹Ü¼ÆÊıÖµÏàµ±ÓÚTdata
  66          uint idata dianlishi_data;  // ±ê¶¨Ê±µÄµçÀëÊÒ¼ÆÊıÖµÏàµ±ÓÚTdata
  67          uchar idata Var_Signal1;    // Ì½Í·¿ØÖÆĞÅºÅ1£¬½Ó¼ÆÊı¹Ü£¬Ä¬ÈÏff¾ù½Ó¼ÆÊı¹Ü
  68          uchar idata Var_Signal2;    // Ì½Í·¿ØÖÆĞÅºÅ2£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  69          uchar idata Var_Signal3;    // Ì½Í·¿ØÖÆĞÅºÅ3£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  70          uchar idata Var_Led;        // LED±¨¾¯Ö¸Ê¾µÆ,Îª1Ê±Ãğ,³õÖµ0xff,
  71          uchar biaoding_input;
  72          bit Flag_Warn_Count;       // Ä¬ÈÏ0£»
  73          uchar Flag_need_Flash[8];  // LEDÉÁË¸±êÖ¾
  74          uchar State_Flash[8];
  75          uchar count_change_flag[8];  // ¼ÆÊı¸Ä±ä±êÖ¾£¿
  76          #if GM1_DOSE_NEED_WEIGHTED_MOVING_AVERAGE
  77          double code Weights_[12] = {0.3, 0.2, 0.15, 0.11, 0.08, 0.05, 0.035, 0.024, 0.019, 0.0152, 0.0084, 0.0084}
             -;
  78          double idata Weights[12] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
  79          double xdata Detector_Counts_History[7][12];
  80          #endif
  81          extern uchar Average_Times[8];  // AJ1+»¬¶¯Æ½¾ù´ÎÊı
  82          
  83          uchar code Svar1[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};  // ĞÅºÅÊı×é
  84          uchar code Svar0[8] = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};
  85          extern uchar jishucount;
  86          extern uchar Display_Flag[8];
  87          extern bit Speak_Alarm();
  88          void shortdelay(uint i);
  89          void Alarm();
  90          void Led_Disp(uchar Num, uchar Flag, uchar State);
  91          void Updata_Flash(uchar j);
  92          extern bitSpeak_Alarm();
  93          
  94          #if GM1_DOSE_NEED_WEIGHTED_MOVING_AVERAGE
  95          
  96          
  97          /**
  98           * @brief  ¸ù¾İ±¾Á¿³Ì²âÁ¿´ÎÊıÉú³É¼ÓÈ¨»¬¶¯Æ½¾ùÈ¨ÖØ£¬¼ÓÈ¨³¤¶È12£¬Ğ¡ÓÚ12µÄ°´±ÈÀı·ÖÅä£»
  99           * @param  n: number of weights
 100           * @param  output: output array
 101           * @author Dan Zhang
 102           */
 103          void generate_weights_output(int n, double (*weights_output)[12])
 104          {
 105   1          double sum = 0.0;
 106   1          int i,j;
 107   1      
 108   1          if (n < 12) {
 109   2              for (i = 0; i < n - 1; i++) {
 110   3                  (*weights_output)[i] = Weights_[i];
 111   3                  sum += Weights_[i];
 112   3              }
 113   2              (*weights_output)[0] = 1 - sum;
 114   2              for (i = 0; i < n - 1; i++) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 3   

 115   3                  for (j = 0; j < n - i - 1; j++) {
 116   4                      if ((*weights_output)[j] < (*weights_output)[j + 1]) {
 117   5                          double temp = (*weights_output)[j];
 118   5                          (*weights_output)[j] = (*weights_output)[j + 1];
 119   5                          (*weights_output)[j + 1] = temp;
 120   5                      }
 121   4                  }
 122   3              }
 123   2          } else if (n == 12) {
 124   2              for (i = 0; i < n; i++) {
 125   3                  (*weights_output)[i] = Weights_[i];
 126   3              }
 127   2          }
 128   1      }
 129          #endif
 130          /*************************************
 131           *8253¼ÆÊıÖµ
 132           **************************************/
 133          
 134          void GetAndDisdata()  // ¼ÆÊıÍê³ÉºóµÚÒ»¸öÔËĞĞµÄ³ÌĞò
 135          {
 136   1          uchar j;
 137   1          uchar th = 0;
 138   1          uchar tl = 0;  // bufÊı×é³õÊ¼»¯
 139   1          for (j = 0; j < 10; j++) {
 140   2              Para[j] = 0;
 141   2          }
 142   1          for (j = 0; j < 8; j++) {
 143   2              Calculated[j] = 0;
 144   2          }
 145   1          /*===========Ëø´æ8253µÄ¼ÆÊıÖµ==========*/
 146   1          C82531C = 0x84;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 147   1          tl = C825312D;   // read825316bitsdata(firstLthenH)
 148   1          buf[2] = 0xff - tl;
 149   1          th = C825312D;
 150   1          buf[3] = 0xff - th;
 151   1      
 152   1          C82531C = 0x44;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 153   1          tl = C825311D;   // read825316bitsdata(firstLthenH)
 154   1          buf[4] = 0xff - tl;
 155   1          th = C825311D;
 156   1          buf[5] = 0xff - th;
 157   1      
 158   1          C82531C = 0x04;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 159   1          tl = C825310D;   // read825316bitsdata(firstLthenH)
 160   1          buf[6] = 0xff - tl;
 161   1          th = C825310D;
 162   1          buf[7] = 0xff - th;
 163   1      
 164   1          C82532C = 0x84;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 165   1          tl = C825322D;   // read825316bitsdata(firstLthenH)
 166   1          buf[8] = 0xff - tl;
 167   1          th = C825322D;
 168   1          buf[9] = 0xff - th;
 169   1      
 170   1          C82532C = 0x44;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 171   1          tl = C825321D;   // read825316bitsdata(firstLthenH)
 172   1          buf[10] = 0xff - tl;
 173   1          th = C825321D;
 174   1          buf[11] = 0xff - th;
 175   1      
 176   1          C82532C = 0x04;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 4   

 177   1          tl = C825320D;   // read825316bitsdata(firstLthenH)
 178   1          buf[12] = 0xff - tl;
 179   1          th = C825320D;
 180   1          buf[13] = 0xff - th;
 181   1      
 182   1          C82533C = 0x84;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 183   1          tl = C825332D;   // read825316bitsdata(firstLthenH)
 184   1          buf[14] = 0xff - tl;
 185   1          th = C825332D;
 186   1          buf[15] = 0xff - th;
 187   1      
 188   1          C82533C = 0x44;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 189   1          tl = C825331D;   // read825316bitsdata(firstLthenH)
 190   1          buf[16] = 0xff - tl;
 191   1          th = C825331D;
 192   1          buf[17] = 0xff - th;
 193   1      
 194   1          C82533C = 0x04;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 195   1          tl = C825330D;   // read825316bitsdata(firstLthenH)
 196   1          buf[18] = 0xff - tl;
 197   1          th = C825330D;
 198   1          buf[19] = 0xff - th;
 199   1      
 200   1          C82534C = 0x84;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 201   1          tl = C825342D;   // read825316bitsdata(firstLthenH)
 202   1          buf[20] = 0xff - tl;
 203   1          th = C825342D;
 204   1          buf[21] = 0xff - th;
 205   1      
 206   1          C82534C = 0x44;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 207   1          tl = C825341D;   // read825316bitsdata(firstLthenH)
 208   1          buf[22] = 0xff - tl;
 209   1          th = C825341D;
 210   1          buf[23] = 0xff - th;
 211   1      
 212   1          C82534C = 0x04;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 213   1          tl = C825340D;   // read825316bitsdata(firstLthenH)
 214   1          buf[24] = 0xff - tl;
 215   1          th = C825340D;
 216   1          buf[25] = 0xff - th;
 217   1      
 218   1          C82535C = 0x84;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 219   1          tl = C825352D;   // read825316bitsdata(firstLthenH)
 220   1          buf[26] = 0xff - tl;
 221   1          th = C825352D;
 222   1          buf[27] = 0xff - th;
 223   1      
 224   1          C82535C = 0x44;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 225   1          tl = C825351D;   // read825316bitsdata(firstLthenH)
 226   1          buf[28] = 0xff - tl;
 227   1          th = C825351D;
 228   1          buf[29] = 0xff - th;
 229   1      
 230   1          C82535C = 0x04;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 231   1          tl = C825350D;   // read825316bitsdata(firstLthenH)
 232   1          buf[30] = 0xff - tl;
 233   1          th = C825350D;
 234   1          buf[31] = 0xff - th;
 235   1      
 236   1          buf[0] = Incinput;  // Ì½Í·¸öÊı
 237   1          buf[1] = Max_Time;  // ²âÁ¿Ê±¼ä£¨Ë¢ĞÂÊ±¼ä±êÖ¾£©
 238   1      }
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 5   

 239          /*******************************************
 240           *8253¼ÆÊıÆ÷³õÊ¼»¯
 241           ********************************************/
 242          void Init_8253()
 243          {
 244   1          uchar i;  // AB1+
 245   1          //=======×°Èë³õÖµÔÙ¿ªÊ¼¼ÆÊı=======//
 246   1          C82531C = 0xb4;   // 10110100
 247   1          C825312D = 0xff;  // 10£ºÍ¨µÀ2,11£ºÏÈµÍ×Ö½Úºó¸ß×Ö½Ú£¬010£º°´·½Ê½2¹¤×÷£¬0£º¶ş½øÖÆ¼ÆÊı¡£Ğ´³õÖµ0xffºó¿ªÊ¼
             -¼ÆÊı
 248   1          C825312D = 0xff;
 249   1      
 250   1          C82531C = 0x74;   // 01110100
 251   1          C825311D = 0xff;  // Í¬ÉÏ
 252   1          C825311D = 0xff;
 253   1      
 254   1          C82531C = 0x34;   // 00110100
 255   1          C825310D = 0xff;  // Ğ´³õÖµÏÈµÍ×Ö½Úºó¸ß×Ö½Ú82531Ğ´³õÖµºó¾Í¿ªÊ¼¼ÆÊı
 256   1          C825310D = 0xff;  // ¶şÈıĞĞÓÃÀ´×°Èë³õÖµ
 257   1      
 258   1          C82532C = 0xb4;  // 10110100
 259   1          C825322D = 0xff;
 260   1          C825322D = 0xff;
 261   1      
 262   1          C82532C = 0x74;  // 01110100
 263   1          C825321D = 0xff;
 264   1          C825321D = 0xff;
 265   1      
 266   1          C82532C = 0x34;  // 00110100
 267   1          C825320D = 0xff;
 268   1          C825320D = 0xff;
 269   1      
 270   1          C82533C = 0xb4;  // 10110100
 271   1          C825332D = 0xff;
 272   1          C825332D = 0xff;
 273   1      
 274   1          C82533C = 0x74;  // 01110100
 275   1          C825331D = 0xff;
 276   1          C825331D = 0xff;
 277   1      
 278   1          C82533C = 0x34;  // 00110100
 279   1          C825330D = 0xff;
 280   1          C825330D = 0xff;
 281   1      
 282   1          C82534C = 0xb4;  // 10110100
 283   1          C825342D = 0xff;
 284   1          C825342D = 0xff;
 285   1      
 286   1          C82534C = 0x74;  // 01110100
 287   1          C825341D = 0xff;
 288   1          C825341D = 0xff;
 289   1      
 290   1          C82534C = 0x34;  // 00110100
 291   1          C825340D = 0xff;
 292   1          C825340D = 0xff;
 293   1      
 294   1          C82535C = 0xb4;  // 10110100
 295   1          C825352D = 0xff;
 296   1          C825352D = 0xff;
 297   1      
 298   1          C82535C = 0x74;  // 01110100
 299   1          C825351D = 0xff;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 6   

 300   1          C825351D = 0xff;
 301   1      
 302   1          C82535C = 0x34;  // 00110100
 303   1          C825350D = 0xff;
 304   1          C825350D = 0xff;
 305   1          for (i = 0; i < 67; i++) {
 306   2              DCS_Send[i] = 0;
 307   2          }
 308   1          for (i = 0; i <= 7; i++) {
 309   2              DoseRata[i] = 0;  // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
 310   2          }
 311   1          Var_Led = 0xff;  // ledÖ¸Ê¾
 312   1          Led573 = Var_Led;
 313   1          EX0 = 0;                // ¹ØÍâ²¿ÖĞ¶Ï0
 314   1          /*¶¨Ê±¼ÆÊıÆ÷µÄ³õÊ¼»¯*/  // AJ1-,ÒÆ¶¯ÖÁ¶¨Ê±ÖĞ¶ÏÀï¿ªGate,8253¿ªÆô¼ÆÊı
 315   1          Flag8253Cnting = 1;
 316   1          NumT0 = 0;
 317   1      }
 318          /************************************
 319           *ÏÔÊ¾¼ÆÊı
 320           ************************************/
 321          void ShowData()
 322          {
 323   1          uchar i, m, j, k, l;  // AE1-:Var1ÓÃÀ´ÅĞ¶ÏÊ¹ÓÃµÄÌ½²âÆ÷µÄ¾Ö²¿±äÁ¿£¬Ïàµ±ÓÚChannel_Detector,²»ÔÙĞèÒª
 324   1          ulong count_temp, jishuguan_count_temp, dianlishi_count_temp;
 325   1          float idata temp, jtemp, yudecide, jishuguan_rata, jishuguan_jtemp, dianlishi_jtemp;
 326   1          double yu, yudata, mtemp;
 327   1          uchar Tbcd[12];  // ²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 328   1          Lcd_Clear();
 329   1          /**³ÌĞòËµÃ÷:
 330   1          **1,Îª±£Ö¤¼´Ê¹¶à¸öÍ¨µÀ²»ÔÚÍ¬Ò»Á¿³Ì£¬¸ßÁ¿³ÌµÄÍ¨µÀÒ²ÄÜÓĞÆäÏìÓ¦¸ü¿ìµÄ¸üĞÂËÙ¶È£¬³ÌĞòÒ»Ãë¼ÆÊıÒ»´Î£¬10Ãë¼ÆÊı
             -ÎªÊ®´ÎÒ»Ãë¼ÆÊıµÄÏà¼Ó
 331   1          **  £¬¼ÁÁ¿ÂÊÏÔÊ¾Ò»ÃëË¢ĞÂÒ»´Î¡£
 332   1          **2,³ÌĞòÖĞ¼ÆÊıÂÊ¼ÆËã¡¢Á¿³Ì»»µ²¡¢¼ÁÁ¿¼ÆËãÏÔÊ¾¸÷²¿·Ö·Ö¿ªÖ´ĞĞ
 333   1          */
 334   1          for (i = 0; i <= 7; i++)  // 8¸öÌ½Í·Öğ¸ö¼ì²â
 335   1          {
 336   2              /**
 337   2               * 1.±éÀúÃ¿Ò»¸öÌ½Í·£¨0~7£©£»
 338   2               * 2.ÏÈ´Óbuf£¨´Ó8253¼ÆÊıÆ÷ÖĞÈ¡»ØµÄ¼ÆÊı£©ÖĞ¼ÆËã¼ÆÊı£¬¸ß8Î»*256+µÍ8Î»£¬¼ÇÂ¼Àú´Î¼ÆÊıÖµ£¬Ã¿3Ãë¼ÆÊıÒ»´Î
             -·ÀÖ¹Òç³ö£»
 339   2               * 3.¸ù¾İÃ¿´ÎµÄ¼ÆÊı£¨3S¼ÆÊıÊ±³¤£©ÒÔ¼°µ±Ç°Á¿³ÌºÍÔ¤ÏÈÈ·¶¨µÄ»»µ²ÆµÂÊ£¬ÅĞ¶Ï»»µ²ºÍÖ´ĞĞ²¢¼ÇÂ¼Àú´ÎÁ¿³ÌµµÎ
             -»ĞÅÏ¢£»
 340   2               * 4.ĞèÒª¸ù¾İÀúÊ·µÄµµÎ»ĞÅÏ¢½øĞĞÅĞ¶Ï£¬»»µ²ºóµÄ²Ù×÷Óë²»»»µ²µÄ²Ù×÷²»Í¬£¬¹Ê·Ö¿ªÖ´ĞĞ£»
 341   2               * 5.
 342   2               **/
 343   2              if (Channel_Detector[i][0] == Channel_Detector[i][1])  // µ±Ç°Ò»´ÎÁ¿³ÌºÍ´Ë´ÎÁ¿³ÌÒ»ÑùÊ±
 344   2              {
 345   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊı3Ãë£¬Ö±½ÓÓÃÀ´¼
             -ÆËã
 346   3                  {
 347   4                      Real_Count[i] = 0;          // ´ËÁ¿³ÌÃ¿´Î¶¼ÒªÇåÁã
 348   4                      Count[i][0] = Count[i][1];  // ÀúÊ·¼ÆÊı¸üĞÂ
 349   4                      Count[i][1] = Count[i][2];
 350   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 351   4                      {
 352   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];  // ¼ÓÒ»ÊÇÒòÎªÔÚ¼ÆÊıÖÜÆÚÄÚ»áÓÉÓ²¼
             -ş¸øÒ»¸öÂö³å
 353   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 354   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 355   4                      {
 356   5                          Count[i][2] = buf[31] * 256 + buf[30];
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 7   

 357   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 358   5                      }
 359   4                      Calculated[i] = 1;                                                                        
             -  // ¼ÆËã¹ı±êÖ¾
 360   4                      if ((Count[i][1] < (37 * Refresh_Time)) && (Count[i][2] < (37 * Refresh_Time)) && (i < 7))
             -  // Á¿³ÌÇĞ»»Ç°7¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 361   4                      {
 362   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 363   5                          Channel_Detector[i][1] = 3;
 364   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 365   5                      }
 366   4                      if ((Count[i][1] < (28 * Refresh_Time)) && (Count[i][2] < (28 * Refresh_Time)) && (i == 7)
             -)  // Á¿³ÌÇĞ»»µÚ°Ë¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 367   4                      {
 368   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 369   5                          Channel_Detector[i][1] = 3;
 370   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 371   5                      }
 372   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 373   4                      Channel_Display[i] = 4;
 374   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 375   4                  }
 376   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 377   3                  {
 378   4                      Count[i][0] = Count[i][1];
 379   4                      Count[i][1] = Count[i][2];
 380   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 381   4                      {
 382   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 383   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 384   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 385   4                      {
 386   5                          Count[i][2] = buf[31] * 256 + buf[30];
 387   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 388   5                      }
 389   4                      Calculated[i] = 1;                                                                        
             -      // ¼ÆËã¹ı±êÖ¾
 390   4                      if ((Count[i][1] > (5719 * Refresh_Time)) && (Count[i][2] > (5719 * Refresh_Time)) && (i <
             - 7))  // Á¿³ÌÇĞ»»
 391   4                      {
 392   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 393   5                          Channel_Detector[i][1] = 4;
 394   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 395   5                      }
 396   4                      if ((Count[i][1] > (7447 * Refresh_Time)) && (Count[i][2] > (7447 * Refresh_Time)) && (i =
             -= 7))  // Á¿³ÌÇĞ»»
 397   4                      {
 398   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 399   5                          Channel_Detector[i][1] = 4;
 400   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 401   5                      }
 402   4                      if (((Count[i][1] < (35 * Refresh_Time)) && (Count[i][2] < (35 * Refresh_Time))) && (i != 
             -7))  // µÚÆß¸öÌ½Í·Ö»ÓĞÁ½¸öÁ¿³Ì
 403   4                      {
 404   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 405   5                          Channel_Detector[i][1] = 2;
 406   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 407   5                      }
 408   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 409   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
 410   4                      Channel_Display[i] = 3;
 411   4                      Real_Count[i] = 0;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 8   

 412   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5719) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 413   4                          (i < 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 414   4                      {
 415   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 416   5                          Channel_Detector[i][1] = 4;
 417   5                          Display_Flag[i] = 0;
 418   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 419   5                      }
 420   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 7447) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 421   4                          (i == 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 422   4                      {
 423   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 424   5                          Channel_Detector[i][1] = 4;
 425   5                          Display_Flag[i] = 0;
 426   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL3(i);
 427   5                      }
 428   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 35) && (Channel_Detector[i][0
             -] == Channel_Detector[i][1]) && (i != 7)) {
 429   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 430   5                          Channel_Detector[i][1] = 2;
 431   5                          Display_Flag[i] = 0;
 432   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 433   5                      }
 434   4                  }
 435   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 436   3                  {
 437   4                      Count[i][0] = Count[i][1];
 438   4                      Count[i][1] = Count[i][2];
 439   4                      Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 440   4                      Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 441   4                      Calculated[i] = 1;                                                                   // ¼Æ
             -Ëã¹ı±êÖ¾
 442   4                      if ((Count[i][1] > (5411 * Refresh_Time)) && (Count[i][2] > (5411 * Refresh_Time)))  // Á¿
             -³ÌÇĞ»»
 443   4                      {
 444   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 445   5                          Channel_Detector[i][1] = 3;
 446   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 447   5                      }
 448   4                      if ((Count[i][1] < (158 * Refresh_Time)) && (Count[i][2] < (158 * Refresh_Time))) {
 449   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 450   5                          Channel_Detector[i][1] = 1;
 451   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 452   5                      }
 453   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 454   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
 455   4                      Channel_Display[i] = 2;
 456   4                      Real_Count[i] = 0;
 457   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5411) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]))  // Á¿³ÌÇĞ»»
 458   4                      {
 459   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 460   5                          Channel_Detector[i][1] = 3;
 461   5                          Display_Flag[i] = 0;
 462   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL2(i);
 463   5                      }
 464   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 158) && (Channel_Detector[i][
             -0] == Channel_Detector[i][1])) {
 465   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 466   5                          Channel_Detector[i][1] = 1;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 9   

 467   5                          Display_Flag[i] = 0;
 468   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 469   5                      }
 470   4                  }
 471   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 472   3                  {
 473   4                      Count[i][0] = Count[i][1];
 474   4                      Count[i][1] = Count[i][2];
 475   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 476   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 477   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
 478   4                      if ((Count[i][0] > (6019 * Refresh_Time)) && (Count[i][1] > (6019 * Refresh_Time)) && (Cou
             -nt[i][2] > (6019 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 479   4                      {
 480   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 481   5                          Channel_Detector[i][1] = 2;
 482   5                          DETECTOR_CTRL_SIGNAL_SET_TO_DL1(i);
 483   5                      }
 484   4                      if ((Count[i][0] < (2 * Refresh_Time)) && (Count[i][1] < (2 * Refresh_Time)) && (Count[i][
             -2] < (2 * Refresh_Time))) {
 485   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 486   5                          Channel_Detector[i][1] = 0;
 487   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 488   5                      }
 489   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 490   4      #if GM2_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Average_Times[i] += 1;
                              if (Average_Times[i] < 5) {
                                  switch (Average_Times[i]) {
                                  case 1:
                                      Real_Count_Display[i] = Average_Counts[i][0];
                                      break;
                                  case 2:
                                      Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
                                      break;
                                  case 3:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
                                      break;
                                  case 4:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
                                      break;
                                  }
                              }
                              if (Average_Times[i] == 5) {
                                  Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
                                                          Average_Counts[i][4] * a4;
                                  for (j = 0; j < 4; j++) {
                                      Average_Counts[i][j] = Average_Counts[i][j + 1];
                                  }
                                  Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
                              }
              #else
 518   4                      Real_Count_Display[i] = Real_Count[i];
 519   4      #endif
 520   4                      Display_Flag[i] = 1;
 521   4                      Channel_Display[i] = 1;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 10  

 522   4                      // if(Count_Times[i]==2)
 523   4                      //{
 524   4                      // Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 525   4                      // Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 526   4                      // Count_Times[i]=0;
 527   4                      // Real_Count[i]=0;
 528   4                      //}
 529   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 530   4                      //{
 531   4                      // for(j=0;j<Average_Times[i];j++)
 532   4                      //{
 533   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 534   4                      //}
 535   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
 536   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 537   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 538   4                      // Channel_Display[i]=0;
 539   4                      // if(Average_Times[i]==5)
 540   4                      //{
 541   4                      // for(j=0;j<(Average_Times[i]-1);j++)
 542   4                      //{
 543   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 544   4                      //}
 545   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 546   4                      //}
 547   4                      //}
 548   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>6019)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 549   4                      //{
 550   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 551   4                      // Channel_Detector[i][1]=2;
 552   4                      // Display_Flag[i]=0;
 553   4                      // Var_Signal1=Var_Signal1&Svar0[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬µÍµçÆ½
 554   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 555   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 556   4                      // }
 557   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)<1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))
 558   4                      //{
 559   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 560   4                      // Channel_Detector[i][1]=0;
 561   4                      // Display_Flag[i]=0;
 562   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 563   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 564   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 565   4                      // }
 566   4                  }
 567   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬2´Î¶¨Ê±¼ÆÊı3ÃëÏà¼Ó£¬5´
             -ÎÆ½»¬Æ½¾ù
 568   3                  {
 569   4                      Count[i][0] = Count[i][1];
 570   4                      Count[i][1] = Count[i][2];
 571   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 572   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 573   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 11  

 574   4                      if ((Count[i][0] > (3 * Refresh_Time)) && (Count[i][1] > (3 * Refresh_Time)) && (Count[i][
             -2] > (3 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 575   4                      {
 576   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 577   5                          Channel_Detector[i][1] = 1;
 578   5                          DETECTOR_CTRL_SIGNAL_SET_TO_GM(i);
 579   5                      }
 580   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 581   4      #if GM1_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Average_Times[i] += 1;
                              if (Average_Times[i] < 5) {
                                  switch (Average_Times[i]) {
                                  case 1:
                                      Real_Count_Display[i] = Average_Counts[i][0];
                                      break;
                                  case 2:
                                      Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
                                      break;
                                  case 3:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
                                      break;
                                  case 4:
                                      Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
                                      break;
                                  }
                              } else if (Average_Times[i] == 5) {
                                  Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
                                                          Average_Counts[i][4] * a4;
                                  for (j = 0; j < 4; j++) {
                                      Average_Counts[i][j] = Average_Counts[i][j + 1];
                                  }
                                  Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
                              }
              #else
 608   4                      Real_Count_Display[i] = Real_Count[i];
 609   4      #endif
 610   4                      Display_Flag[i] = 1;
 611   4                      Channel_Display[i] = 0;
 612   4                      // if(Count_Times[i]==2)
 613   4                      //{
 614   4                      //  Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 615   4                      //  Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 616   4                      //  Count_Times[i]=0;
 617   4                      //  Real_Count[i]=0;
 618   4                      // }
 619   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 620   4                      //{
 621   4                      // for(j=0;j<Average_Times[i];j++)
 622   4                      //{
 623   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 624   4                      //}
 625   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
 626   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 627   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 628   4                      // Channel_Display[i]=0;
 629   4                      // if(Average_Times[i]==5)
 630   4                      //{
 631   4                      // for(j=0;j<(Average_Times[i]-1);j++)
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 12  

 632   4                      //{
 633   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 634   4                      //}
 635   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 636   4                      //}
 637   4                      //}
 638   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 639   4                      //{
 640   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 641   4                      // Channel_Detector[i][1]=1;
 642   4                      // Display_Flag[i]=0;
 643   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 644   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 645   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 646   4                      // }
 647   4                  }
 648   3              } else if (Channel_Detector[i][0] != Channel_Detector[i][1])  // µ±Ç°ºóÁ½´Î¼ÆÊıµÄÁ¿³Ì²»Ò»Ñù
 649   2              {
 650   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊıÒ»Ãë£¬Ö±½ÓÓÃÀ´
             -¼ÆËã
 651   3                  {
 652   4                      for (k = 0; k <= 2; k++)  // ³õÊ¼»¯µ¥´ÎÌøµµÅĞ¶Ï±äÁ¿£¬·ÀÖ¹ÒâÍâ½µµµ¡¾2024¡¿ºÃÏñÃ»Ê²Ã´±ØÒª£¬´
             -ıÈ·¶¨
 653   4                      {
 654   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 655   5                      }
 656   4                      Real_Count[i] = 0;  // Ìø×ªµ½´ËÁ¿³ÌĞèÒªÇåÁã
 657   4                      if (i < 7)          // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 658   4                      {
 659   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 660   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 661   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 662   4                      {
 663   5                          Count[i][2] = buf[31] * 256 + buf[30];
 664   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 665   5                      }
 666   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 667   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 668   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 669   4                      Channel_Display[i] = 4;
 670   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 671   4                  }
 672   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 673   3                  {
 674   4                      for (k = 0; k <= 2; k++) {
 675   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 676   5                      }
 677   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 678   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 679   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 680   4                      {
 681   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 682   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 683   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 684   4                      {
 685   5                          Count[i][2] = buf[31] * 256 + buf[30];
 686   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 687   5                      }
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 13  

 688   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 689   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 690   4                      Channel_Display[i] = 3;
 691   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 692   4                  }
 693   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 694   3                  {
 695   4                      for (k = 0; k <= 2; k++) {
 696   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 697   5                      }
 698   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 699   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 700   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 701   4                      {
 702   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 703   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 704   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 705   4                      {
 706   5                          Count[i][2] = buf[31] * 256 + buf[30];
 707   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 708   5                          Channel_Detector[i][1] = 3;
 709   5                          Channel_Detector[i][0] = 3;
 710   5                      }
 711   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 712   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 713   4                      Channel_Display[i] = 2;
 714   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 715   4                  }
 716   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 717   3                  {
 718   4                      for (k = 0; k <= 2; k++) {
 719   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 720   5                      }
 721   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 722   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 723   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 724   4                      for (j = 0; j < 10; j++) {
 725   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 726   5                      }
 727   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 728   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 729   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 730   4      #if GM2_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
                              Average_Times[i] += 1;
              #else
 735   4                      Real_Count_Display[i] = Real_Count[i];
 736   4      #endif
 737   4                      Display_Flag[i] = 1;
 738   4                      Channel_Display[i] = 1;
 739   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 740   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 741   4                  }
 742   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 743   3                  {
 744   4                      for (k = 0; k <= 2; k++) {
 745   5                          Count[i][k] = 1 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 746   5                      }
 747   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 14  

 748   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 749   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 750   4                      for (j = 0; j < 10; j++) {
 751   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 752   5                      }
 753   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 754   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 755   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 756   4      #if GM1_COUNT_NEED_WEIGHTED_MOVING_AVERAGE
                              Average_Counts[i][Average_Times[i]] = Real_Count[i];
                              Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
                              Average_Times[i] += 1;
              #else
 761   4                      Real_Count_Display[i] = Real_Count[i];
 762   4      #endif
 763   4                      Display_Flag[i] = 1;
 764   4                      Channel_Display[i] = 0;
 765   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 766   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 767   4                  }
 768   3              }
 769   2          }
 770   1          /*½«¸ù¾İ¼ÁÁ¿ÂÊÖµÖØĞÂÉèÖÃµÄÌ½Í·ĞÅºÅ¸Ä±ä±êÖ¾Ö´ĞĞ*/
 771   1          Signal1 = Var_Signal1;  // Ì½Í·ĞÅºÅ×ª±ä
 772   1          Signal2 = Var_Signal3;  // 2016-8-26µ÷»»Var_Signal2,Var_Signal3£¬ÒòÎªÁ½ÕßÔÚÓ²¼şÉÏ±»Åª»ìÁË
 773   1          Signal3 = Var_Signal2;
 774   1          /*AC1+ÔÚÕâÀïbuf(Ê®ÁùÎ»¸ßµÍ¼ÆÊıÊı¾İ)Òª×ª»»³Éuint ÀàĞÍµÄTdataÊı¾İ,²¢ÇÒÌ½Í·ÊıÄ¿ÒªÇå³ş
 775   1          ¼ÓÈëÑ¡Ì½Í·±êÖ¾*/
 776   1          if (measure_flag)  //(1)measure_flagÔÚInit_RAMÖĞ³õÊ¼»¯±äÎª1
 777   1          {
 778   2              for (j = 0; j < 8; j++)  //(2)´æ¼ÆÊıÇøÎªbuf[3]-buf[32];Ì½Í·¸öÊı±êÖ¾
 779   2              {
 780   3      #if COUNT_FOR_DISPLAY
                          Tdata = (uint)(Count[j][2] / 3);  // Ì½Í·¼ÆÊıÂÊuint ,×ÏÉ«ÎªÈ«¾Ö±äÁ¿£¬À¶É«Îª¾Ö²¿±äÁ¿
              #else
 783   3                  Tdata = (uint)Count[j][2];
 784   3      #endif
 785   3                  jtemp = 0;    // float
 786   3                  yudata = 0;   // double
 787   3                  mtemp = 0;    // double
 788   3                  yu = 0;       // double
 789   3                  Tbcd[5] = 0;  // uchar Êı×é¹²12Î»£¬²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 790   3                  Tbcd[4] = 0;
 791   3                  Tbcd[3] = 0;
 792   3                  Tbcd[2] = 0;
 793   3                  Tbcd[1] = 0;
 794   3                  Tbcd[0] = 0;
 795   3                  m = j * 10;  // ±£Áô
 796   3                  /*********ÅĞ¶Ï¼ÆÊıÂÊ***********/
 797   3                  /*********Ç°Æß¸öÌ½Í·Ì½²âÆ÷ÉèÖÃ£¬È¡µÃ8253¼ÆÊıÖµ¼ÇÂ¼ÔÚTdata*/
 798   3                  /**¡¾2024¡¿¸ù¾İÍ¨µÀĞòºÅ¼ÆËã±ê¶¨²ÎÊı£¬ÓÃÓÚCPMºÍ¼ÁÁ¿ÂÊµÄ×ª»»**/
 799   3                  if (j < 7)  //(3)Ç°Æß¸öÌ½Í·¼ÈÓĞµçÀëÊÒÒ²ÓĞ¼ÆÊıÆ÷£¬µÚ°Ë¸öÖ»ÓĞµçÀëÊÒ¹Ê·Ö¿ª´¦Àí
 800   3                  {
 801   4                      Display_Flag[j] = 0;
 802   4                      if (Channel_Display[j] == 0) {
 803   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 804   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 1000000.0;
 805   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
 806   5                      } else if (Channel_Display[j] == 1) {
 807   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 15  

             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 808   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) / 1000000.0;
 809   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 810   5                      } else if (Channel_Display[j] == 2) {
 811   5                          Para[4] = (float)(DataThouth[m + 5] * 1000 + DataCent[m + 5] * 100 + DataTenth[m + 5] 
             -* 10 + DataGe[m + 5]);  // µ÷½Ú²ÎÊı
 812   5                          Para[5] = (float)(DataThouth[m + 6] * 1000 + DataCent[m + 6] * 100 + DataTenth[m + 6] 
             -* 10 + DataGe[m + 6]) / 1000.0;
 813   5                          DoseRata[j] = (float)(Para[5] * ((float)Real_Count_Display[j] - Para[4]));
 814   5                      } else if (Channel_Display[j] == 3) {
 815   5                          Para[6] = (float)(DataThouth[m + 7] * 1000 + DataCent[m + 7] * 100 + DataTenth[m + 7] 
             -* 10 + DataGe[m + 7]);  // µ÷½Ú²ÎÊı
 816   5                          Para[7] = (float)(DataThouth[m + 8] * 1000 + DataCent[m + 8] * 100 + DataTenth[m + 8] 
             -* 10 + DataGe[m + 8]) / 10.0;
 817   5                          DoseRata[j] = (float)(Para[7] * ((float)Real_Count_Display[j] - Para[6]));
 818   5                      } else if (Channel_Display[j] == 4) {
 819   5                          Para[8] = (float)(DataThouth[m + 9] * 1000 + DataCent[m + 9] * 100 + DataTenth[m + 9] 
             -* 10 + DataGe[m + 9]);  // µ÷½Ú²ÎÊı
 820   5                          Para[9] = (float)((DataThouth[m + 10] * 1000 + DataCent[m + 10] * 100 + DataTenth[m + 
             -10] * 10 + DataGe[m + 10]) * 10.0);
 821   5                          DoseRata[j] = (float)(Para[9] * ((float)Real_Count_Display[j] - Para[8]));
 822   5                      }
 823   4                  } else if (j == 7) {
 824   4                      Display_Flag[j] = 0;
 825   4                      if (Channel_Display[j] == 3) {
 826   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 827   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 10.0;
 828   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
 829   5                      } else if (Channel_Display[j] == 4) {
 830   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 831   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) * 10.0;
 832   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 833   5                      }
 834   4                  }
 835   3                  if (DoseRata[j]<0){DoseRata[j]=0;}
 836   3      #if GM1_DOSE_NEED_WEIGHTED_MOVING_AVERAGE
 837   3                  if (Channel_Display[j] == 0) {  // Èç¹ûÊÇGM1Á¿³Ì£¬½øĞĞ»¬¶¯Æ½¾ù,µÚ8¸öÍ¨µÀÃ»ÓĞGM1Á¿³ÌËùÒÔ½ø²»À´
 838   4                      if (Average_Times[j] == 0) {
 839   5                          Detector_Counts_History[j][0] = DoseRata[j];
 840   5                      } else if (Average_Times[j] != 0) {
 841   5                          for (l = 11; l > 0; l--) {
 842   6                              Detector_Counts_History[j][l] = Detector_Counts_History[j][l - 1];
 843   6                          }
 844   5                          Detector_Counts_History[j][0] = DoseRata[j];
 845   5                          DoseRata[j] = 0.0;
 846   5                          generate_weights_output(Average_Times[j] + 1, &Weights);
*** WARNING C182 IN LINE 846 OF 8253count.c: pointer to different objects
 847   5                          for (l = 0; l < Average_Times[j] + 1; l++) {
 848   6                              DoseRata[j] += (Detector_Counts_History[j][l] * Weights[l]);
 849   6                          }
 850   5                      }
 851   4                      Average_Times[j] += 1;
 852   4                      if (Average_Times[j] == 12) {
 853   5                          Average_Times[j] = 11;
 854   5                      }
 855   4                  } else if (Channel_Display[j] != 0) {  // Èç¹û²»ÊÇGM1Á¿³Ì£¬Çå¿ÕËùÓĞ»¬¶¯Æ½¾ùÏà¹ØÊı¾İ
 856   4                      Average_Times[j] = 0;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 16  

 857   4                      for (l = 0; l < 12; l++) {
 858   5                          Detector_Counts_History[j][l] = 0.0;
 859   5                          Weights[l] = 0.0;
 860   5                      }
 861   4                  }
 862   3      #endif
 863   3                  /**********µ¥Î»»»ËãºóÎªjtemp************/
 864   3                  if (DoseRata[j] < 0)  // ĞŞ¸Ä2012.6.15Í¨¹ı¾ùÖµ¼ÆËã
 865   3                  {
 866   4                      jtemp = 0.0;
 867   4                      Flag_dw = 1;
 868   4                  } else if (DoseRata[j] >= 0)  // µ¥Î»ÎªuGy/h
 869   3                  {
 870   4                      if (DoseRata[j] < 1000)  // Mean_Value<1000±íÊ¾µ¥Î»ÎªuGy/h
 871   4                      {
 872   5                          jtemp = (float)DoseRata[j];
 873   5                          Flag_dw = 1;
 874   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 1000000))  // 1000<Mean_Value<1000000±í
             -Ê¾mGy/h
 875   4                      {
 876   5                          jtemp = (float)(DoseRata[j] / 1000);
 877   5                          Flag_dw = 2;
 878   5                      } else if (DoseRata[j] >= 1000000)  // Mean_Value>=1000000±íÊ¾Gy/h
 879   4                      {
 880   5                          jtemp = (float)(DoseRata[j] / 1000000);
 881   5                          Flag_dw = 3;
 882   5                      }
 883   4                  }
 884   3                  /*****DCS·¢ËÍÊı¾İ×¼±¸****/
 885   3                  if (DoseRata[j] < 0)  // Èô¼ÆËã¼ÁÁ¿Ğ¡ÓÚÁãÏòDCS·¢ËÍ0
 886   3                  {
 887   4                      DCS_Send[j * 4 + 4] = 0x30;
 888   4                      DCS_Send[j * 4 + 5] = 0x30;
 889   4                      DCS_Send[j * 4 + 6] = 0x30;
 890   4                      DCS_Send[j * 4 + 7] = 0x30;
 891   4                  } else if (DoseRata[j] >= 0) {
 892   4                      if (DoseRata[j] < 1) {
 893   5                          temp = (float)DoseRata[j] * 1000;
 894   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 895   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 896   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 897   5                          DCS_Send[j * 4 + 7] = 0x30;
 898   5                      } else if ((DoseRata[j] >= 1) && (DoseRata[j] < 10)) {
 899   5                          temp = (float)DoseRata[j] * 100;
 900   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 901   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 902   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 903   5                          DCS_Send[j * 4 + 7] = 0x31;
 904   5                      } else if ((DoseRata[j] >= 10) && (DoseRata[j] < 100)) {
 905   5                          temp = (float)DoseRata[j] * 10;
 906   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 907   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 908   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 909   5                          DCS_Send[j * 4 + 7] = 0x32;
 910   5                      } else if ((DoseRata[j] >= 100) && (DoseRata[j] < 1000)) {
 911   5                          temp = (float)DoseRata[j];
 912   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 913   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 914   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 915   5                          DCS_Send[j * 4 + 7] = 0x33;
 916   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 10000)) {
 917   5                          temp = (float)DoseRata[j] / 10.0;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 17  

 918   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 919   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 920   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 921   5                          DCS_Send[j * 4 + 7] = 0x34;
 922   5                      } else if ((DoseRata[j] >= 10000) && (DoseRata[j] < 100000)) {
 923   5                          temp = (float)DoseRata[j] / 100.0;
 924   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 925   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 926   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 927   5                          DCS_Send[j * 4 + 7] = 0x35;
 928   5                      } else if ((DoseRata[j] >= 100000) && (DoseRata[j] < 1000000)) {
 929   5                          temp = (float)DoseRata[j] / 1000.0;
 930   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 931   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 932   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 933   5                          DCS_Send[j * 4 + 7] = 0x36;
 934   5                      } else if ((DoseRata[j] >= 1000000) && (DoseRata[j] < 10000000)) {
 935   5                          temp = (float)DoseRata[j] / 10000.0;
 936   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 937   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 938   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 939   5                          DCS_Send[j * 4 + 7] = 0x37;
 940   5                      } else if ((DoseRata[j] >= 10000000) && (DoseRata[j] < 100000000)) {
 941   5                          temp = (float)DoseRata[j] / 100000.0;
 942   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 943   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 944   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 945   5                          DCS_Send[j * 4 + 7] = 0x38;
 946   5                      } else if ((DoseRata[j] >= 100000000) && (DoseRata[j] < 1000000000)) {
 947   5                          temp = (float)DoseRata[j] / 1000000.0;
 948   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 949   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 950   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 951   5                          DCS_Send[j * 4 + 7] = 0x39;
 952   5                      }
 953   4                  }
 954   3                  /***********¼ÁÁ¿ÂÊ×ª»»µ¥Î»ºó×ª»»³É¿ÉÒÔÏÔÊ¾µÄBCDÂë*************/
 955   3                  if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && 
             -(Tbcd[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
 956   3                  {
 957   4                      Tbcd[5] = (uchar)(((int)jtemp) / 100);       // °ÙÎ»
 958   4                      Tbcd[4] = (uchar)(((int)jtemp) % 100 / 10);  // Ê®Î»
 959   4                      Tbcd[3] = (uchar)(((int)jtemp) % 100 % 10);  // ¸öÎ»
 960   4                      count_temp = (jtemp - (int)jtemp) * 1000;    // ¼ÆËãĞ¡ÓÚ1µÄ²¿·Ö£¬°ÑĞ¡Êı²¿·Ö±ä´ó£¬±£ÁôÈıÎ»Ğ
             -¡Êı
 961   4                      Tbcd[2] = (uchar)(count_temp / 100);         // Ğ¡Ğ¡ÊıÊ®·ÖÎ»
 962   4                      Tbcd[1] = (uchar)(count_temp % 100 / 10);    // Ğ¡Êı°Ù·ÖÎ»
 963   4                      Tbcd[0] = (uchar)(count_temp % 100 % 10);    // Ğ¡ÊıÇ§·ÖÎ»
 964   4                      if (Flag_dw == 1)                            // ¸ù¾İTbcd[]¼ÆËãyudecide(float)ÓÃÀ´ÅĞ¶Ï¼ÁÁ¿Â
             -ÊÊÇ·ñ³¬¹ıãĞÖµ
 965   4                          yudecide = (float)(Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] * 
             -0.01 + Tbcd[0] * 0.001);
 966   4                      if (Flag_dw == 2)
 967   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000);
 968   4                      if (Flag_dw == 3)
 969   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000000);
 970   4                  }
 971   3                  /***********ÅĞ¶ÏãĞÖµ²¢±¨¾¯*************/
 972   3                  mtemp = (YuThouth[j] + YuCent[j] * 0.1 + YuTenth[j] * 0.01);  // ÔİÊ±Ã»¸ù¾İÎ»ÊıĞŞ¸Ä2012.6.15
 973   3                  yu = (double)(pow(10, YuGe[j]));
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 18  

 974   3                  yudata = (double)(mtemp * yu);
 975   3                  if (yudecide >= yudata)  // Èç¹û¼ÆÊı³¬¹ıÄ³Ò»¸ö·¶Î§£¬ÔòÉùÒô±¨¾¯
 976   3                  {
 977   4                      if ((Judge_Speak == 0) || (Speak_Alarm() == 1))  // ·äÃùÆ÷±¨¾¯£¬Speak_Alarm·µ»Ø1·äÃùÆ÷¹¤×÷
 978   4                      {
 979   5                          Flag_Warn = 1;  // ±¨¾¯±êÖ¾ÖÃÒ»
 980   5                      }
 981   4                      Flag_need_Flash[j] = 1;  // LEDÉÁË¸±êÖ¾ÖÃ1
 982   4                      State_Flash[j] = 1;
 983   4                      Var_Led = Var_Led & Svar0[j];  // LED±¨¾¯Ö¸Ê¾µÆ£¨char£©Svar0[8]={0xFE,0xFD,0xFB,0xF7,0xEF,
             -0xDF,0xBF,0x7F}
 984   4                  } else if (yudecide < yudata) {
 985   4                      Flag_need_Flash[j] = 0;
 986   4                      State_Flash[j] = 0;
 987   4                      Var_Led = Var_Led | Svar1[j];
 988   4                  }
 989   3                  /*AI1*¼ÁÁ¿ÂÊÏÔÊ¾Ó¦µ±ÔÚÌ½²âÆ÷±êÖ¾¸Ä±äÖ®Ç°******¼ÁÁ¿ÂÊÏÔÊ¾**********/
 990   3                  // if(Channel_Detector[j]==0)
 991   3                  //{
 992   3                  //  Txtext(10,13+(j*58),"Gh");                                                  //AH1ÏÔÊ¾Ì½Í·
 993   3                  //}
 994   3                  // else
 995   3                  //{
 996   3                  // Txtext(10,13+(j*58),"Dh");
 997   3                  //}
 998   3                  /*AI1*******¼ÁÁ¿ÂÊÏÔÊ¾**********/
 999   3                  if (Flag_need_Flash[j] == 0) {
1000   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
1001   5                          Txtext(10, 13 + (j * 58), "GM");  // AH1ÏÔÊ¾Ì½Í·
1002   5                      } else {
1003   5                          Txtext(10, 13 + (j * 58), "DL");
1004   5                      }
1005   4                      Tnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
1006   4                      Txtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
1007   4      #if CONFIGURATION_MODE
                              Tnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
                              Tnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
                              Tnumber(390, 13 + (j * 58), Average_Times[j]);
              #endif
1012   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
1013   4                      {
1014   5                          Tnumber(130, 13 + (j * 58), Tbcd[5]);
1015   5                          Tnumber(160, 13 + (j * 58), Tbcd[4]);
1016   5                          Tnumber(190, 13 + (j * 58), Tbcd[3]);
1017   5                          Txtext(220, 13 + (j * 58), ".");
1018   5                          Tnumber(240, 13 + (j * 58), Tbcd[2]);
1019   5                          Tnumber(270, 13 + (j * 58), Tbcd[1]);
1020   5                          Tnumber(300, 13 + (j * 58), Tbcd[0]);
1021   5                          if (Tdata < 10)                          // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
1022   5                              Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1023   5                          else if ((Tdata >= 10) && (Tdata < 100))
1024   5                              Tnumber(556, 13 + (j * 58), Tdata);
1025   5                          else if ((Tdata >= 100) && (Tdata < 1000))
1026   5                              Tnumber(536, 13 + (j * 58), Tdata);
1027   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
1028   5                              Tnumber(516, 13 + (j * 58), Tdata);
1029   5                          else if (Tdata >= 10000)
1030   5                              Tnumber(496, 13 + (j * 58), Tdata);
1031   5                      } else {
1032   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
1033   5                          {
1034   6                              Tnumber(160, 13 + (j * 58), Tbcd[4]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 19  

1035   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
1036   6                              Txtext(220, 13 + (j * 58), ".");
1037   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);
1038   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
1039   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
1040   6                              if (Tdata < 10)
1041   6                                  Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1042   6                              else if ((Tdata >= 10) && (Tdata < 100))
1043   6                                  Tnumber(556, 13 + (j * 58), Tdata);
1044   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1045   6                                  Tnumber(536, 13 + (j * 58), Tdata);
1046   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1047   6                                  Tnumber(516, 13 + (j * 58), Tdata);
1048   6                              else if (Tdata >= 10000)
1049   6                                  Tnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1050   6                          } else                                       // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
1051   5                          {
1052   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
1053   6                              Txtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
1054   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
1055   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
1056   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
1057   6                              if (Tdata < 10)
1058   6                                  Tnumber(576, 13 + (j * 58), Tdata);   // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1059   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
1060   6                                  Tnumber(556, 13 + (j * 58), Tdata);
1061   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1062   6                                  Tnumber(536, 13 + (j * 58), Tdata);
1063   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1064   6                                  Tnumber(516, 13 + (j * 58), Tdata);
1065   6                              else if (Tdata >= 10000)
1066   6                                  Tnumber(496, 13 + (j * 58), Tdata);
1067   6                          }
1068   5                      }
1069   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1070   4      #if CONFIGURATION_MODE
                              if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
                              {
                                  Txtext(340, 13 + (j * 58), "u");
                              } else if (Flag_dw == 2) {
                                  Txtext(340, 13 + (j * 58), "m");
                              } else if (Flag_dw == 3) {
                                  Txtext(340, 13 + (j * 58), "G");
                              }
              #else
1080   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1081   4                      {
1082   5                          Txtext(340, 13 + (j * 58), "uGy/h");
1083   5                      } else if (Flag_dw == 2) {
1084   5                          Txtext(340, 13 + (j * 58), "mGy/h");
1085   5                      } else if (Flag_dw == 3) {
1086   5                          Txtext(340, 13 + (j * 58), "Gy/h");
1087   5                      }
1088   4      #endif
1089   4                      Alarm();  // ±¨¾¯
1090   4                  }
1091   3                  if (Flag_need_Flash[j] == 1) {
1092   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
1093   5                          Trxtext(7, 13 + (j * 58), "  ");
1094   5                          Trxtext(10, 13 + (j * 58), "GM                        ");  // AH1ÏÔÊ¾Ì½Í·
1095   5                      } else {
1096   5                          Trxtext(7, 13 + (j * 58), "  ");
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 20  

1097   5                          Trxtext(10, 13 + (j * 58), "DL                        ");
1098   5                      }
1099   4                      Trnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
1100   4                      Trxtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
1101   4      #if CONFIGURATION_MODE
                              Trnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
                              Trnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
                              Trnumber(390, 13 + (j * 58), Average_Times[j]);
              #endif
1106   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
1107   4                      {
1108   5                          Trnumber(130, 13 + (j * 58), Tbcd[5]);
1109   5                          Trnumber(160, 13 + (j * 58), Tbcd[4]);
1110   5                          Trnumber(190, 13 + (j * 58), Tbcd[3]);
1111   5                          Trxtext(220, 13 + (j * 58), ".");
1112   5                          Trnumber(240, 13 + (j * 58), Tbcd[2]);
1113   5                          Trnumber(270, 13 + (j * 58), Tbcd[1]);
1114   5                          Trnumber(300, 13 + (j * 58), Tbcd[0]);
1115   5                          if (Tdata < 10)                           // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
1116   5                              Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1117   5                          else if ((Tdata >= 10) && (Tdata < 100))
1118   5                              Trnumber(556, 13 + (j * 58), Tdata);
1119   5                          else if ((Tdata >= 100) && (Tdata < 1000))
1120   5                              Trnumber(536, 13 + (j * 58), Tdata);
1121   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
1122   5                              Trnumber(516, 13 + (j * 58), Tdata);
1123   5                          else if (Tdata >= 10000)
1124   5                              Trnumber(496, 13 + (j * 58), Tdata);
1125   5                      } else {
1126   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
1127   5                          {
1128   6                              Trnumber(160, 13 + (j * 58), Tbcd[4]);
1129   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1130   6                              Trxtext(220, 13 + (j * 58), ".");
1131   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);
1132   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1133   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1134   6                              if (Tdata < 10)
1135   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1136   6                              else if ((Tdata >= 10) && (Tdata < 100))
1137   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1138   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1139   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1140   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1141   6                                  Trnumber(516, 13 + (j * 58), Tdata);
1142   6                              else if (Tdata >= 10000)
1143   6                                  Trnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1144   6                          } else                                        // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
1145   5                          {
1146   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1147   6                              Trxtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
1148   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
1149   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1150   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1151   6                              if (Tdata < 10)
1152   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1153   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
1154   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1155   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1156   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1157   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1158   6                                  Trnumber(516, 13 + (j * 58), Tdata);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 21  

1159   6                              else if (Tdata >= 10000)
1160   6                                  Trnumber(496, 13 + (j * 58), Tdata);
1161   6                          }
1162   5                      }
1163   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1164   4      #if CONFIGURATION_MODE
                              if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
                              {
                                  Trxtext(340, 13 + (j * 58), "u");
                              } else if (Flag_dw == 2) {
                                  Trxtext(340, 13 + (j * 58), "m");
                              } else if (Flag_dw == 3) {
                                  Trxtext(340, 13 + (j * 58), "G");
                              }
              #else
1174   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1175   4                      {
1176   5                          Trxtext(340, 13 + (j * 58), "uGy/h");
1177   5                      } else if (Flag_dw == 2) {
1178   5                          Trxtext(340, 13 + (j * 58), "mGy/h");
1179   5                      } else if (Flag_dw == 3) {
1180   5                          Trxtext(340, 13 + (j * 58), "Gy/h");
1181   5                      }
1182   4      #endif
1183   4                      Alarm();  // ±¨¾¯
1184   4                  }
1185   3                  send_buf[8 * j] = Tbcd[5];  // ÏòNIM-B·¢ËÍÏÔÊ¾Êı¾İ
1186   3                  send_buf[8 * j + 1] = Tbcd[4];
1187   3                  send_buf[8 * j + 2] = Tbcd[3];
1188   3                  send_buf[8 * j + 3] = Tbcd[2];
1189   3                  send_buf[8 * j + 4] = Tbcd[1];
1190   3                  send_buf[8 * j + 5] = Tbcd[0];
1191   3                  send_buf[8 * j + 6] = Flag_dw;             // ·¢ËÍµ¥Î»±êÖ¾
1192   3                  send_buf[8 * j + 7] = Flag_need_Flash[j];  // LEDÉÁË¸±êÖ¾
1193   3              }
1194   2              for (j = 0; j < 8; j++)  // ÖÃDCSÊı¾İµÄ±¨¾¯ĞÅºÅ
1195   2              {
1196   3                  if (Flag_need_Flash[j]) {
1197   4                      DCS_Send[64] = DCS_Send[64] | Svar1[j];
1198   4                  } else {
1199   4                      DCS_Send[64] = DCS_Send[64] & Svar0[j];
1200   4                  }
1201   3              }  // 8¸öÌ½Í·¾ùÏÔÊ¾Ö´ĞĞÍê
1202   2              Flag_Warn_Count = 1;
1203   2              jishucount++;           // ¼ÆÊı´ÎÊıÔö¼Ó£¨ËãÆ½¾ùÖµÊ±ÓÃ£©
1204   2              if (jishucount == 255)  // ¼ÆÊı´ÎÊıÒòÎªÊÇcharĞÍ±äÁ¿£¬×î¶àÖ§³Ö255¸ö£¬ËùÒÔÒªÖÃÁã
1205   2                  jishucount = 8;
1206   2              if (jishucount > 4)
1207   2                  Flag_Meant = 1;  // Ç°Îå´ÎµÄÈ¡Öµ²»Òª£¬µÚÎå´Î²Å¿ªÊ¼Òª£¬ÖÃFlag_Meant=1£»·ñÔò¾ùÖÃ0
1208   2              else
1209   2                  Flag_Meant = 0;
1210   2              // shortdelay(5000);                                                             //ÑÓÊ±
1211   2              // for(i=0;i<33;i++)//ÏÔÊ¾ÍêÇå0
1212   2              // buf[i]=0;
1213   2          }  // ²âÁ¿±êÖ¾
1214   1          else {
1215   2              jishuguan_data = 0;   // needthinkwhetherneed?4.21,int¼ÆÊı¹ÜÊı¾İ£¬
1216   2              dianlishi_data = 0;   // µçÀëÊÒÊı¾İ
1217   2              jishuguan_rata = 0;   // ¼ÆÊı¹Ü¼ÆÊıÂÊ
1218   2              jishuguan_jtemp = 0;  // ¼ÆÊı¹Ü¼ÁÁ¿Öµ(µ¥Î»×ª»»ºó)
1219   2              dianlishi_jtemp = 0;  // µçÀëÊÒ¼ÁÁ¿Öµ£¨µ¥Î»×ª»»ºó£©
1220   2              Tbcd[11] = 0;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 22  

1221   2              Tbcd[10] = 0;
1222   2              Tbcd[9] = 0;
1223   2              Tbcd[8] = 0;
1224   2              Tbcd[7] = 0;
1225   2              Tbcd[6] = 0;
1226   2              Tbcd[5] = 0;
1227   2              Tbcd[4] = 0;
1228   2              Tbcd[3] = 0;
1229   2              Tbcd[2] = 0;
1230   2              Tbcd[1] = 0;
1231   2              Tbcd[0] = 0;
1232   2              j = 10 * biaoding_input - 7;                                                                  // b
             -iaodin_inputÎªÒª±ê¶¨µÄÌ½Í·ĞòºÅ
1233   2              jishuguan_data = buf[4 * biaoding_input - 1] * 256 + buf[4 * biaoding_input - 2];             // Ï
             -àµ±ÓÚTdata
1234   2              jishuguan_rata = jishuguan_data * 12;                                                         // ¼
             -ÆÊıÂÊ£¬Ö±½Ó³ËÒÔ12?
1235   2              dianlishi_data = buf[4 * biaoding_input + 1] * 256 + buf[4 * biaoding_input];                 // µ
             -çÀëÊÒTdata
1236   2              Para[0] = (float)(DataThouth[j] * 1000 + DataCent[j] * 100 + DataTenth[j] * 10 + DataGe[j]);  // µ
             -÷½Ú²ÎÊı
1237   2              Para[1] = (float)((float)(DataThouth[j + 1] * 1000 + DataCent[j + 1] * 100 + DataTenth[j + 1] * 10
             - + DataGe[j + 1]) / 1000000);
1238   2              jishuguan_DoseRata = (float)(Para[1] * (jishuguan_rata - Para[0]));
1239   2              if (jishuguan_DoseRata < 0)
1240   2                  jishuguan_DoseRata = 0.0;
1241   2              jishuguan_jtemp = (float)jishuguan_DoseRata;
1242   2              if ((Tbcd[11] <= 9) && (Tbcd[10] <= 9) && (Tbcd[9] <= 9) && (Tbcd[8] <= 9) && (Tbcd[7] <= 9) && (T
             -bcd[6] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1243   2              {
1244   3                  Tbcd[11] = (uchar)(((int)jishuguan_jtemp) / 100);       // Ç§Î»
1245   3                  Tbcd[10] = (uchar)(((int)jishuguan_jtemp) % 100 / 10);  // °ÙÎ»
1246   3                  Tbcd[9] = (uchar)(((int)jishuguan_jtemp) % 100 % 10);   // ¸öÎ»
1247   3                  jishuguan_count_temp = (jishuguan_jtemp - (int)jishuguan_jtemp) * 1000;
1248   3                  Tbcd[8] = (uchar)(jishuguan_count_temp / 100);
1249   3                  Tbcd[7] = (uchar)(jishuguan_count_temp % 100 / 10);
1250   3                  Tbcd[6] = (uchar)(jishuguan_count_temp % 100 % 10);
1251   3              }
1252   2              Para[2] = (float)(DataThouth[j + 2] * 1000 + DataCent[j + 2] * 100 + DataTenth[j + 2] * 10 + DataG
             -e[j + 2]);  // µ÷½Ú²ÎÊı
1253   2              Para[3] = (float)((float)(DataThouth[j + 3] * 1000 + DataCent[j + 3] * 100 + DataTenth[j + 3] * 10
             - + DataGe[j + 3]) / 1000);
1254   2              dianlishi_DoseRata = (float)(Para[3] * (dianlishi_data - Para[2]));
1255   2              if (dianlishi_DoseRata < 0)
1256   2                  dianlishi_DoseRata = 0.0;
1257   2              dianlishi_jtemp = (float)(dianlishi_DoseRata / 1000);
1258   2              if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && (Tbc
             -d[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1259   2              {
1260   3                  Tbcd[5] = (uchar)(((int)dianlishi_jtemp) / 100);       // Ç§Î»
1261   3                  Tbcd[4] = (uchar)(((int)dianlishi_jtemp) % 100 / 10);  // °ÙÎ»
1262   3                  Tbcd[3] = (uchar)(((int)dianlishi_jtemp) % 100 % 10);  // ¸öÎ»
1263   3                  dianlishi_count_temp = (dianlishi_jtemp - (int)dianlishi_jtemp) * 1000;
1264   3                  Tbcd[2] = (uchar)(dianlishi_count_temp / 100);
1265   3                  Tbcd[1] = (uchar)(dianlishi_count_temp % 100 / 10);
1266   3                  Tbcd[0] = (uchar)(dianlishi_count_temp % 100 % 10);
1267   3              }
1268   2              Txtext(200, 58, "±ê¶¨Ì½Í·");
1269   2              Tnumber(400, 58, biaoding_input);
1270   2              Txtext(10, 116, "¸Ç¸ï¹Ü");
1271   2              ;
1272   2              Txtext(160, 116, ":");
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 23  

1273   2              Txtext(220, 174, "uGy/h");
1274   2              Txtext(520, 174, "CPM");
1275   2              Txtext(10, 290, "µçÀëÊÒ");
1276   2              ;
1277   2              Txtext(160, 290, ":");
1278   2              Txtext(220, 348, "mGy/h");
1279   2              Txtext(520, 348, "CP5S");
1280   2              if (Tbcd[11] != 0) {
1281   3                  Tnumber(10, 174, Tbcd[11]);
1282   3                  Tnumber(40, 174, Tbcd[10]);
1283   3                  Tnumber(70, 174, Tbcd[9]);
1284   3                  Txtext(100, 174, ".");
1285   3                  Tnumber(130, 174, Tbcd[8]);
1286   3                  Tnumber(160, 174, Tbcd[7]);
1287   3                  Tnumber(190, 174, Tbcd[6]);
1288   3                  if (jishuguan_data < 10)
1289   3                      Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1290   3                  else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1291   3                      Tnumber(460, 174, jishuguan_data);
1292   3                  else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1293   3                      Tnumber(430, 174, jishuguan_data);
1294   3                  else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1295   3                      Tnumber(400, 174, jishuguan_data);
1296   3                  else if (jishuguan_data >= 10000)
1297   3                      Tnumber(370, 174, jishuguan_data);
1298   3              } else {
1299   3                  if (Tbcd[10] != 0) {
1300   4                      Tnumber(40, 174, Tbcd[10]);
1301   4                      Tnumber(70, 174, Tbcd[9]);
1302   4                      Txtext(100, 174, ".");
1303   4                      Tnumber(130, 174, Tbcd[8]);
1304   4                      Tnumber(160, 174, Tbcd[7]);
1305   4                      Tnumber(190, 174, Tbcd[6]);
1306   4                      if (jishuguan_data < 10)
1307   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1308   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1309   4                          Tnumber(460, 174, jishuguan_data);
1310   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1311   4                          Tnumber(430, 174, jishuguan_data);
1312   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1313   4                          Tnumber(400, 174, jishuguan_data);
1314   4                      else if (jishuguan_data >= 10000)
1315   4                          Tnumber(370, 174, jishuguan_data);
1316   4                  } else {
1317   4                      Tnumber(70, 174, Tbcd[9]);
1318   4                      Txtext(100, 174, ".");
1319   4                      Tnumber(130, 174, Tbcd[8]);
1320   4                      Tnumber(160, 174, Tbcd[7]);
1321   4                      Tnumber(190, 174, Tbcd[6]);
1322   4                      if (jishuguan_data < 10)
1323   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1324   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1325   4                          Tnumber(460, 174, jishuguan_data);
1326   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1327   4                          Tnumber(430, 174, jishuguan_data);
1328   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1329   4                          Tnumber(400, 174, jishuguan_data);
1330   4                      else if (jishuguan_data >= 10000)
1331   4                          Tnumber(370, 174, jishuguan_data);
1332   4                  }
1333   3              }
1334   2              if (Tbcd[5] != 0) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 24  

1335   3                  Tnumber(10, 348, Tbcd[5]);
1336   3                  Tnumber(40, 348, Tbcd[4]);
1337   3                  Tnumber(70, 348, Tbcd[3]);
1338   3                  Txtext(100, 348, ".");
1339   3                  Tnumber(130, 348, Tbcd[2]);
1340   3                  Tnumber(160, 348, Tbcd[1]);
1341   3                  Tnumber(190, 348, Tbcd[0]);
1342   3                  if (dianlishi_data < 10)
1343   3                      Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1344   3                  else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1345   3                      Tnumber(460, 348, dianlishi_data);
1346   3                  else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1347   3                      Tnumber(430, 348, dianlishi_data);
1348   3                  else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1349   3                      Tnumber(400, 348, dianlishi_data);
1350   3                  else if (dianlishi_data >= 10000)
1351   3                      Tnumber(370, 348, dianlishi_data);
1352   3              } else {
1353   3                  if (Tbcd[4] != 0) {
1354   4                      Tnumber(40, 348, Tbcd[4]);
1355   4                      Tnumber(70, 348, Tbcd[3]);
1356   4                      Txtext(100, 348, ".");
1357   4                      Tnumber(130, 348, Tbcd[2]);
1358   4                      Tnumber(160, 348, Tbcd[1]);
1359   4                      Tnumber(190, 348, Tbcd[0]);
1360   4                      if (dianlishi_data < 10)
1361   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1362   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1363   4                          Tnumber(460, 348, dianlishi_data);
1364   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1365   4                          Tnumber(430, 348, dianlishi_data);
1366   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1367   4                          Tnumber(400, 348, dianlishi_data);
1368   4                      else if (dianlishi_data >= 10000)
1369   4                          Tnumber(370, 348, dianlishi_data);
1370   4                  } else {
1371   4                      Tnumber(70, 348, Tbcd[3]);
1372   4                      Txtext(100, 348, ".");
1373   4                      Tnumber(130, 348, Tbcd[2]);
1374   4                      Tnumber(160, 348, Tbcd[1]);
1375   4                      Tnumber(190, 348, Tbcd[0]);
1376   4                      if (dianlishi_data < 10)
1377   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1378   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1379   4                          Tnumber(460, 348, dianlishi_data);
1380   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1381   4                          Tnumber(430, 348, dianlishi_data);
1382   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1383   4                          Tnumber(400, 348, dianlishi_data);
1384   4                      else if (dianlishi_data >= 10000)
1385   4                          Tnumber(370, 348, dianlishi_data);
1386   4                  }
1387   3              }
1388   2          }
1389   1      }
1390          
1391          /************************************
1392           *¶ÌÑÓÊ±
1393           ************************************/
1394          void shortdelay(uint i)
1395          {
1396   1          uint k;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 25  

1397   1          uint n;
1398   1          for (k = 0; k < i; k++)
1399   1              for (n = 200; n > 0; n--)
1400   1                  ;
1401   1      }
1402          
1403          /********************************
1404           *Ö¸Ê¾µÆºÍ±¨¾¯
1405           ********************************/
1406          void Alarm()
1407          {
1408   1          uchar n;
1409   1          for (n = 0; n < 10; n++) {
1410   2              Led573 = Var_Led;
1411   2              if (Flag_Warn == 1)  // ÉùÒô±¨¾¯
1412   2              {
1413   3                  Speak = 1;
1414   3              }
1415   2          }
1416   1      }
1417          
1418          /*******************************
1419           *¸üĞÂÖ¸Ê¾µÆ×´Ì¬
1420           *******************************/
1421          void Updata_Flash(uchar j)
1422          {
1423   1          if (Flag_need_Flash[j]) {
1424   2              if (State_Flash[j] == 1) {
1425   3                  State_Flash[j] = 0;
1426   3              } else {
1427   3                  State_Flash[j] = 1;
1428   3              }
1429   2          } else
1430   1              State_Flash[j] = 0;
1431   1      }
1432          
1433          /***********************************
1434           *Ö¸Ê¾µÆÉÁË¸
1435           ************************************/
1436          void Led_Flash(void)
1437          {
1438   1          uchar i;
1439   1          for (i = 0; i < 8; i++) {
1440   2              Updata_Flash(i);                                  // ×´Ì¬È¡·´
1441   2              Led_Disp(i, Flag_need_Flash[i], State_Flash[i]);  // µÆ×´Ì¬ÏÔÊ¾
1442   2          }
1443   1      }
1444          
1445          /************************************
1446           *Ö¸Ê¾µÆ×´Ì¬ÏÔÊ¾
1447           *************************************/
1448          void Led_Disp(uchar Num, uchar Flag, uchar State)
1449          {
1450   1          if (Flag) {
1451   2              if (State) {
1452   3                  Var_Led = Var_Led & Svar0[Num];  // Ö¸Ê¾µÆÁÁ
1453   3                  Led573 = Var_Led;
1454   3                  if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1455   3                  {
1456   4                      Speak = 0;  // ·äÃùÆ÷Ïì
1457   4                      shortdelay(100);
1458   4                  }
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/28/2024 11:05:23 PAGE 26  

1459   3                  return;
1460   3              }
1461   2          }
1462   1          Var_Led = Var_Led | Svar1[Num];  // Ö¸Ê¾µÆÃğ
1463   1          Led573 = Var_Led;
1464   1          if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1465   1          {
1466   2              Speak = 1;  // ·äÃùÆ÷²»Ïì
1467   2              shortdelay(100);
1468   2          }
1469   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  21642    ----
   CONSTANT SIZE    =    180    ----
   XDATA SIZE       =    931      59
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =    128      24
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
