C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE 8253COUNT
OBJECT MODULE PLACED IN .\Objects\8253count.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 8253count.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\8253count.lst) TABS(2) OBJECT(.\Objects\8253count.obj)

line level    source

   1          /********************************************************************************************
   2          *ÃèÊö£º
   3          *   8253¼ÆÊıÉèÖÃ
   4          *¹¦ÄÜ£º
   5          *   1.´Ó8253ÖĞ¶ÁÈ¡¼ÆÊı£¬Ã¿¸ö8253ÖĞº¬ÓĞ3¸ö¼ÆÊıÆ÷£¬Îå¸ö8253¼Æ15¸öÌ½Í·µÄ¼ÆÊı£¬
   6          *     Ç°Æß¸öÌ½Í·ÊÇË«Ì½Í·£¨µÍ¼ÆÊıÌ½Í·ºÍ¸ß¼ÆÊıÌ½Í·£©£¬µÚ°Ë¸öÌ½Í·ÊÇµ¥Ì½Í·£¨¸ß¼ÆÊıÌ½Í·£©£¬
   7          *     ¸ù¾İ¼ÆÊıÂÊÑ¡ÔñÄÄ¸öÌ½Í·¹¤×÷£»
   8          *   2.T0¶¨Ê±ÖĞ¶Ï
   9          *     T0¹¤×÷ÔÚ16Î»×Ô¶¯ÖØÔØÄ£Ê½£¬ÏòÉÏ¼ÆÊı£¬Ã¿Ñ­»·Ò»´Î£¬×Ü¶¨Ê±5Ms,¼ÆÊı³õÖµDC00£¬¾§Õñ22.1184M£»
  10          *   3.¶¨Ê±µ½£¬¶ÁÈ¡¼ÆÊı£¬¸ù¾İÉè¶¨µÄ²ÎÊı£¬ÏÔÊ¾¸÷Ì½Í·µÄ¼ÆÊıÂÊ£»
  11          *   4.¸ù¾İ¼ÆÊıÂÊµÄ²»Í¬£¬Ñ¡Ôñ²»Í¬µÄµ¥Î»£¨uGy/s,mGy/s,Gy/s£©;
  12          
  13          ***********************************************************************************************/
  14          #include "STC15F2K60S2.h"
  15          #include "absacc.h"
  16          #include "config.h"
  17          #include "intrins.h"
  18          #include "math.h"
  19          #include "stdio.h"
  20          
  21          #define C82531C XBYTE[0x8300]   // 8253µÄÃüÁî¶Ë¿Ú£¨µØÖ·£©£¬CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=11£»
  22          #define C825310D XBYTE[0x8000]  // ¼ÆÊıÆ÷0CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=00£»
  23          #define C825311D XBYTE[0x8100]  // ¼ÆÊıÆ÷1CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=01;
  24          #define C825312D XBYTE[0x8200]  // ¼ÆÊıÆ÷2CS4=1,CS3=1,CS2=1,CS1=1,CS0=0,A1A0=10;
  25          
  26          #define C82532C XBYTE[0x8b00]   // XBYTEµÄ×÷ÓÃÊÇ½«Íâ²¿I/O¶Ë¿ÚÖÃÎªÖĞÀ¨ºÅÄÚ²¿µÄ16Î»¶ş½øÖÆ£¬¼´ÎªÉèÖÃ
  27          #define C825320D XBYTE[0x8800]  // Ê¹ÄÜ¶Ë£¬ XBYTEµÄ×÷ÓÃ»¹ÓĞÉèÖÃÊ¹ÄÜ¶Ëºó£¬×Ô¶¯ÉèÖÃwr,rd.
  28          #define C825321D XBYTE[0x8900]
  29          #define C825322D XBYTE[0x8a00]
  30          
  31          #define C82533C XBYTE[0x9300]
  32          #define C825330D XBYTE[0x9000]
  33          #define C825331D XBYTE[0x9100]
  34          #define C825332D XBYTE[0x9200]
  35          
  36          #define C82534C XBYTE[0x9b00]
  37          #define C825340D XBYTE[0x9800]
  38          #define C825341D XBYTE[0x9900]
  39          #define C825342D XBYTE[0x9a00]
  40          
  41          #define C82535C XBYTE[0xa300]
  42          #define C825350D XBYTE[0xa000]
  43          #define C825351D XBYTE[0xa100]
  44          #define C825352D XBYTE[0xa200]
  45          
  46          uchar buf[32];                 // AB1*´Ó8253ÖĞ¶Áµ½µÄ¼ÆÊıÆ÷Êı¾İ£¬15¸ö¼ÆÊıÆ÷£¬µÍ°ËÎ»¸ß°ËÎ»£¬´Ó3-32£¬1ÎªÌ½Í·¸
             -öÊı£¬2Îª²âÁ¿Ê±¼ä
  47          uchar Channel_Detector[8][2];  // AC1+Í¨µÀÌ½Í·Ñ¡Ôñ±êÖ¾£¬1:µçÀëÊÒ0:¼ÆÊı¹Ü
  48          uchar DataGe[75];              // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ¸öÎ»£¬³õÊ¼Ê±¸öÊ®°ÙÇ§¾ùÎª0
  49          uchar DataTenth[75];           // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÊ®·ÖÎ»
  50          uchar DataCent[75];            // Ì½²âÆ÷±ê¶¨²ÎÊıµÄ°Ù·ÖÎ»
  51          uchar DataThouth[75];          // Ì½²âÆ÷±ê¶¨²ÎÊıµÄÇ§·ÖÎ»
  52          uchar send_buf[65];            // NIM_AÏòNIM_B·¢ËÍÊı¾İµÄÊı×é
  53          uchar Incinput;                // Ì½Í·¸öÊı±êÖ¾£¬Ä¬ÈÏÏÔÊ¾Ì½Í·¸öÊıÎª8¸ö
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 2   

  54          float idata Para[10];          // Éè¶¨ºÃµÄ²ÎÊıÊı×é
  55          float DoseRata[8];             // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
  56          uchar Channel_Display[8];      // ÓÃÓÚÏÔÊ¾µÄÍ¨µÀÁ¿³Ì
  57          float jishuguan_DoseRata;
  58          float dianlishi_DoseRata;
  59          uchar Calculated[8];  // ÊÇ·ñ¼ÆËã¹ı±êÖ¾
  60          uchar Flag_dw;        // µ¥Î»±êÖ¾
  61          uchar Max_Time;       // AA1+ËùÓĞÍ¨µÀ×î³¤µÄ¼ÆÊıÊ±¼ä
  62          uint Tdata;           // Ì½Í·¼ÆÊıÂÊ
  63          double Real_Count[8];
  64          ulong Count[8][3];          // Ò»Ãë¼ÆÊıÀúÊ·
  65          uint idata jishuguan_data;  // ±ê¶¨Ê±µÄ¼ÆÊı¹Ü¼ÆÊıÖµÏàµ±ÓÚTdata
  66          uint idata dianlishi_data;  // ±ê¶¨Ê±µÄµçÀëÊÒ¼ÆÊıÖµÏàµ±ÓÚTdata
  67          uchar idata Var_Signal1;    // Ì½Í·¿ØÖÆĞÅºÅ1£¬½Ó¼ÆÊı¹Ü£¬Ä¬ÈÏff¾ù½Ó¼ÆÊı¹Ü
  68          uchar idata Var_Signal2;    // Ì½Í·¿ØÖÆĞÅºÅ2£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  69          uchar idata Var_Signal3;    // Ì½Í·¿ØÖÆĞÅºÅ3£¬½ÓµçÀëÊÒ£¬Ä¬ÈÏ00£»
  70          uchar idata Var_Led;        // LED±¨¾¯Ö¸Ê¾µÆ,Îª1Ê±Ãğ,³õÖµ0xff,
  71          uchar biaoding_input;
  72          bit Flag_Warn_Count;       // Ä¬ÈÏ0£»
  73          uchar Flag_need_Flash[8];  // LEDÉÁË¸±êÖ¾
  74          uchar State_Flash[8];
  75          uchar count_change_flag[8];  // ¼ÆÊı¸Ä±ä±êÖ¾£¿
  76          float code a0 = 0.0625;
  77          float code a1 = 0.0625;
  78          float code a2 = 0.125;
  79          float code a3 = 0.25;
  80          float code a4 = 0.5;
  81          uchar code Svar1[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};  // ĞÅºÅÊı×é
  82          uchar code Svar0[8] = {0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F};
  83          extern uchar jishucount;
  84          extern uchar Average_Times[8];  // AJ1+»¬¶¯Æ½¾ù´ÎÊı
  85          extern uchar Display_Flag[8];
  86          
  87          extern bit Speak_Alarm();
  88          
  89          void shortdelay(uint i);
  90          void Alarm();
  91          void Led_Disp(uchar Num, uchar Flag, uchar State);
  92          void Updata_Flash(uchar j);
  93          extern bitSpeak_Alarm();
  94          /*************************************
  95           *8253¼ÆÊıÖµ
  96           **************************************/
  97          void GetAndDisdata()  // ¼ÆÊıÍê³ÉºóµÚÒ»¸öÔËĞĞµÄ³ÌĞò
  98          {
  99   1          uchar j;
 100   1          uchar th = 0;
 101   1          uchar tl = 0;  // bufÊı×é³õÊ¼»¯
 102   1          for (j = 0; j < 10; j++) {
 103   2              Para[j] = 0;
 104   2          }
 105   1          for (j = 0; j < 8; j++) {
 106   2              Calculated[j] = 0;
 107   2          }
 108   1          /*===========Ëø´æ8253µÄ¼ÆÊıÖµ==========*/
 109   1          C82531C = 0x84;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 110   1          tl = C825312D;   // read825316bitsdata(firstLthenH)
 111   1          buf[2] = 0xff - tl;
 112   1          th = C825312D;
 113   1          buf[3] = 0xff - th;
 114   1      
 115   1          C82531C = 0x44;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 3   

 116   1          tl = C825311D;   // read825316bitsdata(firstLthenH)
 117   1          buf[4] = 0xff - tl;
 118   1          th = C825311D;
 119   1          buf[5] = 0xff - th;
 120   1      
 121   1          C82531C = 0x04;  // Ëø´æµÚÒ»Æ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 122   1          tl = C825310D;   // read825316bitsdata(firstLthenH)
 123   1          buf[6] = 0xff - tl;
 124   1          th = C825310D;
 125   1          buf[7] = 0xff - th;
 126   1      
 127   1          C82532C = 0x84;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 128   1          tl = C825322D;   // read825316bitsdata(firstLthenH)
 129   1          buf[8] = 0xff - tl;
 130   1          th = C825322D;
 131   1          buf[9] = 0xff - th;
 132   1      
 133   1          C82532C = 0x44;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 134   1          tl = C825321D;   // read825316bitsdata(firstLthenH)
 135   1          buf[10] = 0xff - tl;
 136   1          th = C825321D;
 137   1          buf[11] = 0xff - th;
 138   1      
 139   1          C82532C = 0x04;  // Ëø´æµÚ¶şÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 140   1          tl = C825320D;   // read825316bitsdata(firstLthenH)
 141   1          buf[12] = 0xff - tl;
 142   1          th = C825320D;
 143   1          buf[13] = 0xff - th;
 144   1      
 145   1          C82533C = 0x84;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 146   1          tl = C825332D;   // read825316bitsdata(firstLthenH)
 147   1          buf[14] = 0xff - tl;
 148   1          th = C825332D;
 149   1          buf[15] = 0xff - th;
 150   1      
 151   1          C82533C = 0x44;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 152   1          tl = C825331D;   // read825316bitsdata(firstLthenH)
 153   1          buf[16] = 0xff - tl;
 154   1          th = C825331D;
 155   1          buf[17] = 0xff - th;
 156   1      
 157   1          C82533C = 0x04;  // Ëø´æµÚÈıÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 158   1          tl = C825330D;   // read825316bitsdata(firstLthenH)
 159   1          buf[18] = 0xff - tl;
 160   1          th = C825330D;
 161   1          buf[19] = 0xff - th;
 162   1      
 163   1          C82534C = 0x84;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 164   1          tl = C825342D;   // read825316bitsdata(firstLthenH)
 165   1          buf[20] = 0xff - tl;
 166   1          th = C825342D;
 167   1          buf[21] = 0xff - th;
 168   1      
 169   1          C82534C = 0x44;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 170   1          tl = C825341D;   // read825316bitsdata(firstLthenH)
 171   1          buf[22] = 0xff - tl;
 172   1          th = C825341D;
 173   1          buf[23] = 0xff - th;
 174   1      
 175   1          C82534C = 0x04;  // Ëø´æµÚËÄÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 176   1          tl = C825340D;   // read825316bitsdata(firstLthenH)
 177   1          buf[24] = 0xff - tl;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 4   

 178   1          th = C825340D;
 179   1          buf[25] = 0xff - th;
 180   1      
 181   1          C82535C = 0x84;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷2µÄ¼ÆÊıÖµ
 182   1          tl = C825352D;   // read825316bitsdata(firstLthenH)
 183   1          buf[26] = 0xff - tl;
 184   1          th = C825352D;
 185   1          buf[27] = 0xff - th;
 186   1      
 187   1          C82535C = 0x44;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷1µÄ¼ÆÊıÖµ
 188   1          tl = C825351D;   // read825316bitsdata(firstLthenH)
 189   1          buf[28] = 0xff - tl;
 190   1          th = C825351D;
 191   1          buf[29] = 0xff - th;
 192   1      
 193   1          C82535C = 0x04;  // Ëø´æµÚÎåÆ¬8253¼ÆÊıÆ÷0µÄ¼ÆÊıÖµ
 194   1          tl = C825350D;   // read825316bitsdata(firstLthenH)
 195   1          buf[30] = 0xff - tl;
 196   1          th = C825350D;
 197   1          buf[31] = 0xff - th;
 198   1      
 199   1          buf[0] = Incinput;  // Ì½Í·¸öÊı
 200   1          buf[1] = Max_Time;  // ²âÁ¿Ê±¼ä£¨Ë¢ĞÂÊ±¼ä±êÖ¾£©
 201   1      }
 202          /*******************************************
 203           *8253¼ÆÊıÆ÷³õÊ¼»¯
 204           ********************************************/
 205          void Init_8253()
 206          {
 207   1          uchar i;  // AB1+
 208   1          //=======×°Èë³õÖµÔÙ¿ªÊ¼¼ÆÊı=======//
 209   1          C82531C = 0xb4;   // 10110100
 210   1          C825312D = 0xff;  // 10£ºÍ¨µÀ2,11£ºÏÈµÍ×Ö½Úºó¸ß×Ö½Ú£¬010£º°´·½Ê½2¹¤×÷£¬0£º¶ş½øÖÆ¼ÆÊı¡£Ğ´³õÖµ0xffºó¿ªÊ¼
             -¼ÆÊı
 211   1          C825312D = 0xff;
 212   1      
 213   1          C82531C = 0x74;   // 01110100
 214   1          C825311D = 0xff;  // Í¬ÉÏ
 215   1          C825311D = 0xff;
 216   1      
 217   1          C82531C = 0x34;   // 00110100
 218   1          C825310D = 0xff;  // Ğ´³õÖµÏÈµÍ×Ö½Úºó¸ß×Ö½Ú82531Ğ´³õÖµºó¾Í¿ªÊ¼¼ÆÊı
 219   1          C825310D = 0xff;  // ¶şÈıĞĞÓÃÀ´×°Èë³õÖµ
 220   1      
 221   1          C82532C = 0xb4;  // 10110100
 222   1          C825322D = 0xff;
 223   1          C825322D = 0xff;
 224   1      
 225   1          C82532C = 0x74;  // 01110100
 226   1          C825321D = 0xff;
 227   1          C825321D = 0xff;
 228   1      
 229   1          C82532C = 0x34;  // 00110100
 230   1          C825320D = 0xff;
 231   1          C825320D = 0xff;
 232   1      
 233   1          C82533C = 0xb4;  // 10110100
 234   1          C825332D = 0xff;
 235   1          C825332D = 0xff;
 236   1      
 237   1          C82533C = 0x74;  // 01110100
 238   1          C825331D = 0xff;
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 5   

 239   1          C825331D = 0xff;
 240   1      
 241   1          C82533C = 0x34;  // 00110100
 242   1          C825330D = 0xff;
 243   1          C825330D = 0xff;
 244   1      
 245   1          C82534C = 0xb4;  // 10110100
 246   1          C825342D = 0xff;
 247   1          C825342D = 0xff;
 248   1      
 249   1          C82534C = 0x74;  // 01110100
 250   1          C825341D = 0xff;
 251   1          C825341D = 0xff;
 252   1      
 253   1          C82534C = 0x34;  // 00110100
 254   1          C825340D = 0xff;
 255   1          C825340D = 0xff;
 256   1      
 257   1          C82535C = 0xb4;  // 10110100
 258   1          C825352D = 0xff;
 259   1          C825352D = 0xff;
 260   1      
 261   1          C82535C = 0x74;  // 01110100
 262   1          C825351D = 0xff;
 263   1          C825351D = 0xff;
 264   1      
 265   1          C82535C = 0x34;  // 00110100
 266   1          C825350D = 0xff;
 267   1          C825350D = 0xff;
 268   1          for (i = 0; i < 67; i++) {
 269   2              DCS_Send[i] = 0;
 270   2          }
 271   1          for (i = 0; i <= 7; i++) {
 272   2              DoseRata[i] = 0;  // Ã¿×éÌ½Í·²âµÃµÄ¼ÁÁ¿ÂÊ
 273   2          }
 274   1          Var_Led = 0xff;  // ledÖ¸Ê¾
 275   1          Led573 = Var_Led;
 276   1          EX0 = 0;                // ¹ØÍâ²¿ÖĞ¶Ï0
 277   1          /*¶¨Ê±¼ÆÊıÆ÷µÄ³õÊ¼»¯*/  // AJ1-,ÒÆ¶¯ÖÁ¶¨Ê±ÖĞ¶ÏÀï¿ªGate,8253¿ªÆô¼ÆÊı
 278   1          Flag8253Cnting = 1;
 279   1          NumT0 = 0;
 280   1      }
 281          /************************************
 282           *ÏÔÊ¾¼ÆÊı
 283           ************************************/
 284          void ShowData()
 285          {
 286   1          uchar i, m, j, k;  // AE1-:Var1ÓÃÀ´ÅĞ¶ÏÊ¹ÓÃµÄÌ½²âÆ÷µÄ¾Ö²¿±äÁ¿£¬Ïàµ±ÓÚChannel_Detector,²»ÔÙĞèÒª
 287   1          ulong count_temp, jishuguan_count_temp, dianlishi_count_temp;
 288   1          float idata temp, jtemp, yudecide, jishuguan_rata, jishuguan_jtemp, dianlishi_jtemp;
 289   1          double yu, yudata, mtemp;
 290   1          uchar Tbcd[12];  // ²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 291   1          Lcd_Clear();
 292   1          /**³ÌĞòËµÃ÷:
 293   1          **1,Îª±£Ö¤¼´Ê¹¶à¸öÍ¨µÀ²»ÔÚÍ¬Ò»Á¿³Ì£¬¸ßÁ¿³ÌµÄÍ¨µÀÒ²ÄÜÓĞÆäÏìÓ¦¸ü¿ìµÄ¸üĞÂËÙ¶È£¬³ÌĞòÒ»Ãë¼ÆÊıÒ»´Î£¬10Ãë¼ÆÊı
             -ÎªÊ®´ÎÒ»Ãë¼ÆÊıµÄÏà¼Ó
 294   1          **  £¬¼ÁÁ¿ÂÊÏÔÊ¾Ò»ÃëË¢ĞÂÒ»´Î¡£
 295   1          **2,³ÌĞòÖĞ¼ÆÊıÂÊ¼ÆËã¡¢Á¿³Ì»»µ²¡¢¼ÁÁ¿¼ÆËãÏÔÊ¾¸÷²¿·Ö·Ö¿ªÖ´ĞĞ
 296   1          */
 297   1          for (i = 0; i <= 7; i++)  // 8¸öÌ½Í·Öğ¸ö¼ì²â
 298   1          {
 299   2              /**
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 6   

 300   2               * 1.±éÀúÃ¿Ò»¸öÌ½Í·£¨0~7£©£»
 301   2               * 2.ÏÈ´Óbuf£¨´Ó8253¼ÆÊıÆ÷ÖĞÈ¡»ØµÄ¼ÆÊı£©ÖĞ¼ÆËã¼ÆÊı£¬¸ß8Î»*256+µÍ8Î»£¬¼ÇÂ¼Àú´Î¼ÆÊıÖµ£¬Ã¿3Ãë¼ÆÊıÒ»´Î
             -·ÀÖ¹Òç³ö£»
 302   2               * 3.¸ù¾İÃ¿´ÎµÄ¼ÆÊı£¨3S¼ÆÊıÊ±³¤£©ÒÔ¼°µ±Ç°Á¿³ÌºÍÔ¤ÏÈÈ·¶¨µÄ»»µ²ÆµÂÊ£¬ÅĞ¶Ï»»µ²ºÍÖ´ĞĞ²¢¼ÇÂ¼Àú´ÎÁ¿³ÌµµÎ
             -»ĞÅÏ¢£»
 303   2               * 4.ĞèÒª¸ù¾İÀúÊ·µÄµµÎ»ĞÅÏ¢½øĞĞÅĞ¶Ï£¬»»µ²ºóµÄ²Ù×÷Óë²»»»µ²µÄ²Ù×÷²»Í¬£¬¹Ê·Ö¿ªÖ´ĞĞ£»
 304   2               * 5.
 305   2               **/
 306   2              if (Channel_Detector[i][0] == Channel_Detector[i][1])  // µ±Ç°Ò»´ÎÁ¿³ÌºÍ´Ë´ÎÁ¿³ÌÒ»ÑùÊ±
 307   2              {
 308   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊı3Ãë£¬Ö±½ÓÓÃÀ´¼
             -ÆËã
 309   3                  {
 310   4                      Real_Count[i] = 0;          // ´ËÁ¿³ÌÃ¿´Î¶¼ÒªÇåÁã
 311   4                      Count[i][0] = Count[i][1];  // ÀúÊ·¼ÆÊı¸üĞÂ
 312   4                      Count[i][1] = Count[i][2];
 313   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 314   4                      {
 315   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];  // ¼ÓÒ»ÊÇÒòÎªÔÚ¼ÆÊıÖÜÆÚÄÚ»áÓÉÓ²¼
             -ş¸øÒ»¸öÂö³å
 316   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 317   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 318   4                      {
 319   5                          Count[i][2] = buf[31] * 256 + buf[30];
 320   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 321   5                      }
 322   4                      Calculated[i] = 1;                                                                        
             -  // ¼ÆËã¹ı±êÖ¾
 323   4                      if ((Count[i][1] < (37 * Refresh_Time)) && (Count[i][2] < (37 * Refresh_Time)) && (i < 7))
             -  // Á¿³ÌÇĞ»»Ç°7¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 324   4                      {
 325   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 326   5                          Channel_Detector[i][1] = 3;
 327   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 328   5                          Var_Signal2 = Var_Signal2 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 329   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 330   5                      }
 331   4                      if ((Count[i][1] < (28 * Refresh_Time)) && (Count[i][2] < (28 * Refresh_Time)) && (i == 7)
             -)  // Á¿³ÌÇĞ»»µÚ°Ë¸öÌ½Í·ÅĞ¶¨Ìõ¼ş
 332   4                      {
 333   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 334   5                          Channel_Detector[i][1] = 3;
 335   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 336   5                          Var_Signal2 = Var_Signal2 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 337   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 338   5                      }
 339   4                      Real_Count_Display[i] = (double)(Real_Count[i])*20.0;
 340   4                      Channel_Display[i] = 4;
 341   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 342   4                  }
 343   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 344   3                  {
 345   4                      Count[i][0] = Count[i][1];
 346   4                      Count[i][1] = Count[i][2];
 347   4                      if (i < 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 348   4                      {
 349   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 350   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 351   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 352   4                      {
 353   5                          Count[i][2] = buf[31] * 256 + buf[30];
 354   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 7   

 355   5                      }
 356   4                      Calculated[i] = 1;                                                                        
             -      // ¼ÆËã¹ı±êÖ¾
 357   4                      if ((Count[i][1] > (5719 * Refresh_Time)) && (Count[i][2] > (5719 * Refresh_Time)) && (i <
             - 7))  // Á¿³ÌÇĞ»»
 358   4                      {
 359   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 360   5                          Channel_Detector[i][1] = 4;
 361   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 362   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 363   5                          Var_Signal3 = Var_Signal3 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 364   5                      }
 365   4                      if ((Count[i][1] > (7447 * Refresh_Time)) && (Count[i][2] > (7447 * Refresh_Time)) && (i =
             -= 7))  // Á¿³ÌÇĞ»»
 366   4                      {
 367   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 368   5                          Channel_Detector[i][1] = 4;
 369   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 370   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 371   5                          Var_Signal3 = Var_Signal3 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 372   5                      }
 373   4                      if (((Count[i][1] < (35 * Refresh_Time)) && (Count[i][2] < (35 * Refresh_Time))) && (i != 
             -7))  // µÚÆß¸öÌ½Í·Ö»ÓĞÁ½¸öÁ¿³Ì
 374   4                      {
 375   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 376   5                          Channel_Detector[i][1] = 2;
 377   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 378   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 379   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 380   5                      }
 381   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 382   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
 383   4                      Channel_Display[i] = 3;
 384   4                      Real_Count[i] = 0;
 385   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5719) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 386   4                          (i < 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 387   4                      {
 388   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 389   5                          Channel_Detector[i][1] = 4;
 390   5                          Display_Flag[i] = 0;
 391   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 392   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 393   5                          Var_Signal3 = Var_Signal3 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 394   5                      }
 395   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 7447) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]) &&
 396   4                          (i == 7))  // Á¿³ÌÇĞ»»,¼ÓºóÁ½¾äÊÇ·ÀÖ¹ÖØ¸´»»µ²
 397   4                      {
 398   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 399   5                          Channel_Detector[i][1] = 4;
 400   5                          Display_Flag[i] = 0;
 401   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 402   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 403   5                          Var_Signal3 = Var_Signal3 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 404   5                      }
 405   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 35) && (Channel_Detector[i][0
             -] == Channel_Detector[i][1]) && (i != 7)) {
 406   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 407   5                          Channel_Detector[i][1] = 2;
 408   5                          Display_Flag[i] = 0;
 409   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 8   

 410   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 411   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 412   5                      }
 413   4                  }
 414   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 415   3                  {
 416   4                      Count[i][0] = Count[i][1];
 417   4                      Count[i][1] = Count[i][2];
 418   4                      Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 419   4                      Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 420   4                      Calculated[i] = 1;                                                                   // ¼Æ
             -Ëã¹ı±êÖ¾
 421   4                      if ((Count[i][1] > (5411 * Refresh_Time)) && (Count[i][2] > (5411 * Refresh_Time)))  // Á¿
             -³ÌÇĞ»»
 422   4                      {
 423   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 424   5                          Channel_Detector[i][1] = 3;
 425   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 426   5                          Var_Signal2 = Var_Signal2 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 427   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 428   5                      }
 429   4                      if ((Count[i][1] < (158 * Refresh_Time)) && (Count[i][2] < (158 * Refresh_Time))) {
 430   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 431   5                          Channel_Detector[i][1] = 1;
 432   5                          Var_Signal1 = Var_Signal1 & Svar0[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬µÍµçÆ½¸ßÑ¹¿ª
 433   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),µÍµçÆ½
 434   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 435   5                      }
 436   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 437   4                      Display_Flag[i] = 1;  // ÔÊĞíÏÔÊ¾
 438   4                      Channel_Display[i] = 2;
 439   4                      Real_Count[i] = 0;
 440   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) > 5411) && (Channel_Detector[i]
             -[0] == Channel_Detector[i][1]))  // Á¿³ÌÇĞ»»
 441   4                      {
 442   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 443   5                          Channel_Detector[i][1] = 3;
 444   5                          Display_Flag[i] = 0;
 445   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 446   5                          Var_Signal2 = Var_Signal2 | Svar1[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),¸ßµçÆ½
 447   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 448   5                      }
 449   4                      if ((Display_Flag[i] == 1) && ((Real_Count_Display[i] / 5) < 158) && (Channel_Detector[i][
             -0] == Channel_Detector[i][1])) {
 450   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 451   5                          Channel_Detector[i][1] = 1;
 452   5                          Display_Flag[i] = 0;
 453   5                          Var_Signal1 = Var_Signal1 & Svar0[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬µÍµçÆ½¸ßÑ¹¿ª
 454   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),µÍµçÆ½
 455   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 456   5                      }
 457   4                  }
 458   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 459   3                  {
 460   4                      Count[i][0] = Count[i][1];
 461   4                      Count[i][1] = Count[i][2];
 462   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 463   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 464   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
 465   4                      if ((Count[i][0] > (6019 * Refresh_Time)) && (Count[i][1] > (6019 * Refresh_Time)) && (Cou
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 9   

             -nt[i][2] > (6019 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 466   4                      {
 467   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 468   5                          Channel_Detector[i][1] = 2;
 469   5                          Var_Signal1 = Var_Signal1 | Svar1[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬¸ßµçÆ½¸ßÑ¹¹Ø
 470   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),µÍµçÆ½
 471   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 472   5                      }
 473   4                      if ((Count[i][0] < (1.32 * Refresh_Time)) && (Count[i][1] < (1.32 * Refresh_Time)) && (Cou
             -nt[i][2] < (1.32 * Refresh_Time))) {
 474   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 475   5                          Channel_Detector[i][1] = 0;
 476   5                          Var_Signal1 = Var_Signal1 & Svar0[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬µÍµçÆ½¸ßÑ¹¿ª
 477   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),µÍµçÆ½
 478   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 479   5                      }
 480   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 481   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 482   4                      Average_Times[i] += 1;
 483   4                      if (Average_Times[i] < 5) {
 484   5                          switch (Average_Times[i]) {
 485   6                          case 1:
 486   6                              Real_Count_Display[i] = Average_Counts[i][0];
 487   6                              break;
 488   6                          case 2:
 489   6                              Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
 490   6                              break;
 491   6                          case 3:
 492   6                              Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
 493   6                              break;
 494   6                          case 4:
 495   6                              Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
 496   6                              break;
 497   6                          }
 498   5                      }
 499   4                      if (Average_Times[i] == 5) {
 500   5                          Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
 501   5                                                  Average_Counts[i][4] * a4;
 502   5                          for (j = 0; j < 4; j++) {
 503   6                              Average_Counts[i][j] = Average_Counts[i][j + 1];
 504   6                          }
 505   5                          Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
 506   5                      }
 507   4                      Display_Flag[i] = 1;
 508   4                      Channel_Display[i] = 1;
 509   4                      // if(Count_Times[i]==2)
 510   4                      //{
 511   4                      // Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 512   4                      // Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 513   4                      // Count_Times[i]=0;
 514   4                      // Real_Count[i]=0;
 515   4                      //}
 516   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 517   4                      //{
 518   4                      // for(j=0;j<Average_Times[i];j++)
 519   4                      //{
 520   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 521   4                      //}
 522   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 10  

 523   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 524   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 525   4                      // Channel_Display[i]=0;
 526   4                      // if(Average_Times[i]==5)
 527   4                      //{
 528   4                      // for(j=0;j<(Average_Times[i]-1);j++)
 529   4                      //{
 530   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 531   4                      //}
 532   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 533   4                      //}
 534   4                      //}
 535   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>6019)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 536   4                      //{
 537   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 538   4                      // Channel_Detector[i][1]=2;
 539   4                      // Display_Flag[i]=0;
 540   4                      // Var_Signal1=Var_Signal1&Svar0[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬µÍµçÆ½
 541   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 542   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 543   4                      // }
 544   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)<1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))
 545   4                      //{
 546   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 547   4                      // Channel_Detector[i][1]=0;
 548   4                      // Display_Flag[i]=0;
 549   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 550   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
 551   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 552   4                      // }
 553   4                  }
 554   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬2´Î¶¨Ê±¼ÆÊı3ÃëÏà¼Ó£¬5´
             -ÎÆ½»¬Æ½¾ù
 555   3                  {
 556   4                      Count[i][0] = Count[i][1];
 557   4                      Count[i][1] = Count[i][2];
 558   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 559   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 560   4                      Calculated[i] = 1;                                                                        
             -                                    // ¼ÆËã¹ı±êÖ¾
 561   4                      if ((Count[i][0] > (1.32 * Refresh_Time)) && (Count[i][1] > (1.32 * Refresh_Time)) && (Cou
             -nt[i][2] > (1.32 * Refresh_Time)))  // Á¿³ÌÇĞ»»
 562   4                      {
 563   5                          Channel_Detector[i][0] = Channel_Detector[i][1];
 564   5                          Channel_Detector[i][1] = 1;
 565   5                          Var_Signal1 = Var_Signal1 & Svar0[i];  // ¿ØÖÆĞÅºÅ1½Ó¼ÆÊı¹Ü£¬µÍµçÆ½¸ßÑ¹¿ª
 566   5                          Var_Signal2 = Var_Signal2 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(8),µÍµçÆ½
 567   5                          Var_Signal3 = Var_Signal3 & Svar0[i];  // ¿ØÖÆĞÅºÅ2½ÓµçÀëÊÒ10(6),µÍµçÆ½
 568   5                      }
 569   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 570   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 571   4                      Average_Times[i] += 1;
 572   4                      if (Average_Times[i] < 5) {
 573   5                          switch (Average_Times[i]) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 11  

 574   6                          case 1:
 575   6                              Real_Count_Display[i] = Average_Counts[i][0];
 576   6                              break;
 577   6                          case 2:
 578   6                              Real_Count_Display[i] = Average_Counts[i][0] * 0.4 + Average_Counts[i][1] * 0.6;
 579   6                              break;
 580   6                          case 3:
 581   6                              Real_Count_Display[i] = Average_Counts[i][0] * a3 + Average_Counts[i][1] * a3 + Av
             -erage_Counts[i][2] * a4;
 582   6                              break;
 583   6                          case 4:
 584   6                              Real_Count_Display[i] = Average_Counts[i][0] * a2 + Average_Counts[i][1] * a2 + Av
             -erage_Counts[i][2] * a3 + Average_Counts[i][3] * a4;
 585   6                              break;
 586   6                          }
 587   5                      } else if (Average_Times[i] == 5) {
 588   5                          Real_Count_Display[i] = Average_Counts[i][0] * a0 + Average_Counts[i][1] * a1 + Averag
             -e_Counts[i][2] * a2 + Average_Counts[i][3] * a3 +
 589   5                                                  Average_Counts[i][4] * a4;
 590   5                          for (j = 0; j < 4; j++) {
 591   6                              Average_Counts[i][j] = Average_Counts[i][j + 1];
 592   6                          }
 593   5                          Average_Times[i] -= 1;  // ÎªÁËÈÃ´ÎÊı
 594   5                      }
 595   4                      Display_Flag[i] = 1;
 596   4                      Channel_Display[i] = 0;
 597   4                      // if(Count_Times[i]==2)
 598   4                      //{
 599   4                      //  Average_Counts[i][Average_Times[i]]=Real_Count[i];//½«¼ÆÊıÂÊ¸³Öµ¸øÆ½¾ùÖµ
 600   4                      //  Average_Times[i]+=1;//Æ½»¬Æ½¾ù´ÎÊı¼Ó1
 601   4                      //  Count_Times[i]=0;
 602   4                      //  Real_Count[i]=0;
 603   4                      // }
 604   4                      // if((Average_Times[i]>=2)&&(Average_Times[i]<=5))//ÔÚÓĞ2¸ö¼ÆÊıÖµºó¿ªÊ¼ËãÆ½¾ùÖµ²¢ÏÔÊ¾
 605   4                      //{
 606   4                      // for(j=0;j<Average_Times[i];j++)
 607   4                      //{
 608   4                      // Real_Count_Display[i]+=(float)(Average_Counts[i][j]);
 609   4                      //}
 610   4                      // Real_Count_Display[i]/=(float)(Average_Times[i]);
 611   4                      // Real_Count_Display[i]*=(60/(Refresh_Time*2));//ÒòÎªÒª»»Ëã³ÉCPM
 612   4                      // Display_Flag[i]=1;//ÔÊĞíÏÔÊ¾
 613   4                      // Channel_Display[i]=0;
 614   4                      // if(Average_Times[i]==5)
 615   4                      //{
 616   4                      // for(j=0;j<(Average_Times[i]-1);j++)
 617   4                      //{
 618   4                      // Average_Counts[i][j]=Average_Counts[i][j+1];
 619   4                      //}
 620   4                      // Average_Times[i]-=1;//ÎªÁËÈÃ´ÎÊı
 621   4                      //}
 622   4                      //}
 623   4                      // if((Display_Flag[i]==1)&&((Real_Count_Display[i]/60)>1.32)&&(Channel_Detector[i][0]==Ch
             -annel_Detector[i][1]))//Á¿³ÌÇĞ»»
 624   4                      //{
 625   4                      // Channel_Detector[i][0]=Channel_Detector[i][1];
 626   4                      // Channel_Detector[i][1]=1;
 627   4                      // Display_Flag[i]=0;
 628   4                      // Var_Signal1=Var_Signal1|Svar1[i];                                       //¿ØÖÆĞÅºÅ1½Ó¼Æ
             -Êı¹Ü£¬Îª¸ßµçÆ½
 629   4                      // Var_Signal2=Var_Signal2&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(8),µÍµçÆ½
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 12  

 630   4                      // Var_Signal3=Var_Signal3&Svar0[i];                                       //¿ØÖÆĞÅºÅ2½Óµç
             -ÀëÊÒ10(6),µÍµçÆ½
 631   4                      // }
 632   4                  }
 633   3              } else if (Channel_Detector[i][0] != Channel_Detector[i][1])  // µ±Ç°ºóÁ½´Î¼ÆÊıµÄÁ¿³Ì²»Ò»Ñù
 634   2              {
 635   3                  if ((Channel_Detector[i][1] == 4) && (Calculated[i] == 0))  // DL3Á¿³Ì£¬¶¨Ê±¼ÆÊıÒ»Ãë£¬Ö±½ÓÓÃÀ´
             -¼ÆËã
 636   3                  {
 637   4                      for (k = 0; k <= 2; k++)  // ³õÊ¼»¯µ¥´ÎÌøµµÅĞ¶Ï±äÁ¿£¬·ÀÖ¹ÒâÍâ½µµµ¡¾2024¡¿ºÃÏñÃ»Ê²Ã´±ØÒª£¬´
             -ıÈ·¶¨
 638   4                      {
 639   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 640   5                      }
 641   4                      Real_Count[i] = 0;  // Ìø×ªµ½´ËÁ¿³ÌĞèÒªÇåÁã
 642   4                      if (i < 7)          // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 643   4                      {
 644   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 645   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 646   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 647   4                      {
 648   5                          Count[i][2] = buf[31] * 256 + buf[30];
 649   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 650   5                      }
 651   4                      Calculated[i] = 1;  // ¼ÆËã¹ı±êÖ¾
 652   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 653   4                      Display_Flag[i] = 1;  // Ö±½ÓÔÊĞíÏÔÊ¾
 654   4                      Channel_Display[i] = 4;
 655   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 656   4                  }
 657   3                  if ((Channel_Detector[i][1] == 3) && (Calculated[i] == 0))  // DL2Á¿³Ì£¬Á½´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 658   3                  {
 659   4                      for (k = 0; k <= 2; k++) {
 660   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 661   5                      }
 662   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 663   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 664   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 665   4                      {
 666   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 667   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
 668   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 669   4                      {
 670   5                          Count[i][2] = buf[31] * 256 + buf[30];
 671   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 672   5                      }
 673   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 674   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 675   4                      Channel_Display[i] = 3;
 676   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 677   4                  }
 678   3                  if ((Channel_Detector[i][1] == 2) && (Calculated[i] == 0))  // DL1Á¿³Ì£¬5´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó
 679   3                  {
 680   4                      for (k = 0; k <= 2; k++) {
 681   5                          Count[i][k] = 2000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 682   5                      }
 683   4                      Real_Count[i] = 0;    // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 684   4                      Display_Flag[i] = 0;  // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 685   4                      if (i < 7)            // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 686   4                      {
 687   5                          Count[i][2] = buf[4 * i + 5] * 256 + buf[4 * i + 4];
 688   5                          Real_Count[i] = (double)(buf[4 * i + 5] * 256 + buf[4 * i + 4]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 13  

 689   5                      } else if (i == 7)  // Ç°6¸öÌ½Í·ºÍµÚÆß¸öÌ½Í·È¡¼ÆÊıÎ»ÖÃ²»Ò»Ñù
 690   4                      {
 691   5                          Count[i][2] = buf[31] * 256 + buf[30];
 692   5                          Real_Count[i] = (double)(buf[31] * 256 + buf[30]);
 693   5                          Channel_Detector[i][1] = 3;
 694   5                          Channel_Detector[i][0] = 3;
 695   5                      }
 696   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 697   4                      Real_Count_Display[i] = (double)(Real_Count[i]) * 20.0;
 698   4                      Channel_Display[i] = 2;
 699   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 700   4                  }
 701   3                  if ((Channel_Detector[i][1] == 1) && (Calculated[i] == 0))  // GM2Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 702   3                  {
 703   4                      for (k = 0; k <= 2; k++) {
 704   5                          Count[i][k] = 1000 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 705   5                      }
 706   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 707   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 708   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 709   4                      for (j = 0; j < 10; j++) {
 710   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 711   5                      }
 712   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 713   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 714   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 715   4      
 716   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 717   4                      Average_Times[i] += 1;
 718   4                      Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
 719   4                      Display_Flag[i] = 1;
 720   4                      Channel_Display[i] = 1;
 721   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 722   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 723   4                  }
 724   3                  if ((Channel_Detector[i][1] == 0) && (Calculated[i] == 0))  // GM1Á¿³Ì£¬10´Î¶¨Ê±¼ÆÊıÒ»ÃëÏà¼Ó£¬
             -5´ÎÆ½»¬Æ½¾ù
 725   3                  {
 726   4                      for (k = 0; k <= 2; k++) {
 727   5                          Count[i][k] = 1 * Refresh_Time;  // Ò»Ãë¼ÆÊıÊ¹Æä²»»»µµ
 728   5                      }
 729   4                      Real_Count[i] = 0;     // Ìø×ªÁ¿³ÌºóĞèÒªÇåÁã
 730   4                      Display_Flag[i] = 0;   // ÏÔÊ¾¼°»»µ²±êÖ¾ÇåÁã
 731   4                      Average_Times[i] = 0;  // Æ½»¬Æ½¾ù´ÎÊıÇåÁã
 732   4                      for (j = 0; j < 10; j++) {
 733   5                          Average_Counts[i][j] = 0;  // Æ½»¬Æ½¾ùÇåÁã
 734   5                      }
 735   4                      Count[i][2] = buf[4 * i + 3] * 256 + buf[4 * i + 2];
 736   4                      Real_Count[i] = (double)(buf[4 * i + 3] * 256 + buf[4 * i + 2]);
 737   4                      Real_Count[i] *= 20.0;  // »»ËãÎªCPM(×¢Òâ¶ÔÓ¦µÄÊÇ3ÃëµÄ Refresh Time)
 738   4      
 739   4                      Average_Counts[i][Average_Times[i]] = Real_Count[i];
 740   4                      Average_Times[i] += 1;
 741   4                      Real_Count_Display[i] = Average_Counts[i][Average_Times[i]];
 742   4                      Display_Flag[i] = 1;
 743   4                      Channel_Display[i] = 0;
 744   4                      Calculated[i] = 1;                                // ¼ÆËã¹ı±êÖ¾
 745   4                      Channel_Detector[i][0] = Channel_Detector[i][1];  // ¸üĞÂÁ¿³ÌÀúÊ·×´Ì¬
 746   4                  }
 747   3              }
 748   2          }
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 14  

 749   1          /*½«¸ù¾İ¼ÁÁ¿ÂÊÖµÖØĞÂÉèÖÃµÄÌ½Í·ĞÅºÅ¸Ä±ä±êÖ¾Ö´ĞĞ*/
 750   1          Signal1 = Var_Signal1;  // Ì½Í·ĞÅºÅ×ª±ä
 751   1          Signal2 = Var_Signal3;  // 2016-8-26µ÷»»Var_Signal2,Var_Signal3£¬ÒòÎªÁ½ÕßÔÚÓ²¼şÉÏ±»Åª»ìÁË
 752   1          Signal3 = Var_Signal2;
 753   1          /*AC1+ÔÚÕâÀïbuf(Ê®ÁùÎ»¸ßµÍ¼ÆÊıÊı¾İ)Òª×ª»»³Éuint ÀàĞÍµÄTdataÊı¾İ,²¢ÇÒÌ½Í·ÊıÄ¿ÒªÇå³ş
 754   1          ¼ÓÈëÑ¡Ì½Í·±êÖ¾*/
 755   1          if (measure_flag)  //(1)measure_flagÔÚInit_RAMÖĞ³õÊ¼»¯±äÎª1
 756   1          {
 757   2              for (j = 0; j < 8; j++)  //(2)´æ¼ÆÊıÇøÎªbuf[3]-buf[32];Ì½Í·¸öÊı±êÖ¾
 758   2              {
 759   3                  Tdata = (uint)(Count[j][2] / 3);  // Ì½Í·¼ÆÊıÂÊuint ,×ÏÉ«ÎªÈ«¾Ö±äÁ¿£¬À¶É«Îª¾Ö²¿±äÁ¿
 760   3                  jtemp = 0;                        // float
 761   3                  yudata = 0;                       // double
 762   3                  mtemp = 0;                        // double
 763   3                  yu = 0;                           // double
 764   3                  Tbcd[5] = 0;                      // uchar Êı×é¹²12Î»£¬²âµÃµÄÊı¾İµÄbcdÂëÊı×é
 765   3                  Tbcd[4] = 0;
 766   3                  Tbcd[3] = 0;
 767   3                  Tbcd[2] = 0;
 768   3                  Tbcd[1] = 0;
 769   3                  Tbcd[0] = 0;
 770   3                  m = j * 10;  // ±£Áô
 771   3                  /*********ÅĞ¶Ï¼ÆÊıÂÊ***********/
 772   3                  /*********Ç°Æß¸öÌ½Í·Ì½²âÆ÷ÉèÖÃ£¬È¡µÃ8253¼ÆÊıÖµ¼ÇÂ¼ÔÚTdata*/
 773   3                  /**¡¾2024¡¿¸ù¾İÍ¨µÀĞòºÅ¼ÆËã±ê¶¨²ÎÊı£¬ÓÃÓÚCPMºÍ¼ÁÁ¿ÂÊµÄ×ª»»**/
 774   3                  if (j < 7)  //(3)Ç°Æß¸öÌ½Í·¼ÈÓĞµçÀëÊÒÒ²ÓĞ¼ÆÊıÆ÷£¬µÚ°Ë¸öÖ»ÓĞµçÀëÊÒ¹Ê·Ö¿ª´¦Àí
 775   3                  {
 776   4                      Display_Flag[j] = 0;
 777   4                      if (Channel_Display[j] == 0) {
 778   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 779   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 1000000.0;
 780   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
 781   5                      } else if (Channel_Display[j] == 1) {
 782   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 783   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) / 1000000.0;
 784   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 785   5                      } else if (Channel_Display[j] == 2) {
 786   5                          Para[4] = (float)(DataThouth[m + 5] * 1000 + DataCent[m + 5] * 100 + DataTenth[m + 5] 
             -* 10 + DataGe[m + 5]);  // µ÷½Ú²ÎÊı
 787   5                          Para[5] = (float)(DataThouth[m + 6] * 1000 + DataCent[m + 6] * 100 + DataTenth[m + 6] 
             -* 10 + DataGe[m + 6]) / 1000.0;
 788   5                          DoseRata[j] = (float)(Para[5] * ((float)Real_Count_Display[j] - Para[4]));
 789   5                      } else if (Channel_Display[j] == 3) {
 790   5                          Para[6] = (float)(DataThouth[m + 7] * 1000 + DataCent[m + 7] * 100 + DataTenth[m + 7] 
             -* 10 + DataGe[m + 7]);  // µ÷½Ú²ÎÊı
 791   5                          Para[7] = (float)(DataThouth[m + 8] * 1000 + DataCent[m + 8] * 100 + DataTenth[m + 8] 
             -* 10 + DataGe[m + 8]) / 10.0;
 792   5                          DoseRata[j] = (float)(Para[7] * ((float)Real_Count_Display[j] - Para[6]));
 793   5                      } else if (Channel_Display[j] == 4) {
 794   5                          Para[8] = (float)(DataThouth[m + 9] * 1000 + DataCent[m + 9] * 100 + DataTenth[m + 9] 
             -* 10 + DataGe[m + 9]);  // µ÷½Ú²ÎÊı
 795   5                          Para[9] = (float)((DataThouth[m + 10] * 1000 + DataCent[m + 10] * 100 + DataTenth[m + 
             -10] * 10 + DataGe[m + 10]) * 10.0);
 796   5                          DoseRata[j] = (float)(Para[9] * ((float)Real_Count_Display[j] - Para[8]));
 797   5                      }
 798   4                  } else if (j == 7) {
 799   4                      Display_Flag[j] = 0;
 800   4                      if (Channel_Display[j] == 3) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 15  

 801   5                          Para[0] = (float)(DataThouth[m + 1] * 1000 + DataCent[m + 1] * 100 + DataTenth[m + 1] 
             -* 10 + DataGe[m + 1]);  // µ÷½Ú²ÎÊı
 802   5                          Para[1] = (float)(DataThouth[m + 2] * 1000 + DataCent[m + 2] * 100 + DataTenth[m + 2] 
             -* 10 + DataGe[m + 2]) / 10.0;
 803   5                          DoseRata[j] = (float)(Para[1] * ((float)Real_Count_Display[j] - Para[0]));
 804   5                      } else if (Channel_Display[j] == 4) {
 805   5                          Para[2] = (float)(DataThouth[m + 3] * 1000 + DataCent[m + 3] * 100 + DataTenth[m + 3] 
             -* 10 + DataGe[m + 3]);  // µ÷½Ú²ÎÊı
 806   5                          Para[3] = (float)(DataThouth[m + 4] * 1000 + DataCent[m + 4] * 100 + DataTenth[m + 4] 
             -* 10 + DataGe[m + 4]) * 10.0;
 807   5                          DoseRata[j] = (float)(Para[3] * ((float)Real_Count_Display[j] - Para[2]));
 808   5                      }
 809   4                  }
 810   3                  /**********µ¥Î»»»ËãºóÎªjtemp************/
 811   3                  if (DoseRata[j] < 0)  // ĞŞ¸Ä2012.6.15Í¨¹ı¾ùÖµ¼ÆËã
 812   3                  {
 813   4                      jtemp = 0.0;
 814   4                      Flag_dw = 1;
 815   4                  } else if (DoseRata[j] >= 0)  // µ¥Î»ÎªuGy/h
 816   3                  {
 817   4                      if (DoseRata[j] < 1000)  // Mean_Value<1000±íÊ¾µ¥Î»ÎªuGy/h
 818   4                      {
 819   5                          jtemp = (float)DoseRata[j];
 820   5                          Flag_dw = 1;
 821   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 1000000))  // 1000<Mean_Value<1000000±í
             -Ê¾mGy/h
 822   4                      {
 823   5                          jtemp = (float)(DoseRata[j] / 1000);
 824   5                          Flag_dw = 2;
 825   5                      } else if (DoseRata[j] >= 1000000)  // Mean_Value>=1000000±íÊ¾Gy/h
 826   4                      {
 827   5                          jtemp = (float)(DoseRata[j] / 1000000);
 828   5                          Flag_dw = 3;
 829   5                      }
 830   4                  }
 831   3                  /*****DCS·¢ËÍÊı¾İ×¼±¸****/
 832   3                  if (DoseRata[j] < 0)  // Èô¼ÆËã¼ÁÁ¿Ğ¡ÓÚÁãÏòDCS·¢ËÍ0
 833   3                  {
 834   4                      DCS_Send[j * 4 + 4] = 0x30;
 835   4                      DCS_Send[j * 4 + 5] = 0x30;
 836   4                      DCS_Send[j * 4 + 6] = 0x30;
 837   4                      DCS_Send[j * 4 + 7] = 0x30;
 838   4                  } else if (DoseRata[j] >= 0) {
 839   4                      if (DoseRata[j] < 1) {
 840   5                          temp = (float)DoseRata[j] * 1000;
 841   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 842   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 843   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 844   5                          DCS_Send[j * 4 + 7] = 0x30;
 845   5                      } else if ((DoseRata[j] >= 1) && (DoseRata[j] < 10)) {
 846   5                          temp = (float)DoseRata[j] * 100;
 847   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 848   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 849   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 850   5                          DCS_Send[j * 4 + 7] = 0x31;
 851   5                      } else if ((DoseRata[j] >= 10) && (DoseRata[j] < 100)) {
 852   5                          temp = (float)DoseRata[j] * 10;
 853   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 854   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 855   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 856   5                          DCS_Send[j * 4 + 7] = 0x32;
 857   5                      } else if ((DoseRata[j] >= 100) && (DoseRata[j] < 1000)) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 16  

 858   5                          temp = (float)DoseRata[j];
 859   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 860   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 861   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 862   5                          DCS_Send[j * 4 + 7] = 0x33;
 863   5                      } else if ((DoseRata[j] >= 1000) && (DoseRata[j] < 10000)) {
 864   5                          temp = (float)DoseRata[j] / 10.0;
 865   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 866   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 867   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 868   5                          DCS_Send[j * 4 + 7] = 0x34;
 869   5                      } else if ((DoseRata[j] >= 10000) && (DoseRata[j] < 100000)) {
 870   5                          temp = (float)DoseRata[j] / 100.0;
 871   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 872   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 873   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 874   5                          DCS_Send[j * 4 + 7] = 0x35;
 875   5                      } else if ((DoseRata[j] >= 100000) && (DoseRata[j] < 1000000)) {
 876   5                          temp = (float)DoseRata[j] / 1000.0;
 877   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 878   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 879   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 880   5                          DCS_Send[j * 4 + 7] = 0x36;
 881   5                      } else if ((DoseRata[j] >= 1000000) && (DoseRata[j] < 10000000)) {
 882   5                          temp = (float)DoseRata[j] / 10000.0;
 883   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 884   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 885   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 886   5                          DCS_Send[j * 4 + 7] = 0x37;
 887   5                      } else if ((DoseRata[j] >= 10000000) && (DoseRata[j] < 100000000)) {
 888   5                          temp = (float)DoseRata[j] / 100000.0;
 889   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 890   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 891   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 892   5                          DCS_Send[j * 4 + 7] = 0x38;
 893   5                      } else if ((DoseRata[j] >= 100000000) && (DoseRata[j] < 1000000000)) {
 894   5                          temp = (float)DoseRata[j] / 1000000.0;
 895   5                          DCS_Send[j * 4 + 4] = (uchar)((int)temp / 100) + 0x30;
 896   5                          DCS_Send[j * 4 + 5] = (uchar)((int)temp % 100 / 10) + 0x30;
 897   5                          DCS_Send[j * 4 + 6] = (uchar)((int)temp % 100 % 10) + 0x30;
 898   5                          DCS_Send[j * 4 + 7] = 0x39;
 899   5                      }
 900   4                  }
 901   3                  /***********¼ÁÁ¿ÂÊ×ª»»µ¥Î»ºó×ª»»³É¿ÉÒÔÏÔÊ¾µÄBCDÂë*************/
 902   3                  if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && 
             -(Tbcd[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
 903   3                  {
 904   4                      Tbcd[5] = (uchar)(((int)jtemp) / 100);       // °ÙÎ»
 905   4                      Tbcd[4] = (uchar)(((int)jtemp) % 100 / 10);  // Ê®Î»
 906   4                      Tbcd[3] = (uchar)(((int)jtemp) % 100 % 10);  // ¸öÎ»
 907   4                      count_temp = (jtemp - (int)jtemp) * 1000;    // ¼ÆËãĞ¡ÓÚ1µÄ²¿·Ö£¬°ÑĞ¡Êı²¿·Ö±ä´ó£¬±£ÁôÈıÎ»Ğ
             -¡Êı
 908   4                      Tbcd[2] = (uchar)(count_temp / 100);         // Ğ¡Ğ¡ÊıÊ®·ÖÎ»
 909   4                      Tbcd[1] = (uchar)(count_temp % 100 / 10);    // Ğ¡Êı°Ù·ÖÎ»
 910   4                      Tbcd[0] = (uchar)(count_temp % 100 % 10);    // Ğ¡ÊıÇ§·ÖÎ»
 911   4                      if (Flag_dw == 1)                            // ¸ù¾İTbcd[]¼ÆËãyudecide(float)ÓÃÀ´ÅĞ¶Ï¼ÁÁ¿Â
             -ÊÊÇ·ñ³¬¹ıãĞÖµ
 912   4                          yudecide = (float)(Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] * 
             -0.01 + Tbcd[0] * 0.001);
 913   4                      if (Flag_dw == 2)
 914   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 17  

 915   4                      if (Flag_dw == 3)
 916   4                          yudecide = (float)((Tbcd[5] * 100 + Tbcd[4] * 10 + Tbcd[3] + Tbcd[2] * 0.1 + Tbcd[1] *
             - 0.01 + Tbcd[0] * 0.001) * 1000000);
 917   4                  }
 918   3                  /***********ÅĞ¶ÏãĞÖµ²¢±¨¾¯*************/
 919   3                  mtemp = (YuThouth[j] + YuCent[j] * 0.1 + YuTenth[j] * 0.01);  // ÔİÊ±Ã»¸ù¾İÎ»ÊıĞŞ¸Ä2012.6.15
 920   3                  yu = (double)(pow(10, YuGe[j]));
 921   3                  yudata = (double)(mtemp * yu);
 922   3                  if (yudecide >= yudata)  // Èç¹û¼ÆÊı³¬¹ıÄ³Ò»¸ö·¶Î§£¬ÔòÉùÒô±¨¾¯
 923   3                  {
 924   4                      if ((Judge_Speak == 0) || (Speak_Alarm() == 1))  // ·äÃùÆ÷±¨¾¯£¬Speak_Alarm·µ»Ø1·äÃùÆ÷¹¤×÷
 925   4                      {
 926   5                          Flag_Warn = 1;  // ±¨¾¯±êÖ¾ÖÃÒ»
 927   5                      }
 928   4                      Flag_need_Flash[j] = 1;  // LEDÉÁË¸±êÖ¾ÖÃ1
 929   4                      State_Flash[j] = 1;
 930   4                      Var_Led = Var_Led & Svar0[j];  // LED±¨¾¯Ö¸Ê¾µÆ£¨char£©Svar0[8]={0xFE,0xFD,0xFB,0xF7,0xEF,
             -0xDF,0xBF,0x7F}
 931   4                  } else if (yudecide < yudata) {
 932   4                      Flag_need_Flash[j] = 0;
 933   4                      State_Flash[j] = 0;
 934   4                      Var_Led = Var_Led | Svar1[j];
 935   4                  }
 936   3                  /*AI1*¼ÁÁ¿ÂÊÏÔÊ¾Ó¦µ±ÔÚÌ½²âÆ÷±êÖ¾¸Ä±äÖ®Ç°******¼ÁÁ¿ÂÊÏÔÊ¾**********/
 937   3                  // if(Channel_Detector[j]==0)
 938   3                  //{
 939   3                  //  Txtext(10,13+(j*58),"Gh");                                                  //AH1ÏÔÊ¾Ì½Í·
 940   3                  //}
 941   3                  // else
 942   3                  //{
 943   3                  // Txtext(10,13+(j*58),"Dh");
 944   3                  //}
 945   3                  /*AI1*******¼ÁÁ¿ÂÊÏÔÊ¾**********/
 946   3                  if (Flag_need_Flash[j] == 0) {
 947   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
 948   5                          Txtext(10, 13 + (j * 58), "GM");  // AH1ÏÔÊ¾Ì½Í·
 949   5                      } else {
 950   5                          Txtext(10, 13 + (j * 58), "DL");
 951   5                      }
 952   4                      Tnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
 953   4                      Txtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
 954   4                      Tnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
 955   4                      Tnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
 956   4                      Tnumber(390, 13 + (j * 58), Average_Times[j]);
 957   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
 958   4                      {
 959   5                          Tnumber(130, 13 + (j * 58), Tbcd[5]);
 960   5                          Tnumber(160, 13 + (j * 58), Tbcd[4]);
 961   5                          Tnumber(190, 13 + (j * 58), Tbcd[3]);
 962   5                          Txtext(220, 13 + (j * 58), ".");
 963   5                          Tnumber(240, 13 + (j * 58), Tbcd[2]);
 964   5                          Tnumber(270, 13 + (j * 58), Tbcd[1]);
 965   5                          Tnumber(300, 13 + (j * 58), Tbcd[0]);
 966   5                          if (Tdata < 10)                          // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
 967   5                              Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
 968   5                          else if ((Tdata >= 10) && (Tdata < 100))
 969   5                              Tnumber(556, 13 + (j * 58), Tdata);
 970   5                          else if ((Tdata >= 100) && (Tdata < 1000))
 971   5                              Tnumber(536, 13 + (j * 58), Tdata);
 972   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
 973   5                              Tnumber(516, 13 + (j * 58), Tdata);
 974   5                          else if (Tdata >= 10000)
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 18  

 975   5                              Tnumber(496, 13 + (j * 58), Tdata);
 976   5                      } else {
 977   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
 978   5                          {
 979   6                              Tnumber(160, 13 + (j * 58), Tbcd[4]);
 980   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
 981   6                              Txtext(220, 13 + (j * 58), ".");
 982   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);
 983   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
 984   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
 985   6                              if (Tdata < 10)
 986   6                                  Tnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
 987   6                              else if ((Tdata >= 10) && (Tdata < 100))
 988   6                                  Tnumber(556, 13 + (j * 58), Tdata);
 989   6                              else if ((Tdata >= 100) && (Tdata < 1000))
 990   6                                  Tnumber(536, 13 + (j * 58), Tdata);
 991   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
 992   6                                  Tnumber(516, 13 + (j * 58), Tdata);
 993   6                              else if (Tdata >= 10000)
 994   6                                  Tnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
 995   6                          } else                                       // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
 996   5                          {
 997   6                              Tnumber(190, 13 + (j * 58), Tbcd[3]);
 998   6                              Txtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
 999   6                              Tnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
1000   6                              Tnumber(270, 13 + (j * 58), Tbcd[1]);
1001   6                              Tnumber(300, 13 + (j * 58), Tbcd[0]);
1002   6                              if (Tdata < 10)
1003   6                                  Tnumber(576, 13 + (j * 58), Tdata);   // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1004   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
1005   6                                  Tnumber(556, 13 + (j * 58), Tdata);
1006   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1007   6                                  Tnumber(536, 13 + (j * 58), Tdata);
1008   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1009   6                                  Tnumber(516, 13 + (j * 58), Tdata);
1010   6                              else if (Tdata >= 10000)
1011   6                                  Tnumber(496, 13 + (j * 58), Tdata);
1012   6                          }
1013   5                      }
1014   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1015   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1016   4                      {
1017   5                          Txtext(340, 13 + (j * 58), "u");
1018   5                      } else if (Flag_dw == 2) {
1019   5                          Txtext(340, 13 + (j * 58), "m");
1020   5                      } else if (Flag_dw == 3) {
1021   5                          Txtext(340, 13 + (j * 58), "G");
1022   5                      }
1023   4                      Alarm();  // ±¨¾¯
1024   4                  }
1025   3                  if (Flag_need_Flash[j] == 1) {
1026   4                      if ((Channel_Display[j] == 0) || (Channel_Display[j] == 1)) {
1027   5                          Trxtext(7, 13 + (j * 58), "  ");
1028   5                          Trxtext(10, 13 + (j * 58), "GM                        ");  // AH1ÏÔÊ¾Ì½Í·
1029   5                      } else {
1030   5                          Trxtext(7, 13 + (j * 58), "  ");
1031   5                          Trxtext(10, 13 + (j * 58), "DL                        ");
1032   5                      }
1033   4                      Trnumber(60, 13 + (j * 58), j + 1);  // ÏÔÊ¾Ì½Í·ºÅ
1034   4                      Trxtext(90, 13 + (j * 58), ":");     // ÏÔÊ¾Ã°ºÅ
1035   4                      Trnumber(470, 13 + (j * 58), Channel_Detector[j][1]);
1036   4                      Trnumber(440, 13 + (j * 58), Channel_Detector[j][0]);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 19  

1037   4                      Trnumber(390, 13 + (j * 58), Average_Times[j]);
1038   4                      if (Tbcd[5] != 0)  // Èô°ÙÎ»·ÇÁã£¬¸ù¾İÊıµÄ´óĞ¡À´ÏÔÊ¾
1039   4                      {
1040   5                          Trnumber(130, 13 + (j * 58), Tbcd[5]);
1041   5                          Trnumber(160, 13 + (j * 58), Tbcd[4]);
1042   5                          Trnumber(190, 13 + (j * 58), Tbcd[3]);
1043   5                          Trxtext(220, 13 + (j * 58), ".");
1044   5                          Trnumber(240, 13 + (j * 58), Tbcd[2]);
1045   5                          Trnumber(270, 13 + (j * 58), Tbcd[1]);
1046   5                          Trnumber(300, 13 + (j * 58), Tbcd[0]);
1047   5                          if (Tdata < 10)                           // ÓÃÓÚÏÔÊ¾TdataËø´æµÄ¼ÆÊıÖµÏÔÊ¾
1048   5                              Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1049   5                          else if ((Tdata >= 10) && (Tdata < 100))
1050   5                              Trnumber(556, 13 + (j * 58), Tdata);
1051   5                          else if ((Tdata >= 100) && (Tdata < 1000))
1052   5                              Trnumber(536, 13 + (j * 58), Tdata);
1053   5                          else if ((Tdata >= 1000) && (Tdata < 10000))
1054   5                              Trnumber(516, 13 + (j * 58), Tdata);
1055   5                          else if (Tdata >= 10000)
1056   5                              Trnumber(496, 13 + (j * 58), Tdata);
1057   5                      } else {
1058   5                          if (Tbcd[4] != 0)  // °ÙÎ»ÎªÁãÊ®Î»·ÇÁã
1059   5                          {
1060   6                              Trnumber(160, 13 + (j * 58), Tbcd[4]);
1061   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1062   6                              Trxtext(220, 13 + (j * 58), ".");
1063   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);
1064   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1065   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1066   6                              if (Tdata < 10)
1067   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1068   6                              else if ((Tdata >= 10) && (Tdata < 100))
1069   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1070   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1071   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1072   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1073   6                                  Trnumber(516, 13 + (j * 58), Tdata);
1074   6                              else if (Tdata >= 10000)
1075   6                                  Trnumber(496, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1076   6                          } else                                        // °ÙÎ»Ê®Î»Î»¾ùÎªÁã£¬¸öÎ»·ÇÁã
1077   5                          {
1078   6                              Trnumber(190, 13 + (j * 58), Tbcd[3]);
1079   6                              Trxtext(220, 13 + (j * 58), ".");       //.Õ¼20¸öÏñËØ
1080   6                              Trnumber(240, 13 + (j * 58), Tbcd[2]);  // Ò»¸öÊı×ÖÕ¼30¸öÏñËØ
1081   6                              Trnumber(270, 13 + (j * 58), Tbcd[1]);
1082   6                              Trnumber(300, 13 + (j * 58), Tbcd[0]);
1083   6                              if (Tdata < 10)
1084   6                                  Trnumber(576, 13 + (j * 58), Tdata);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1085   6                              else if ((Tdata >= 10) && (Tdata < 100))  // ¿ÉÒÔ¿´¼ûÒ»¸öÊı×ÖÕ¼20ÏñËØ
1086   6                                  Trnumber(556, 13 + (j * 58), Tdata);
1087   6                              else if ((Tdata >= 100) && (Tdata < 1000))
1088   6                                  Trnumber(536, 13 + (j * 58), Tdata);
1089   6                              else if ((Tdata >= 1000) && (Tdata < 10000))
1090   6                                  Trnumber(516, 13 + (j * 58), Tdata);
1091   6                              else if (Tdata >= 10000)
1092   6                                  Trnumber(496, 13 + (j * 58), Tdata);
1093   6                          }
1094   5                      }
1095   4                      /**********¼ÆÁ¿µ¥Î»ÏÔÊ¾***********/
1096   4                      if (Flag_dw == 1)  // ²âÊÔÍê³Éºó¼ÓÉÏ2012.6.24
1097   4                      {
1098   5                          Trxtext(340, 13 + (j * 58), "u");
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 20  

1099   5                      } else if (Flag_dw == 2) {
1100   5                          Trxtext(340, 13 + (j * 58), "m");
1101   5                      } else if (Flag_dw == 3) {
1102   5                          Trxtext(340, 13 + (j * 58), "G");
1103   5                      }
1104   4                      Alarm();  // ±¨¾¯
1105   4                  }
1106   3                  send_buf[8 * j] = Tbcd[5];  // ÏòNIM-B·¢ËÍÏÔÊ¾Êı¾İ
1107   3                  send_buf[8 * j + 1] = Tbcd[4];
1108   3                  send_buf[8 * j + 2] = Tbcd[3];
1109   3                  send_buf[8 * j + 3] = Tbcd[2];
1110   3                  send_buf[8 * j + 4] = Tbcd[1];
1111   3                  send_buf[8 * j + 5] = Tbcd[0];
1112   3                  send_buf[8 * j + 6] = Flag_dw;             // ·¢ËÍµ¥Î»±êÖ¾
1113   3                  send_buf[8 * j + 7] = Flag_need_Flash[j];  // LEDÉÁË¸±êÖ¾
1114   3              }
1115   2              for (j = 0; j < 8; j++)  // ÖÃDCSÊı¾İµÄ±¨¾¯ĞÅºÅ
1116   2              {
1117   3                  if (Flag_need_Flash[j]) {
1118   4                      DCS_Send[64] = DCS_Send[64] | Svar1[j];
1119   4                  } else {
1120   4                      DCS_Send[64] = DCS_Send[64] & Svar0[j];
1121   4                  }
1122   3              }  // 8¸öÌ½Í·¾ùÏÔÊ¾Ö´ĞĞÍê
1123   2              Flag_Warn_Count = 1;
1124   2              jishucount++;           // ¼ÆÊı´ÎÊıÔö¼Ó£¨ËãÆ½¾ùÖµÊ±ÓÃ£©
1125   2              if (jishucount == 255)  // ¼ÆÊı´ÎÊıÒòÎªÊÇcharĞÍ±äÁ¿£¬×î¶àÖ§³Ö255¸ö£¬ËùÒÔÒªÖÃÁã
1126   2                  jishucount = 8;
1127   2              if (jishucount > 4)
1128   2                  Flag_Meant = 1;  // Ç°Îå´ÎµÄÈ¡Öµ²»Òª£¬µÚÎå´Î²Å¿ªÊ¼Òª£¬ÖÃFlag_Meant=1£»·ñÔò¾ùÖÃ0
1129   2              else
1130   2                  Flag_Meant = 0;
1131   2              // shortdelay(5000);                                                             //ÑÓÊ±
1132   2              // for(i=0;i<33;i++)//ÏÔÊ¾ÍêÇå0
1133   2              // buf[i]=0;
1134   2          }  // ²âÁ¿±êÖ¾
1135   1          else {
1136   2              jishuguan_data = 0;   // needthinkwhetherneed?4.21,int¼ÆÊı¹ÜÊı¾İ£¬
1137   2              dianlishi_data = 0;   // µçÀëÊÒÊı¾İ
1138   2              jishuguan_rata = 0;   // ¼ÆÊı¹Ü¼ÆÊıÂÊ
1139   2              jishuguan_jtemp = 0;  // ¼ÆÊı¹Ü¼ÁÁ¿Öµ(µ¥Î»×ª»»ºó)
1140   2              dianlishi_jtemp = 0;  // µçÀëÊÒ¼ÁÁ¿Öµ£¨µ¥Î»×ª»»ºó£©
1141   2              Tbcd[11] = 0;
1142   2              Tbcd[10] = 0;
1143   2              Tbcd[9] = 0;
1144   2              Tbcd[8] = 0;
1145   2              Tbcd[7] = 0;
1146   2              Tbcd[6] = 0;
1147   2              Tbcd[5] = 0;
1148   2              Tbcd[4] = 0;
1149   2              Tbcd[3] = 0;
1150   2              Tbcd[2] = 0;
1151   2              Tbcd[1] = 0;
1152   2              Tbcd[0] = 0;
1153   2              j = 10 * biaoding_input - 7;                                                                  // b
             -iaodin_inputÎªÒª±ê¶¨µÄÌ½Í·ĞòºÅ
1154   2              jishuguan_data = buf[4 * biaoding_input - 1] * 256 + buf[4 * biaoding_input - 2];             // Ï
             -àµ±ÓÚTdata
1155   2              jishuguan_rata = jishuguan_data * 12;                                                         // ¼
             -ÆÊıÂÊ£¬Ö±½Ó³ËÒÔ12?
1156   2              dianlishi_data = buf[4 * biaoding_input + 1] * 256 + buf[4 * biaoding_input];                 // µ
             -çÀëÊÒTdata
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 21  

1157   2              Para[0] = (float)(DataThouth[j] * 1000 + DataCent[j] * 100 + DataTenth[j] * 10 + DataGe[j]);  // µ
             -÷½Ú²ÎÊı
1158   2              Para[1] = (float)((float)(DataThouth[j + 1] * 1000 + DataCent[j + 1] * 100 + DataTenth[j + 1] * 10
             - + DataGe[j + 1]) / 1000000);
1159   2              jishuguan_DoseRata = (float)(Para[1] * (jishuguan_rata - Para[0]));
1160   2              if (jishuguan_DoseRata < 0)
1161   2                  jishuguan_DoseRata = 0.0;
1162   2              jishuguan_jtemp = (float)jishuguan_DoseRata;
1163   2              if ((Tbcd[11] <= 9) && (Tbcd[10] <= 9) && (Tbcd[9] <= 9) && (Tbcd[8] <= 9) && (Tbcd[7] <= 9) && (T
             -bcd[6] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1164   2              {
1165   3                  Tbcd[11] = (uchar)(((int)jishuguan_jtemp) / 100);       // Ç§Î»
1166   3                  Tbcd[10] = (uchar)(((int)jishuguan_jtemp) % 100 / 10);  // °ÙÎ»
1167   3                  Tbcd[9] = (uchar)(((int)jishuguan_jtemp) % 100 % 10);   // ¸öÎ»
1168   3                  jishuguan_count_temp = (jishuguan_jtemp - (int)jishuguan_jtemp) * 1000;
1169   3                  Tbcd[8] = (uchar)(jishuguan_count_temp / 100);
1170   3                  Tbcd[7] = (uchar)(jishuguan_count_temp % 100 / 10);
1171   3                  Tbcd[6] = (uchar)(jishuguan_count_temp % 100 % 10);
1172   3              }
1173   2              Para[2] = (float)(DataThouth[j + 2] * 1000 + DataCent[j + 2] * 100 + DataTenth[j + 2] * 10 + DataG
             -e[j + 2]);  // µ÷½Ú²ÎÊı
1174   2              Para[3] = (float)((float)(DataThouth[j + 3] * 1000 + DataCent[j + 3] * 100 + DataTenth[j + 3] * 10
             - + DataGe[j + 3]) / 1000);
1175   2              dianlishi_DoseRata = (float)(Para[3] * (dianlishi_data - Para[2]));
1176   2              if (dianlishi_DoseRata < 0)
1177   2                  dianlishi_DoseRata = 0.0;
1178   2              dianlishi_jtemp = (float)(dianlishi_DoseRata / 1000);
1179   2              if ((Tbcd[5] <= 9) && (Tbcd[4] <= 9) && (Tbcd[3] <= 9) && (Tbcd[2] <= 9) && (Tbcd[1] <= 9) && (Tbc
             -d[0] <= 9))  // 4.21ËÆºõ¶àÓà£¬¿É²»¿ÉÒÔĞŞ¸Äµô
1180   2              {
1181   3                  Tbcd[5] = (uchar)(((int)dianlishi_jtemp) / 100);       // Ç§Î»
1182   3                  Tbcd[4] = (uchar)(((int)dianlishi_jtemp) % 100 / 10);  // °ÙÎ»
1183   3                  Tbcd[3] = (uchar)(((int)dianlishi_jtemp) % 100 % 10);  // ¸öÎ»
1184   3                  dianlishi_count_temp = (dianlishi_jtemp - (int)dianlishi_jtemp) * 1000;
1185   3                  Tbcd[2] = (uchar)(dianlishi_count_temp / 100);
1186   3                  Tbcd[1] = (uchar)(dianlishi_count_temp % 100 / 10);
1187   3                  Tbcd[0] = (uchar)(dianlishi_count_temp % 100 % 10);
1188   3              }
1189   2              Txtext(200, 58, "±ê¶¨Ì½Í·");
1190   2              Tnumber(400, 58, biaoding_input);
1191   2              Txtext(10, 116, "¸Ç¸ï¹Ü");
1192   2              ;
1193   2              Txtext(160, 116, ":");
1194   2              Txtext(220, 174, "uGy/h");
1195   2              Txtext(520, 174, "CPM");
1196   2              Txtext(10, 290, "µçÀëÊÒ");
1197   2              ;
1198   2              Txtext(160, 290, ":");
1199   2              Txtext(220, 348, "mGy/h");
1200   2              Txtext(520, 348, "CP5S");
1201   2              if (Tbcd[11] != 0) {
1202   3                  Tnumber(10, 174, Tbcd[11]);
1203   3                  Tnumber(40, 174, Tbcd[10]);
1204   3                  Tnumber(70, 174, Tbcd[9]);
1205   3                  Txtext(100, 174, ".");
1206   3                  Tnumber(130, 174, Tbcd[8]);
1207   3                  Tnumber(160, 174, Tbcd[7]);
1208   3                  Tnumber(190, 174, Tbcd[6]);
1209   3                  if (jishuguan_data < 10)
1210   3                      Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1211   3                  else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1212   3                      Tnumber(460, 174, jishuguan_data);
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 22  

1213   3                  else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1214   3                      Tnumber(430, 174, jishuguan_data);
1215   3                  else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1216   3                      Tnumber(400, 174, jishuguan_data);
1217   3                  else if (jishuguan_data >= 10000)
1218   3                      Tnumber(370, 174, jishuguan_data);
1219   3              } else {
1220   3                  if (Tbcd[10] != 0) {
1221   4                      Tnumber(40, 174, Tbcd[10]);
1222   4                      Tnumber(70, 174, Tbcd[9]);
1223   4                      Txtext(100, 174, ".");
1224   4                      Tnumber(130, 174, Tbcd[8]);
1225   4                      Tnumber(160, 174, Tbcd[7]);
1226   4                      Tnumber(190, 174, Tbcd[6]);
1227   4                      if (jishuguan_data < 10)
1228   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1229   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1230   4                          Tnumber(460, 174, jishuguan_data);
1231   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1232   4                          Tnumber(430, 174, jishuguan_data);
1233   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1234   4                          Tnumber(400, 174, jishuguan_data);
1235   4                      else if (jishuguan_data >= 10000)
1236   4                          Tnumber(370, 174, jishuguan_data);
1237   4                  } else {
1238   4                      Tnumber(70, 174, Tbcd[9]);
1239   4                      Txtext(100, 174, ".");
1240   4                      Tnumber(130, 174, Tbcd[8]);
1241   4                      Tnumber(160, 174, Tbcd[7]);
1242   4                      Tnumber(190, 174, Tbcd[6]);
1243   4                      if (jishuguan_data < 10)
1244   4                          Tnumber(490, 174, jishuguan_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1245   4                      else if ((jishuguan_data >= 10) && (jishuguan_data < 100))
1246   4                          Tnumber(460, 174, jishuguan_data);
1247   4                      else if ((jishuguan_data >= 100) && (jishuguan_data < 1000))
1248   4                          Tnumber(430, 174, jishuguan_data);
1249   4                      else if ((jishuguan_data >= 1000) && (jishuguan_data < 10000))
1250   4                          Tnumber(400, 174, jishuguan_data);
1251   4                      else if (jishuguan_data >= 10000)
1252   4                          Tnumber(370, 174, jishuguan_data);
1253   4                  }
1254   3              }
1255   2              if (Tbcd[5] != 0) {
1256   3                  Tnumber(10, 348, Tbcd[5]);
1257   3                  Tnumber(40, 348, Tbcd[4]);
1258   3                  Tnumber(70, 348, Tbcd[3]);
1259   3                  Txtext(100, 348, ".");
1260   3                  Tnumber(130, 348, Tbcd[2]);
1261   3                  Tnumber(160, 348, Tbcd[1]);
1262   3                  Tnumber(190, 348, Tbcd[0]);
1263   3                  if (dianlishi_data < 10)
1264   3                      Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1265   3                  else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1266   3                      Tnumber(460, 348, dianlishi_data);
1267   3                  else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1268   3                      Tnumber(430, 348, dianlishi_data);
1269   3                  else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1270   3                      Tnumber(400, 348, dianlishi_data);
1271   3                  else if (dianlishi_data >= 10000)
1272   3                      Tnumber(370, 348, dianlishi_data);
1273   3              } else {
1274   3                  if (Tbcd[4] != 0) {
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 23  

1275   4                      Tnumber(40, 348, Tbcd[4]);
1276   4                      Tnumber(70, 348, Tbcd[3]);
1277   4                      Txtext(100, 348, ".");
1278   4                      Tnumber(130, 348, Tbcd[2]);
1279   4                      Tnumber(160, 348, Tbcd[1]);
1280   4                      Tnumber(190, 348, Tbcd[0]);
1281   4                      if (dianlishi_data < 10)
1282   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1283   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1284   4                          Tnumber(460, 348, dianlishi_data);
1285   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1286   4                          Tnumber(430, 348, dianlishi_data);
1287   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1288   4                          Tnumber(400, 348, dianlishi_data);
1289   4                      else if (dianlishi_data >= 10000)
1290   4                          Tnumber(370, 348, dianlishi_data);
1291   4                  } else {
1292   4                      Tnumber(70, 348, Tbcd[3]);
1293   4                      Txtext(100, 348, ".");
1294   4                      Tnumber(130, 348, Tbcd[2]);
1295   4                      Tnumber(160, 348, Tbcd[1]);
1296   4                      Tnumber(190, 348, Tbcd[0]);
1297   4                      if (dianlishi_data < 10)
1298   4                          Tnumber(490, 348, dianlishi_data);  // ²âÊÔÍê³ÉºóÈ¥µô2012.6.24
1299   4                      else if ((dianlishi_data >= 10) && (dianlishi_data < 100))
1300   4                          Tnumber(460, 348, dianlishi_data);
1301   4                      else if ((dianlishi_data >= 100) && (dianlishi_data < 1000))
1302   4                          Tnumber(430, 348, dianlishi_data);
1303   4                      else if ((dianlishi_data >= 1000) && (dianlishi_data < 10000))
1304   4                          Tnumber(400, 348, dianlishi_data);
1305   4                      else if (dianlishi_data >= 10000)
1306   4                          Tnumber(370, 348, dianlishi_data);
1307   4                  }
1308   3              }
1309   2          }
1310   1      }
1311          
1312          /************************************
1313           *¶ÌÑÓÊ±
1314           ************************************/
1315          void shortdelay(uint i)
1316          {
1317   1          uint k;
1318   1          uint n;
1319   1          for (k = 0; k < i; k++)
1320   1              for (n = 200; n > 0; n--)
1321   1                  ;
1322   1      }
1323          
1324          /********************************
1325           *Ö¸Ê¾µÆºÍ±¨¾¯
1326           ********************************/
1327          void Alarm()
1328          {
1329   1          uchar n;
1330   1          for (n = 0; n < 10; n++) {
1331   2              Led573 = Var_Led;
1332   2              if (Flag_Warn == 1)  // ÉùÒô±¨¾¯
1333   2              {
1334   3                  Speak = 1;
1335   3              }
1336   2          }
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 24  

1337   1      }
1338          
1339          /*******************************
1340           *¸üĞÂÖ¸Ê¾µÆ×´Ì¬
1341           *******************************/
1342          void Updata_Flash(uchar j)
1343          {
1344   1          if (Flag_need_Flash[j]) {
1345   2              if (State_Flash[j] == 1) {
1346   3                  State_Flash[j] = 0;
1347   3              } else {
1348   3                  State_Flash[j] = 1;
1349   3              }
1350   2          } else
1351   1              State_Flash[j] = 0;
1352   1      }
1353          
1354          /***********************************
1355           *Ö¸Ê¾µÆÉÁË¸
1356           ************************************/
1357          void Led_Flash(void)
1358          {
1359   1          uchar i;
1360   1          for (i = 0; i < 8; i++) {
1361   2              Updata_Flash(i);                                  // ×´Ì¬È¡·´
1362   2              Led_Disp(i, Flag_need_Flash[i], State_Flash[i]);  // µÆ×´Ì¬ÏÔÊ¾
1363   2          }
1364   1      }
1365          
1366          /************************************
1367           *Ö¸Ê¾µÆ×´Ì¬ÏÔÊ¾
1368           *************************************/
1369          void Led_Disp(uchar Num, uchar Flag, uchar State)
1370          {
1371   1          if (Flag) {
1372   2              if (State) {
1373   3                  Var_Led = Var_Led & Svar0[Num];  // Ö¸Ê¾µÆÁÁ
1374   3                  Led573 = Var_Led;
1375   3                  if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1376   3                  {
1377   4                      Speak = 0;  // ·äÃùÆ÷Ïì
1378   4                      shortdelay(100);
1379   4                  }
1380   3                  return;
1381   3              }
1382   2          }
1383   1          Var_Led = Var_Led | Svar1[Num];  // Ö¸Ê¾µÆÃğ
1384   1          Led573 = Var_Led;
1385   1          if (Flag_Warn == 1)  // ĞèÒª·äÃùÆ÷¹¤×÷
1386   1          {
1387   2              Speak = 1;  // ·äÃùÆ÷²»Ïì
1388   2              shortdelay(100);
1389   2          }
1390   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  23470    ----
   CONSTANT SIZE    =    153    ----
   XDATA SIZE       =    627      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.7.0   8253COUNT                                                         03/19/2024 15:40:29 PAGE 25  

   IDATA SIZE       =     48      24
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
